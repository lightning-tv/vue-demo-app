{"version":3,"file":"CoreExtension-legacy-mpYsTIFj.js","sources":["../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/lib/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/common/EventEmitter.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreShader.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/ShaderUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreShader.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/textures/Texture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/TrFontFace.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/textures/ColorTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreContextTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreRenderer.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreRenderOp.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreRenderOp.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/RendererUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/textures/SubTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxSubTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/BufferCollection.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/lib/WebGlContextWrapper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/WebGlUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/textures/RenderTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxRenderTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreRenderer.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/renderers/SdfTextRenderer/internal/SpecialCodepoints.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/FontShaper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/SdfFontShaper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/SdfTrFontFace.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.1/node_modules/@lightningjs/renderer/dist/src/core/CoreExtension.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function createWebGLContext(canvas, contextSpy) {\n    const config = {\n        alpha: true,\n        antialias: false,\n        depth: false,\n        stencil: true,\n        desynchronized: false,\n        // Disabled because it prevents Visual Regression Tests from working\n        // failIfMajorPerformanceCaveat: true,\n        powerPreference: 'high-performance',\n        premultipliedAlpha: true,\n        preserveDrawingBuffer: false,\n    };\n    const gl = \n    // TODO: Remove this assertion once this issue is fixed in TypeScript\n    // https://github.com/microsoft/TypeScript/issues/53614\n    (canvas.getContext('webgl', config) ||\n        canvas.getContext('experimental-webgl', config));\n    if (!gl) {\n        throw new Error('Unable to create WebGL context');\n    }\n    if (contextSpy) {\n        // Proxy the GL context to log all GL calls\n        return new Proxy(gl, {\n            get(target, prop) {\n                const value = target[prop];\n                if (typeof value === 'function') {\n                    contextSpy.increment(String(prop));\n                    return value.bind(target);\n                }\n                return value;\n            },\n        });\n    }\n    return gl;\n}\n/**\n * Asserts a condition is truthy, otherwise throws an error\n *\n * @remarks\n * Useful at the top of functions to ensure certain conditions, arguments and\n * properties are set/met before continuing. When using this function,\n * TypeScript will narrow away falsy types from the condition.\n *\n * @param condition\n * @param message\n * @returns\n */\nexport function assertTruthy(condition, message) {\n    if (isProductionEnvironment())\n        return;\n    if (!condition) {\n        throw new Error(message || 'Assertion failed');\n    }\n}\n/**\n * Merges two colors based on a given progress value.\n *\n * This function takes two colors (c1 and c2) represented as 32-bit integers\n * in RGBA format and blends them based on the provided progress value (p).\n * The result is a new color that is a weighted combination of the input colors,\n * where the weight is determined by the progress value.\n *\n * @param {number} c1 - The first color in RGBA format (32-bit integer).\n * @param {number} c2 - The second color in RGBA format (32-bit integer).\n * @param {number} p - The progress value between 0 and 1.\n * @returns {number} The merged color as a 32-bit integer in RGBA format.\n */\nexport function mergeColorProgress(rgba1, rgba2, p) {\n    const r1 = Math.trunc(rgba1 >>> 24);\n    const g1 = Math.trunc((rgba1 >>> 16) & 0xff);\n    const b1 = Math.trunc((rgba1 >>> 8) & 0xff);\n    const a1 = Math.trunc(rgba1 & 0xff);\n    const r2 = Math.trunc(rgba2 >>> 24);\n    const g2 = Math.trunc((rgba2 >>> 16) & 0xff);\n    const b2 = Math.trunc((rgba2 >>> 8) & 0xff);\n    const a2 = Math.trunc(rgba2 & 0xff);\n    const r = Math.round(r2 * p + r1 * (1 - p));\n    const g = Math.round(g2 * p + g1 * (1 - p));\n    const b = Math.round(b2 * p + b1 * (1 - p));\n    const a = Math.round(a2 * p + a1 * (1 - p));\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * @internalRemarks\n * This method does NOT premultiply the alpha into the color channels. If that\n * is required (for internal use only) use {@link mergeColorAlphaPremultiplied}\n * instead.\n *\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @returns\n */\nexport function mergeColorAlpha(rgba, alpha) {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = Math.trunc((rgba & 0xff) * alpha);\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\nlet premultiplyRGB = true;\n/**\n * RGB components should not be premultiplied when using Canvas renderer\n * @param mode  Renderer mode\n */\nexport function setPremultiplyMode(mode) {\n    premultiplyRGB = mode === 'webgl';\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * For the webGl renderer, each color channel is premultiplied by the final alpha value.\n *\n * @remarks\n * If `flipEndianess` is set to true, the function will returned an ABGR encoded number\n * which is useful when the color value needs to be passed into a shader attribute.\n *\n * NOTE: Depending on the mode set by {@link setPremultiplyMode}, this method returns\n * a PREMULTIPLIED alpha color which is generally only useful in the context of the\n * internal rendering process. Use {@link mergeColorAlpha} if you need to blend an alpha\n * value into a color in the context of the Renderer's main API.\n *\n * @internalRemarks\n * Do not expose this method in the main API because Renderer users should instead use\n * {@link mergeColorAlpha} to manipulate the alpha value of a color.\n *\n * @internal\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @param flipEndianess Flip the endianess. RGBA becomes encoded as ABGR (for inserting colors into shader attributes)\n * @returns\n */\nexport function mergeColorAlphaPremultiplied(rgba, alpha, flipEndianess = false) {\n    const newAlpha = ((rgba & 0xff) / 255) * alpha;\n    const rgbAlpha = premultiplyRGB ? newAlpha : 1;\n    const r = Math.trunc((rgba >>> 24) * rgbAlpha);\n    const g = Math.trunc(((rgba >>> 16) & 0xff) * rgbAlpha);\n    const b = Math.trunc(((rgba >>> 8) & 0xff) * rgbAlpha);\n    const a = Math.trunc(newAlpha * 255);\n    if (flipEndianess) {\n        return ((a << 24) | (b << 16) | (g << 8) | r) >>> 0;\n    }\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Returns true if the given object has the given \"own\" property.\n *\n * @param obj\n * @param prop\n * @returns\n */\nexport function hasOwn(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n/**\n * Converts degrees to radians\n *\n * @param degrees\n * @returns\n */\nexport function deg2Rad(degrees) {\n    return (degrees * Math.PI) / 180;\n}\n/**\n * Returns image aspect ratio\n *\n * @param width\n * @param height\n * @returns\n */\nexport function getImageAspectRatio(width, height) {\n    return width / height;\n}\n/**\n * Checks import.meta if env is production\n *\n * @returns\n */\nexport function isProductionEnvironment() {\n    return import.meta.env && import.meta.env.PROD;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const getNormalizedRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r / 255, g / 255, b / 255, a / 255];\n};\nexport const getRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r, g, b, a];\n};\nexport const norm = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    const rgbaArr = [r / 255, g / 255, b / 255, a / 255];\n    rgbaArr[0] = Math.max(0, Math.min(255, rgbaArr[0]));\n    rgbaArr[1] = Math.max(0, Math.min(255, rgbaArr[1]));\n    rgbaArr[2] = Math.max(0, Math.min(255, rgbaArr[2]));\n    rgbaArr[3] = Math.max(0, Math.min(255, rgbaArr[3]));\n    let v = ((rgbaArr[3] | 0) << 24) +\n        ((rgbaArr[0] | 0) << 16) +\n        ((rgbaArr[1] | 0) << 8) +\n        (rgbaArr[2] | 0);\n    if (v < 0) {\n        v = 0xffffffff + v + 1;\n    }\n    return v;\n};\nexport function getNormalizedAlphaComponent(rgba) {\n    return (rgba & 0xff) / 255.0;\n}\n/**\n * Get a CSS color string from a RGBA color\n *\n * @param color\n * @returns\n */\nexport function getRgbaString(color) {\n    const r = Math.floor(color[0] * 255.0);\n    const g = Math.floor(color[1] * 255.0);\n    const b = Math.floor(color[2] * 255.0);\n    const a = Math.floor(color[3] * 255.0);\n    return `rgba(${r},${g},${b},${a.toFixed(4)})`;\n}\nexport function createBound(x1, y1, x2, y2, out) {\n    if (out) {\n        out.x1 = x1;\n        out.y1 = y1;\n        out.x2 = x2;\n        out.y2 = y2;\n        return out;\n    }\n    return {\n        x1,\n        y1,\n        x2,\n        y2,\n    };\n}\nexport function intersectBound(a, b, out) {\n    const intersection = createBound(Math.max(a.x1, b.x1), Math.max(a.y1, b.y1), Math.min(a.x2, b.x2), Math.min(a.y2, b.y2), out);\n    if (intersection.x1 < intersection.x2 && intersection.y1 < intersection.y2) {\n        return intersection;\n    }\n    return createBound(0, 0, 0, 0, intersection);\n}\nexport function boundsOverlap(a, b) {\n    return a.x1 < b.x2 && a.x2 > b.x1 && a.y1 < b.y2 && a.y2 > b.y1;\n}\nexport function convertBoundToRect(bound, out) {\n    if (out) {\n        out.x = bound.x1;\n        out.y = bound.y1;\n        out.width = bound.x2 - bound.x1;\n        out.height = bound.y2 - bound.y1;\n        return out;\n    }\n    return {\n        x: bound.x1,\n        y: bound.y1,\n        width: bound.x2 - bound.x1,\n        height: bound.y2 - bound.y1,\n    };\n}\nexport function intersectRect(a, b, out) {\n    const x = Math.max(a.x, b.x);\n    const y = Math.max(a.y, b.y);\n    const width = Math.min(a.x + a.width, b.x + b.width) - x;\n    const height = Math.min(a.y + a.height, b.y + b.height) - y;\n    if (width > 0 && height > 0) {\n        if (out) {\n            out.x = x;\n            out.y = y;\n            out.width = width;\n            out.height = height;\n            return out;\n        }\n        return {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n    if (out) {\n        out.x = 0;\n        out.y = 0;\n        out.width = 0;\n        out.height = 0;\n        return out;\n    }\n    return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n}\nexport function copyRect(a, out) {\n    if (out) {\n        out.x = a.x;\n        out.y = a.y;\n        out.width = a.width;\n        out.height = a.height;\n        return out;\n    }\n    return {\n        x: a.x,\n        y: a.y,\n        width: a.width,\n        height: a.height,\n    };\n}\nexport function compareRect(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null) {\n        return false;\n    }\n    return (a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height);\n}\nexport function boundInsideBound(bound1, bound2) {\n    return (bound1.x1 <= bound2.x2 &&\n        bound1.y1 <= bound2.y2 &&\n        bound1.x2 >= bound2.x1 &&\n        bound1.y2 >= bound2.y1);\n}\nexport function isBoundPositive(bound) {\n    return bound.x1 < bound.x2 && bound.y1 < bound.y2;\n}\nexport function isRectPositive(rect) {\n    return rect.width > 0 && rect.height > 0;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * EventEmitter base class\n */\nexport class EventEmitter {\n    eventListeners = {};\n    on(event, listener) {\n        let listeners = this.eventListeners[event];\n        if (!listeners) {\n            listeners = [];\n        }\n        listeners.push(listener);\n        this.eventListeners[event] = listeners;\n    }\n    off(event, listener) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        if (!listener) {\n            delete this.eventListeners[event];\n            return;\n        }\n        const index = listeners.indexOf(listener);\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n    once(event, listener) {\n        const onceListener = (target, data) => {\n            this.off(event, onceListener);\n            listener(target, data);\n        };\n        this.on(event, onceListener);\n    }\n    emit(event, data) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        [...listeners].forEach((listener) => {\n            listener(this, data);\n        });\n    }\n    removeAllListeners() {\n        this.eventListeners = {};\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreShader {\n    // abstract draw(): void;\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {};\n    }\n}\n//# sourceMappingURL=CoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//#endregion Types\nexport function createShader(glw, type, source) {\n    const shader = glw.createShader(type);\n    if (!shader) {\n        throw new Error();\n    }\n    glw.shaderSource(shader, source);\n    glw.compileShader(shader);\n    const success = glw.getShaderParameter(shader, glw.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(glw.getShaderInfoLog(shader));\n    glw.deleteShader(shader);\n}\nexport function createProgram(glw, vertexShader, fragmentShader) {\n    const program = glw.createProgram();\n    if (!program) {\n        throw new Error();\n    }\n    glw.attachShader(program, vertexShader);\n    glw.attachShader(program, fragmentShader);\n    glw.linkProgram(program);\n    const success = glw.getProgramParameter(program, glw.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(glw.getProgramInfoLog(program));\n    glw.deleteProgram(program);\n    return undefined;\n}\n//# sourceMappingURL=ShaderUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, hasOwn } from '../../../utils.js';\nimport { CoreShader } from '../CoreShader.js';\nimport { createProgram, createShader, } from './internal/ShaderUtils.js';\nimport { isWebGl2 } from './internal/WebGlUtils.js';\nexport class WebGlCoreShader extends CoreShader {\n    boundBufferCollection = null;\n    buffersBound = false;\n    program;\n    /**\n     * Vertex Array Object\n     *\n     * @remarks\n     * Used by WebGL2 Only\n     */\n    vao;\n    renderer;\n    glw;\n    attributeBuffers;\n    attributeLocations;\n    attributeNames;\n    uniformLocations;\n    uniformTypes;\n    supportsIndexedTextures;\n    constructor(options) {\n        super();\n        const renderer = (this.renderer = options.renderer);\n        const glw = (this.glw = this.renderer.glw);\n        this.supportsIndexedTextures = options.supportsIndexedTextures || false;\n        // Check that extensions are supported\n        const webGl2 = glw.isWebGl2();\n        const requiredExtensions = (webGl2 && options.webgl2Extensions) ||\n            (!webGl2 && options.webgl1Extensions) ||\n            [];\n        const glVersion = webGl2 ? '2.0' : '1.0';\n        requiredExtensions.forEach((extensionName) => {\n            if (!glw.getExtension(extensionName)) {\n                throw new Error(`Shader \"${this.constructor.name}\" requires extension \"${extensionName}\" for WebGL ${glVersion} but wasn't found`);\n            }\n        });\n        // Gather shader sources\n        // - If WebGL 2 and special WebGL 2 sources are provided, we copy those sources and delete\n        // the extra copy of them to save memory.\n        // TODO: This could be further made optimal by just caching the compiled shaders and completely deleting\n        // the source code\n        const shaderSources = options.shaderSources ||\n            this.constructor.shaderSources;\n        if (!shaderSources) {\n            throw new Error(`Shader \"${this.constructor.name}\" is missing shaderSources.`);\n        }\n        else if (webGl2 && shaderSources?.webGl2) {\n            shaderSources.fragment = shaderSources.webGl2.fragment;\n            shaderSources.vertex = shaderSources.webGl2.vertex;\n            delete shaderSources.webGl2;\n        }\n        const textureUnits = renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        const vertexSource = shaderSources.vertex instanceof Function\n            ? shaderSources.vertex(textureUnits)\n            : shaderSources.vertex;\n        const fragmentSource = shaderSources.fragment instanceof Function\n            ? shaderSources.fragment(textureUnits)\n            : shaderSources.fragment;\n        const vertexShader = createShader(glw, glw.VERTEX_SHADER, vertexSource);\n        const fragmentShader = createShader(glw, glw.FRAGMENT_SHADER, fragmentSource);\n        if (!vertexShader || !fragmentShader) {\n            throw new Error();\n        }\n        const program = createProgram(glw, vertexShader, fragmentShader);\n        if (!program) {\n            throw new Error();\n        }\n        this.program = program;\n        if (webGl2) {\n            const vao = glw.createVertexArray();\n            if (!vao) {\n                throw new Error();\n            }\n            this.vao = vao;\n            glw.bindVertexArray(this.vao);\n        }\n        this.attributeLocations = {};\n        this.attributeBuffers = {};\n        this.attributeNames = [];\n        [...options.attributes].forEach((attributeName) => {\n            const location = glw.getAttribLocation(this.program, attributeName);\n            if (location < 0) {\n                throw new Error(`${this.constructor.name}: Vertex shader must have an attribute \"${attributeName}\"!`);\n            }\n            const buffer = glw.createBuffer();\n            if (!buffer) {\n                throw new Error(`${this.constructor.name}: Could not create buffer for attribute \"${attributeName}\"`);\n            }\n            this.attributeLocations[attributeName] = location;\n            this.attributeBuffers[attributeName] = buffer;\n            this.attributeNames.push(attributeName);\n        });\n        this.uniformLocations = {};\n        this.uniformTypes = {};\n        options.uniforms.forEach((uniform) => {\n            const location = glw.getUniformLocation(this.program, uniform.name);\n            this.uniformTypes[uniform.name] = uniform.uniform;\n            if (!location) {\n                console.warn(`Shader \"${this.constructor.name}\" could not get uniform location for \"${uniform.name}\"`);\n                return;\n            }\n            this.uniformLocations[uniform.name] = location;\n        });\n    }\n    bindBufferAttribute(location, buffer, attribute) {\n        const { glw } = this;\n        glw.enableVertexAttribArray(location);\n        glw.vertexAttribPointer(buffer, location, attribute.size, attribute.type, attribute.normalized, attribute.stride, attribute.offset);\n    }\n    disableAttribute(location) {\n        this.glw.disableVertexAttribArray(location);\n    }\n    disableAttributes() {\n        for (const loc in this.attributeLocations) {\n            this.disableAttribute(this.attributeLocations[loc]);\n        }\n        this.boundBufferCollection = null;\n    }\n    /**\n     * Given two sets of Shader props destined for this Shader, determine if they can be batched together\n     * to reduce the number of draw calls.\n     *\n     * @remarks\n     * This is used by the {@link WebGlCoreRenderer} to determine if it can batch multiple consecutive draw\n     * calls into a single draw call.\n     *\n     * By default, this returns false (meaning no batching is allowed), but can be\n     * overridden by child classes to provide more efficient batching.\n     *\n     * @param propsA\n     * @param propsB\n     * @returns\n     */\n    canBatchShaderProps(propsA, propsB) {\n        return false;\n    }\n    bindRenderOp(renderOp, props) {\n        this.bindBufferCollection(renderOp.buffers);\n        if (renderOp.textures.length > 0) {\n            this.bindTextures(renderOp.textures);\n        }\n        const { glw, parentHasRenderTexture, renderToTexture } = renderOp;\n        // Skip if the parent and current operation both have render textures\n        if (renderToTexture && parentHasRenderTexture) {\n            return;\n        }\n        // Bind render texture framebuffer dimensions as resolution\n        // if the parent has a render texture\n        if (parentHasRenderTexture) {\n            const { width, height } = renderOp.framebufferDimensions || {};\n            // Force pixel ratio to 1.0 for render textures since they are always 1:1\n            // the final render texture will be rendered to the screen with the correct pixel ratio\n            this.setUniform('u_pixelRatio', 1.0);\n            // Set resolution to the framebuffer dimensions\n            this.setUniform('u_resolution', new Float32Array([width ?? 0, height ?? 0]));\n        }\n        else {\n            this.setUniform('u_pixelRatio', renderOp.options.pixelRatio);\n            this.setUniform('u_resolution', new Float32Array([glw.canvas.width, glw.canvas.height]));\n        }\n        if (props) {\n            // Bind optional automatic uniforms\n            // These are only bound if their keys are present in the props.\n            if (hasOwn(props, '$dimensions')) {\n                let dimensions = props.$dimensions;\n                if (!dimensions) {\n                    dimensions = renderOp.dimensions;\n                }\n                this.setUniform('u_dimensions', [dimensions.width, dimensions.height]);\n            }\n            if (hasOwn(props, '$alpha')) {\n                let alpha = props.$alpha;\n                if (!alpha) {\n                    alpha = renderOp.alpha;\n                }\n                this.setUniform('u_alpha', alpha);\n            }\n            this.bindProps(props);\n        }\n    }\n    setUniform(name, ...value) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-argument\n        this.glw.setUniform(this.uniformTypes[name], this.uniformLocations[name], ...value);\n    }\n    bindBufferCollection(buffer) {\n        if (this.boundBufferCollection === buffer) {\n            return;\n        }\n        for (const attributeName in this.attributeLocations) {\n            const resolvedBuffer = buffer.getBuffer(attributeName);\n            const resolvedInfo = buffer.getAttributeInfo(attributeName);\n            assertTruthy(resolvedBuffer, `Buffer for \"${attributeName}\" not found`);\n            assertTruthy(resolvedInfo);\n            this.bindBufferAttribute(this.attributeLocations[attributeName], resolvedBuffer, resolvedInfo);\n        }\n        this.boundBufferCollection = buffer;\n    }\n    bindProps(props) {\n        // Implement in child class\n    }\n    bindTextures(textures) {\n        // no defaults\n    }\n    attach() {\n        this.glw.useProgram(this.program);\n        this.glw.useProgram(this.program);\n        if (this.glw.isWebGl2() && this.vao) {\n            this.glw.bindVertexArray(this.vao);\n        }\n    }\n    detach() {\n        this.disableAttributes();\n    }\n    static shaderSources;\n}\n//# sourceMappingURL=WebGlCoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../common/EventEmitter.js';\n/**\n * Represents a source of texture data for a CoreContextTexture.\n *\n * @remarks\n * Texture sources are used to populate a CoreContextTexture when that texture\n * is loaded. Texture data retrieved by the CoreContextTexture by the\n * `getTextureData` method. It's the responsibility of the concerete `Texture`\n * subclass to implement this method appropriately.\n */\nexport class Texture extends EventEmitter {\n    txManager;\n    /**\n     * The dimensions of the texture\n     *\n     * @remarks\n     * Until the texture data is loaded for the first time the value will be\n     * `null`.\n     */\n    dimensions = null;\n    error = null;\n    state = 'freed';\n    renderableOwners = new Set();\n    constructor(txManager) {\n        super();\n        this.txManager = txManager;\n    }\n    /**\n     * Add/remove an owner to/from the Texture based on its renderability.\n     *\n     * @remarks\n     * Any object can own a texture, be it a CoreNode or even the state object\n     * from a Text Renderer.\n     *\n     * When the reference to the texture that an owner object holds is replaced\n     * or cleared it must call this with `renderable=false` to release the owner\n     * association.\n     *\n     * @param owner\n     * @param renderable\n     */\n    setRenderableOwner(owner, renderable) {\n        if (renderable) {\n            this.renderableOwners.add(owner);\n        }\n        else {\n            this.renderableOwners.delete(owner);\n        }\n    }\n    /**\n     * Returns true if the texture is assigned to any Nodes that are renderable.\n     */\n    get renderable() {\n        return this.renderableOwners.size > 0;\n    }\n    /**\n     * Set the state of the texture\n     *\n     * @remark\n     * Intended for internal-use only but declared public so that it can be set\n     * by it's associated {@link CoreContextTexture}\n     *\n     * @param state\n     * @param args\n     */\n    setState(state, ...args) {\n        if (this.state !== state) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.state = state;\n            if (state === 'loaded') {\n                const loadedArgs = args;\n                this.dimensions = loadedArgs[0];\n            }\n            else if (state === 'failed') {\n                const failedArgs = args;\n                this.error = failedArgs[0];\n            }\n            this.emit(state, ...args);\n        }\n    }\n    /**\n     * Make a cache key for this texture.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide an\n     * appropriate cache key for the texture type including the texture's\n     * properties that uniquely identify a copy of the texture. If the texture\n     * type does not support caching, then this method should return `false`.\n     *\n     * @param props\n     * @returns\n     * A cache key for this texture or `false` if the texture type does not\n     * support caching.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    /**\n     * Resolve the default values for the texture's properties.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide\n     * default values for the texture's optional properties.\n     *\n     * @param props\n     * @returns\n     * The default values for the texture's properties.\n     */\n    static resolveDefaults(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    props) {\n        return {};\n    }\n}\n//# sourceMappingURL=Texture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../../common/EventEmitter.js';\nexport class TrFontFace extends EventEmitter {\n    fontFamily;\n    descriptors;\n    loaded = false;\n    metrics = null;\n    constructor(options) {\n        super();\n        const { fontFamily, descriptors, metrics } = options;\n        if (metrics) {\n            // Normalize metrics to be in the range of 0 to 1\n            this.metrics = {\n                ascender: metrics.ascender / metrics.unitsPerEm,\n                descender: metrics.descender / metrics.unitsPerEm,\n                lineGap: metrics.lineGap / metrics.unitsPerEm,\n            };\n        }\n        this.fontFamily = fontFamily;\n        this.descriptors = {\n            style: 'normal',\n            weight: 'normal',\n            stretch: 'normal',\n            ...descriptors,\n        };\n    }\n    /**\n     * Convert a TrFontFaceDescriptors to a FontFaceDescriptors which differ slightly\n     *\n     * @param descriptors\n     * @returns\n     */\n    static convertToCssFontFaceDescriptors(descriptors) {\n        return {\n            style: descriptors.style,\n            weight: typeof descriptors.weight === 'number'\n                ? `${descriptors.weight}`\n                : descriptors.weight,\n            stretch: descriptors.stretch,\n            unicodeRange: descriptors.unicodeRange,\n            variant: descriptors.variant,\n            featureSettings: descriptors.featureSettings,\n            display: descriptors.display,\n        };\n    }\n}\n//# sourceMappingURL=TrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\n/**\n * Texture consisting of only a 1x1 color pixel\n *\n * @remarks\n * The pixel color is set with the {@link ColorTextureProps.color} prop.\n *\n * This is the default texture used for a Node if it's\n * {@link INodeWritableProps.texture} prop is set to `null` (the default)\n *\n * Generally the 1x1 color pixel is stretched to whatever the set dimensions of\n * a Node are.\n */\nexport class ColorTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = ColorTexture.resolveDefaults(props || {});\n    }\n    get color() {\n        return this.props.color;\n    }\n    set color(color) {\n        this.props.color = color;\n    }\n    async getTextureData() {\n        const pixelData32 = new Uint32Array([this.color]);\n        const pixelData8 = new Uint8ClampedArray(pixelData32.buffer);\n        return {\n            data: new ImageData(pixelData8, 1, 1),\n            premultiplyAlpha: true,\n        };\n    }\n    static makeCacheKey(props) {\n        const resolvedProps = ColorTexture.resolveDefaults(props);\n        return `ColorTexture,${resolvedProps.color}`;\n    }\n    static resolveDefaults(props) {\n        return {\n            color: props.color || 0xffffffff,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=ColorTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreContextTexture {\n    memManager;\n    textureSource;\n    constructor(memManager, textureSource) {\n        this.memManager = memManager;\n        this.textureSource = textureSource;\n    }\n}\n//# sourceMappingURL=CoreContextTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ColorTexture } from '../textures/ColorTexture.js';\nimport { CoreContextTexture } from './CoreContextTexture.js';\nexport class CoreRenderer {\n    options;\n    mode;\n    stage;\n    //// Core Managers\n    txManager;\n    txMemManager;\n    shManager;\n    rttNodes = [];\n    constructor(options) {\n        this.options = options;\n        this.stage = options.stage;\n        this.txManager = options.txManager;\n        this.txMemManager = options.txMemManager;\n        this.shManager = options.shManager;\n    }\n}\n//# sourceMappingURL=CoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreRenderOp {\n}\n//# sourceMappingURL=CoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreRenderOp } from '../CoreRenderOp.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nconst MAX_TEXTURES = 8; // TODO: get from gl\n/**\n * Can render multiple quads with multiple textures (up to vertex shader texture limit)\n *\n */\nexport class WebGlCoreRenderOp extends CoreRenderOp {\n    glw;\n    options;\n    buffers;\n    shader;\n    shaderProps;\n    alpha;\n    clippingRect;\n    dimensions;\n    bufferIdx;\n    zIndex;\n    renderToTexture;\n    parentHasRenderTexture;\n    framebufferDimensions;\n    length = 0;\n    numQuads = 0;\n    textures = [];\n    maxTextures;\n    constructor(glw, options, buffers, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, zIndex, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        super();\n        this.glw = glw;\n        this.options = options;\n        this.buffers = buffers;\n        this.shader = shader;\n        this.shaderProps = shaderProps;\n        this.alpha = alpha;\n        this.clippingRect = clippingRect;\n        this.dimensions = dimensions;\n        this.bufferIdx = bufferIdx;\n        this.zIndex = zIndex;\n        this.renderToTexture = renderToTexture;\n        this.parentHasRenderTexture = parentHasRenderTexture;\n        this.framebufferDimensions = framebufferDimensions;\n        this.maxTextures = shader.supportsIndexedTextures\n            ? glw.getParameter(glw.MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n            : 1;\n    }\n    addTexture(texture) {\n        const { textures, maxTextures } = this;\n        const existingIdx = textures.findIndex((t) => t === texture);\n        if (existingIdx !== -1) {\n            return existingIdx;\n        }\n        const newIdx = textures.length;\n        if (newIdx >= maxTextures) {\n            return 0xffffffff;\n        }\n        this.textures.push(texture);\n        return newIdx;\n    }\n    draw() {\n        const { glw, shader, shaderProps, options } = this;\n        const { shManager } = options;\n        shManager.useShader(shader);\n        shader.bindRenderOp(this, shaderProps);\n        // TODO: Reduce calculations required\n        const quadIdx = (this.bufferIdx / 24) * 6 * 2;\n        // Clipping\n        if (this.clippingRect.valid) {\n            const { x, y, width, height } = this.clippingRect;\n            const pixelRatio = options.pixelRatio;\n            const canvasHeight = options.canvas.height;\n            const clipX = Math.round(x * pixelRatio);\n            const clipWidth = Math.round(width * pixelRatio);\n            const clipHeight = Math.round(height * pixelRatio);\n            const clipY = Math.round(canvasHeight - clipHeight - y * pixelRatio);\n            glw.setScissorTest(true);\n            glw.scissor(clipX, clipY, clipWidth, clipHeight);\n        }\n        else {\n            glw.setScissorTest(false);\n        }\n        glw.drawElements(glw.TRIANGLES, 6 * this.numQuads, glw.UNSIGNED_SHORT, quadIdx);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Get device specific webgl parameters\n * @param glw\n */\nexport function getWebGlParameters(glw) {\n    const params = {\n        MAX_RENDERBUFFER_SIZE: 0,\n        MAX_TEXTURE_SIZE: 0,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n        MAX_VIEWPORT_DIMS: 0,\n        MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0,\n        MAX_VERTEX_ATTRIBS: 0,\n        MAX_VARYING_VECTORS: 0,\n        MAX_VERTEX_UNIFORM_VECTORS: 0,\n        MAX_FRAGMENT_UNIFORM_VECTORS: 0,\n    };\n    // Map over all parameters and get them\n    const keys = Object.keys(params);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        params[key] = glw.getParameter(glw[key]);\n    });\n    return params;\n}\n/**\n * Get device webgl extensions\n * @param glw\n */\nexport function getWebGlExtensions(glw) {\n    const extensions = {\n        ANGLE_instanced_arrays: null,\n        WEBGL_compressed_texture_s3tc: null,\n        WEBGL_compressed_texture_astc: null,\n        WEBGL_compressed_texture_etc: null,\n        WEBGL_compressed_texture_etc1: null,\n        WEBGL_compressed_texture_pvrtc: null,\n        WEBKIT_WEBGL_compressed_texture_pvrtc: null,\n        WEBGL_compressed_texture_s3tc_srgb: null,\n        OES_vertex_array_object: null,\n    };\n    // Map over all extensions and get them\n    const keys = Object.keys(extensions);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        extensions[key] = glw.getExtension(key);\n    });\n    return extensions;\n}\n/**\n * Allocate big memory chunk that we\n * can re-use to draw quads\n *\n * @param glw\n * @param size\n */\nexport function createIndexBuffer(glw, size) {\n    const maxQuads = ~~(size / 80);\n    const indices = new Uint16Array(maxQuads * 6);\n    for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n        indices[i] = j;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n        indices[i + 3] = j + 2;\n        indices[i + 4] = j + 1;\n        indices[i + 5] = j + 3;\n    }\n    const buffer = glw.createBuffer();\n    glw.elementArrayBufferData(buffer, indices, glw.STATIC_DRAW);\n}\n/**\n * Checks if an object is of type HTMLImageElement.\n * This is used because we cant check for HTMLImageElement directly when the\n * renderer is running in a seperate web worker context.\n *\n * @param obj\n * @returns\n */\nexport function isHTMLImageElement(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        obj.constructor &&\n        obj.constructor.name === 'HTMLImageElement');\n}\n//# sourceMappingURL=RendererUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Core Utility Functions\n *\n * @module\n */\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\nconst degree = Math.PI / 180;\nexport const setMatrixArrayType = (type) => {\n    ARRAY_TYPE = type;\n};\nexport const toRadian = (a) => {\n    return a * degree;\n};\nexport const equals = (a, b) => {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n};\nexport const rand = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nexport const isPowerOfTwo = (value) => {\n    return value && !(value & (value - 1));\n};\nconst getTimingBezier = (a, b, c, d) => {\n    const xc = 3.0 * a;\n    const xb = 3.0 * (c - a) - xc;\n    const xa = 1.0 - xc - xb;\n    const yc = 3.0 * b;\n    const yb = 3.0 * (d - b) - yc;\n    const ya = 1.0 - yc - yb;\n    return function (time) {\n        if (time >= 1.0) {\n            return 1;\n        }\n        if (time <= 0) {\n            return 0;\n        }\n        let t = 0.5, cbx, cbxd, dx;\n        for (let it = 0; it < 20; it++) {\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                return t * (t * (t * ya + yb) + yc);\n            }\n            // Cubic bezier derivative.\n            cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n            t += dx / cbxd;\n        }\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc);\n            }\n            if (dx < 0) {\n                maxT = t;\n            }\n            else {\n                minT = t;\n            }\n        }\n    };\n};\nconst timingMapping = {};\nconst timingLookup = {\n    ease: [0.25, 0.1, 0.25, 1.0],\n    'ease-in': [0.42, 0, 1.0, 1.0],\n    'ease-out': [0, 0, 0.58, 1.0],\n    'ease-in-out': [0.42, 0, 0.58, 1.0],\n    'ease-in-sine': [0.12, 0, 0.39, 0],\n    'ease-out-sine': [0.12, 0, 0.39, 0],\n    'ease-in-out-sine': [0.37, 0, 0.63, 1],\n    'ease-in-cubic': [0.32, 0, 0.67, 0],\n    'ease-out-cubic': [0.33, 1, 0.68, 1],\n    'ease-in-out-cubic': [0.65, 0, 0.35, 1],\n    'ease-in-circ': [0.55, 0, 1, 0.45],\n    'ease-out-circ': [0, 0.55, 0.45, 1],\n    'ease-in-out-circ': [0.85, 0, 0.15, 1],\n    'ease-in-back': [0.36, 0, 0.66, -0.56],\n    'ease-out-back': [0.34, 1.56, 0.64, 1],\n    'ease-in-out-back': [0.68, -0.6, 0.32, 1.6],\n};\nconst defaultTiming = (t) => t;\nconst parseCubicBezier = (str) => {\n    //cubic-bezier(0.84, 0.52, 0.56, 0.6)\n    const regex = /-?\\d*\\.?\\d+/g;\n    const match = str.match(regex);\n    if (match) {\n        const [num1, num2, num3, num4] = match;\n        const a = parseFloat(num1 || '0.42');\n        const b = parseFloat(num2 || '0');\n        const c = parseFloat(num3 || '1');\n        const d = parseFloat(num4 || '1');\n        const timing = getTimingBezier(a, b, c, d);\n        timingMapping[str] = timing;\n        return timing;\n    }\n    // parse failed, return linear\n    console.warn('Unknown cubic-bezier timing: ' + str);\n    return defaultTiming;\n};\nexport const getTimingFunction = (str) => {\n    if (str === '') {\n        return defaultTiming;\n    }\n    if (timingMapping[str] !== undefined) {\n        return timingMapping[str] || defaultTiming;\n    }\n    if (str === 'linear') {\n        return (time) => {\n            return time;\n        };\n    }\n    if (str === 'step-start') {\n        return () => {\n            return 1;\n        };\n    }\n    if (str === 'step-end') {\n        return (time) => {\n            return time === 1 ? 1 : 0;\n        };\n    }\n    if (timingLookup[str] !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS doesn't understand that we've checked for undefined\n        const [a, b, c, d] = timingLookup[str];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const timing = getTimingBezier(a, b, c, d);\n        timingMapping[str] = timing;\n        return timing;\n    }\n    if (str.startsWith('cubic-bezier')) {\n        return parseCubicBezier(str);\n    }\n    console.warn('Unknown timing function: ' + str);\n    return defaultTiming;\n};\nif (!Math.hypot)\n    Math.hypot = (...args) => {\n        let y = 0, i = args.length;\n        while (i--) {\n            y += args[i] * args[i];\n        }\n        return Math.sqrt(y);\n    };\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { isPowerOfTwo } from '../../utils.js';\nimport { CoreContextTexture } from '../CoreContextTexture.js';\nimport { isHTMLImageElement } from './internal/RendererUtils.js';\nconst TRANSPARENT_TEXTURE_DATA = new Uint8Array([0, 0, 0, 0]);\n/**\n * A wrapper around a WebGLTexture that handles loading the texture data\n * from a Texture source and uploading it to the GPU as well as freeing\n * the uploaded texture.\n *\n * @remarks\n * When accessing the ctxTexture property, the texture will be loaded if\n * it hasn't been already. ctxTexture will always return a valid WebGLTexture\n * and trigger the loading/uploading of the texture's data if it hasn't been\n * loaded yet.\n */\nexport class WebGlCoreCtxTexture extends CoreContextTexture {\n    glw;\n    _nativeCtxTexture = null;\n    _state = 'freed';\n    _w = 0;\n    _h = 0;\n    constructor(glw, memManager, textureSource) {\n        super(memManager, textureSource);\n        this.glw = glw;\n    }\n    get ctxTexture() {\n        if (this._state === 'freed') {\n            this.load();\n        }\n        assertTruthy(this._nativeCtxTexture);\n        return this._nativeCtxTexture;\n    }\n    get renderable() {\n        return this.textureSource.renderable;\n    }\n    get w() {\n        return this._w;\n    }\n    get h() {\n        return this._h;\n    }\n    /**\n     * Load the texture data from the Texture source and upload it to the GPU\n     *\n     * @remarks\n     * This method is called automatically when accessing the ctxTexture property\n     * if the texture hasn't been loaded yet. But it can also be called manually\n     * to force the texture to be pre-loaded prior to accessing the ctxTexture\n     * property.\n     */\n    load() {\n        // If the texture is already loading or loaded, don't load it again.\n        if (this._state === 'loading' || this._state === 'loaded') {\n            return;\n        }\n        this._state = 'loading';\n        this.textureSource.setState('loading');\n        this._nativeCtxTexture = this.createNativeCtxTexture();\n        this.onLoadRequest()\n            .then(({ width, height }) => {\n            // If the texture has been freed while loading, return early.\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'loaded';\n            this._w = width;\n            this._h = height;\n            // Update the texture source's width and height so that it can be used\n            // for rendering.\n            this.textureSource.setState('loaded', { width, height });\n        })\n            .catch((err) => {\n            // If the texture has been freed while loading, return early.\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'failed';\n            this.textureSource.setState('failed', err);\n            console.error(err);\n        });\n    }\n    /**\n     * Called when the texture data needs to be loaded and uploaded to a texture\n     */\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        // Set to a 1x1 transparent texture\n        glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        const textureData = await this.textureSource?.getTextureData();\n        // If the texture has been freed while loading, return early.\n        if (!this._nativeCtxTexture) {\n            assertTruthy(this._state === 'freed');\n            return { width: 0, height: 0 };\n        }\n        let width = 0;\n        let height = 0;\n        assertTruthy(this._nativeCtxTexture);\n        glw.activeTexture(0);\n        // If textureData is null, the texture is empty (0, 0) and we don't need to\n        // upload any data to the GPU.\n        if (textureData.data instanceof ImageBitmap ||\n            textureData.data instanceof ImageData ||\n            // not using typeof HTMLImageElement due to web worker\n            isHTMLImageElement(textureData.data)) {\n            const data = textureData.data;\n            width = data.width;\n            height = data.height;\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.pixelStorei(glw.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !!textureData.premultiplyAlpha);\n            glw.texImage2D(0, glw.RGBA, glw.RGBA, glw.UNSIGNED_BYTE, data);\n            memManager.setTextureMemUse(this, width * height * 4);\n            // generate mipmaps for power-of-2 textures or in WebGL2RenderingContext\n            if (glw.isWebGl2() || (isPowerOfTwo(width) && isPowerOfTwo(height))) {\n                glw.generateMipmap();\n            }\n        }\n        else if (textureData.data === null) {\n            width = 0;\n            height = 0;\n            // Reset to a 1x1 transparent texture\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, TRANSPARENT_TEXTURE_DATA);\n            memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        }\n        else if ('mipmaps' in textureData.data && textureData.data.mipmaps) {\n            const { mipmaps, width = 0, height = 0, type, glInternalFormat, } = textureData.data;\n            const view = type === 'ktx'\n                ? new DataView(mipmaps[0] ?? new ArrayBuffer(0))\n                : mipmaps[0];\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.compressedTexImage2D(0, glInternalFormat, width, height, 0, view);\n            glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n            glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n            memManager.setTextureMemUse(this, view.byteLength);\n        }\n        else {\n            console.error(`WebGlCoreCtxTexture.onLoadRequest: Unexpected textureData returned`, textureData);\n        }\n        return {\n            width,\n            height,\n        };\n    }\n    /**\n     * Free the WebGLTexture from the GPU\n     *\n     * @returns\n     */\n    free() {\n        if (this._state === 'freed') {\n            return;\n        }\n        this._state = 'freed';\n        this.textureSource.setState('freed');\n        this._w = 0;\n        this._h = 0;\n        if (!this._nativeCtxTexture) {\n            return;\n        }\n        const { glw, memManager } = this;\n        glw.deleteTexture(this._nativeCtxTexture);\n        memManager.setTextureMemUse(this, 0);\n        this._nativeCtxTexture = null;\n    }\n    /**\n     * Create native context texture\n     *\n     * @remarks\n     * When this method returns the returned texture will be bound to the GL context state.\n     *\n     * @param width\n     * @param height\n     * @returns\n     */\n    createNativeCtxTexture() {\n        const { glw } = this;\n        const nativeTexture = glw.createTexture();\n        if (!nativeTexture) {\n            throw new Error('Could not create WebGL Texture');\n        }\n        // On initial load request, create a 1x1 transparent texture to use until\n        // the texture data is finally loaded.\n        glw.activeTexture(0);\n        glw.bindTexture(nativeTexture);\n        // linear texture filtering\n        glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n        glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n        // texture wrapping method\n        glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n        glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n        return nativeTexture;\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture, } from './Texture.js';\n/**\n * A Texture that is a sub-region of another Texture.\n *\n * @remarks\n * The parent texture can be a Sprite Sheet/Texture Atlas and set using the\n * {@link SubTextureProps.texture} prop. The sub-region relative to the parent\n * texture is defined with the {@link SubTextureProps.x},\n * {@link SubTextureProps.y}, {@link SubTextureProps.width}, and\n * {@link SubTextureProps.height} pixel values.\n */\nexport class SubTexture extends Texture {\n    props;\n    parentTexture;\n    constructor(txManager, props) {\n        super(txManager);\n        this.parentTexture = this.txManager.loadTexture(props.texture.txType, props.texture.props, props.texture.options);\n        this.props = SubTexture.resolveDefaults(props || {});\n        // If parent texture is already loaded / failed, trigger loaded event manually\n        // so that users get a consistent event experience.\n        // We do this in a microtask to allow listeners to be attached in the same\n        // synchronous task after calling loadTexture()\n        queueMicrotask(() => {\n            const parentTx = this.parentTexture;\n            if (parentTx.state === 'loaded') {\n                this.onParentTxLoaded(parentTx, parentTx.dimensions);\n            }\n            else if (parentTx.state === 'failed') {\n                this.onParentTxFailed(parentTx, parentTx.error);\n            }\n            parentTx.on('loaded', this.onParentTxLoaded);\n            parentTx.on('failed', this.onParentTxFailed);\n        });\n    }\n    onParentTxLoaded = () => {\n        // We ignore the parent's passed dimensions, and simply use the SubTexture's\n        // configured dimensions (because that's all that matters here)\n        this.setState('loaded', {\n            width: this.props.width,\n            height: this.props.height,\n        });\n    };\n    onParentTxFailed = (target, error) => {\n        this.setState('failed', error);\n    };\n    async getTextureData() {\n        return {\n            data: this.props,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {\n            texture: props.texture,\n            x: props.x || 0,\n            y: props.y || 0,\n            width: props.width || 0,\n            height: props.height || 0,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=SubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxSubTexture extends WebGlCoreCtxTexture {\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n    }\n    async onLoadRequest() {\n        const props = await this.textureSource.getTextureData();\n        return {\n            width: props.data?.width || 0,\n            height: props.data?.height || 0,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxSubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a collection of WebGL Buffers along with their associated\n * vertex attribute formats.\n */\nexport class BufferCollection {\n    config;\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * Get the WebGLBuffer associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getBuffer(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])?.buffer;\n    }\n    /**\n     * Get the AttributeInfo associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getAttributeInfo(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])\n            ?.attributes[attributeName];\n    }\n}\n//# sourceMappingURL=BufferCollection.js.map","/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport { assertTruthy } from '../../utils.js';\nimport { isWebGl2 } from '../renderers/webgl/internal/WebGlUtils.js';\n/**\n * Optimized WebGL Context Wrapper\n *\n * @remarks\n * This class contains the subset of the WebGLRenderingContext & WebGL2RenderingContext\n * API that is used by the renderer. Select high volume WebGL methods include\n * caching optimizations to avoid making WebGL calls if the state is already set\n * to the desired value.\n *\n * While most methods contained are direct passthroughs to the WebGL context,\n * some methods combine multiple WebGL calls into one for convenience, modify\n * arguments to be more convenient, or are replaced by more specific methods.\n *\n * Not all methods are optimized. Only methods that are called frequently\n * and/or have a high cost are optimized.\n *\n * A subset of GLenum constants are also exposed as properties on this class\n * for convenience.\n */\nexport class WebGlContextWrapper {\n    gl;\n    //#region Cached WebGL State\n    activeTextureUnit = 0;\n    texture2dUnits;\n    texture2dParams = new WeakMap();\n    scissorEnabled;\n    scissorX;\n    scissorY;\n    scissorWidth;\n    scissorHeight;\n    blendEnabled;\n    blendSrcRgb;\n    blendDstRgb;\n    blendSrcAlpha;\n    blendDstAlpha;\n    boundArrayBuffer;\n    boundElementArrayBuffer;\n    curProgram;\n    programUniforms = new WeakMap();\n    //#endregion Cached WebGL State\n    //#region Canvas\n    canvas;\n    //#endregion Canvas\n    //#region WebGL Enums\n    MAX_RENDERBUFFER_SIZE;\n    MAX_TEXTURE_SIZE;\n    MAX_VIEWPORT_DIMS;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n    MAX_TEXTURE_IMAGE_UNITS;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n    MAX_VERTEX_ATTRIBS;\n    MAX_VARYING_VECTORS;\n    MAX_VERTEX_UNIFORM_VECTORS;\n    MAX_FRAGMENT_UNIFORM_VECTORS;\n    TEXTURE_MAG_FILTER;\n    TEXTURE_MIN_FILTER;\n    TEXTURE_WRAP_S;\n    TEXTURE_WRAP_T;\n    LINEAR;\n    CLAMP_TO_EDGE;\n    RGBA;\n    UNSIGNED_BYTE;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n    UNPACK_FLIP_Y_WEBGL;\n    FLOAT;\n    TRIANGLES;\n    UNSIGNED_SHORT;\n    ONE;\n    ONE_MINUS_SRC_ALPHA;\n    VERTEX_SHADER;\n    FRAGMENT_SHADER;\n    STATIC_DRAW;\n    COMPILE_STATUS;\n    LINK_STATUS;\n    DYNAMIC_DRAW;\n    COLOR_ATTACHMENT0;\n    //#endregion WebGL Enums\n    constructor(gl) {\n        this.gl = gl;\n        // The following code extracts the current state of the WebGL context\n        // to our local JavaScript cached version of it. This is so we can\n        // avoid making WebGL calls if we don't need to.\n        // We could assume that the WebGL context is in a default state, but\n        // in the future we may want to support restoring a broken WebGL context\n        // and this will help with that.\n        this.activeTextureUnit =\n            gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n        const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        // save current texture units\n        this.texture2dUnits = new Array(maxTextureUnits)\n            .fill(undefined)\n            .map((_, i) => {\n            this.activeTexture(i);\n            return gl.getParameter(gl.TEXTURE_BINDING_2D);\n        });\n        // restore active texture unit\n        this.activeTexture(this.activeTextureUnit);\n        this.scissorEnabled = gl.isEnabled(gl.SCISSOR_TEST);\n        const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\n        this.scissorX = scissorBox[0];\n        this.scissorY = scissorBox[1];\n        this.scissorWidth = scissorBox[2];\n        this.scissorHeight = scissorBox[3];\n        this.blendEnabled = gl.isEnabled(gl.BLEND);\n        this.blendSrcRgb = gl.getParameter(gl.BLEND_SRC_RGB);\n        this.blendDstRgb = gl.getParameter(gl.BLEND_DST_RGB);\n        this.blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n        this.blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n        this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        this.canvas = gl.canvas;\n        // Extract GLenums\n        this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;\n        this.MAX_TEXTURE_SIZE = gl.MAX_TEXTURE_SIZE;\n        this.MAX_VIEWPORT_DIMS = gl.MAX_VIEWPORT_DIMS;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.MAX_TEXTURE_IMAGE_UNITS = gl.MAX_TEXTURE_IMAGE_UNITS;\n        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n        this.MAX_VERTEX_ATTRIBS = gl.MAX_VERTEX_ATTRIBS;\n        this.MAX_VARYING_VECTORS = gl.MAX_VARYING_VECTORS;\n        this.MAX_VERTEX_UNIFORM_VECTORS = gl.MAX_VERTEX_UNIFORM_VECTORS;\n        this.MAX_FRAGMENT_UNIFORM_VECTORS = gl.MAX_FRAGMENT_UNIFORM_VECTORS;\n        this.TEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;\n        this.TEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;\n        this.TEXTURE_WRAP_S = gl.TEXTURE_WRAP_S;\n        this.TEXTURE_WRAP_T = gl.TEXTURE_WRAP_T;\n        this.LINEAR = gl.LINEAR;\n        this.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;\n        this.RGBA = gl.RGBA;\n        this.UNSIGNED_BYTE = gl.UNSIGNED_BYTE;\n        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n        this.UNPACK_FLIP_Y_WEBGL = gl.UNPACK_FLIP_Y_WEBGL;\n        this.FLOAT = gl.FLOAT;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.ONE = gl.ONE;\n        this.ONE_MINUS_SRC_ALPHA = gl.ONE_MINUS_SRC_ALPHA;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.VERTEX_SHADER = gl.VERTEX_SHADER;\n        this.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n        this.STATIC_DRAW = gl.STATIC_DRAW;\n        this.COMPILE_STATUS = gl.COMPILE_STATUS;\n        this.LINK_STATUS = gl.LINK_STATUS;\n        this.DYNAMIC_DRAW = gl.DYNAMIC_DRAW;\n        this.COLOR_ATTACHMENT0 = gl.COLOR_ATTACHMENT0;\n    }\n    /**\n     * Returns true if the WebGL context is WebGL2\n     *\n     * @returns\n     */\n    isWebGl2() {\n        return isWebGl2(this.gl);\n    }\n    /**\n     * ```\n     * gl.activeTexture(textureUnit + gl.TEXTURE0);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: `textureUnit` is based from 0, not `gl.TEXTURE0`.\n     *\n     * @param textureUnit\n     */\n    activeTexture(textureUnit) {\n        const { gl } = this;\n        if (this.activeTextureUnit !== textureUnit) {\n            gl.activeTexture(textureUnit + gl.TEXTURE0);\n            this.activeTextureUnit = textureUnit;\n        }\n    }\n    /**\n     * ```\n     * gl.bindTexture(gl.TEXTURE_2D, texture);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param texture\n     */\n    bindTexture(texture) {\n        const { gl, activeTextureUnit, texture2dUnits } = this;\n        if (texture2dUnits[activeTextureUnit] === texture) {\n            return;\n        }\n        texture2dUnits[activeTextureUnit] = texture;\n        gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    }\n    _getActiveTexture() {\n        const { activeTextureUnit, texture2dUnits } = this;\n        return texture2dUnits[activeTextureUnit];\n    }\n    /**\n     * ```\n     * gl.texParameteri(gl.TEXTURE_2D, pname, param);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param pname\n     * @param param\n     * @returns\n     */\n    texParameteri(pname, param) {\n        const { gl, texture2dParams } = this;\n        const activeTexture = this._getActiveTexture();\n        if (!activeTexture) {\n            throw new Error('No active texture');\n        }\n        let textureParams = texture2dParams.get(activeTexture);\n        if (!textureParams) {\n            textureParams = {};\n            texture2dParams.set(activeTexture, textureParams);\n        }\n        if (textureParams[pname] === param) {\n            return;\n        }\n        textureParams[pname] = param;\n        gl.texParameteri(gl.TEXTURE_2D, pname, param);\n    }\n    texImage2D(level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels) {\n        const { gl } = this;\n        if (format) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource);\n        }\n    }\n    /**\n     * ```\n     * gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, data);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    compressedTexImage2D(level, internalformat, width, height, border, data) {\n        const { gl } = this;\n        gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalformat, width, height, border, data);\n    }\n    /**\n     * ```\n     * gl.pixelStorei(pname, param);\n     * ```\n     *\n     * @param pname\n     * @param param\n     */\n    pixelStorei(pname, param) {\n        const { gl } = this;\n        gl.pixelStorei(pname, param);\n    }\n    /**\n     * ```\n     * gl.generateMipmap(gl.TEXTURE_2D);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    generateMipmap() {\n        const { gl } = this;\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    /**\n     * ```\n     * gl.createTexture();\n     * ```\n     *\n     * @returns\n     */\n    createTexture() {\n        const { gl } = this;\n        return gl.createTexture();\n    }\n    /**\n     * ```\n     * gl.deleteTexture(texture);\n     * ```\n     *\n     * @param texture\n     */\n    deleteTexture(texture) {\n        const { gl } = this;\n        if (texture) {\n            this.texture2dParams.delete(texture);\n        }\n        gl.deleteTexture(texture);\n    }\n    /**\n     * ```\n     * gl.viewport(x, y, width, height);\n     * ```\n     */\n    viewport(x, y, width, height) {\n        const { gl } = this;\n        gl.viewport(x, y, width, height);\n    }\n    /**\n     * ```\n     * gl.clearColor(red, green, blue, alpha);\n     * ```\n     *\n     * @param red\n     * @param green\n     * @param blue\n     * @param alpha\n     */\n    clearColor(red, green, blue, alpha) {\n        const { gl } = this;\n        gl.clearColor(red, green, blue, alpha);\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.SCISSOR_TEST);\n     * ```\n     * @param enable\n     */\n    setScissorTest(enable) {\n        const { gl, scissorEnabled } = this;\n        if (enable === scissorEnabled) {\n            return;\n        }\n        if (enable) {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n        else {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n        this.scissorEnabled = enable;\n    }\n    /**\n     * ```\n     * gl.scissor(x, y, width, height);\n     * ```\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    scissor(x, y, width, height) {\n        const { gl, scissorX, scissorY, scissorWidth, scissorHeight } = this;\n        if (x !== scissorX ||\n            y !== scissorY ||\n            width !== scissorWidth ||\n            height !== scissorHeight) {\n            gl.scissor(x, y, width, height);\n            this.scissorX = x;\n            this.scissorY = y;\n            this.scissorWidth = width;\n            this.scissorHeight = height;\n        }\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.BLEND);\n     * ```\n     *\n     * @param blend\n     * @returns\n     */\n    setBlend(blend) {\n        const { gl, blendEnabled } = this;\n        if (blend === blendEnabled) {\n            return;\n        }\n        if (blend) {\n            gl.enable(gl.BLEND);\n        }\n        else {\n            gl.disable(gl.BLEND);\n        }\n        this.blendEnabled = blend;\n    }\n    /**\n     * ```\n     * gl.blendFunc(src, dst);\n     * ```\n     *\n     * @param src\n     * @param dst\n     */\n    blendFunc(src, dst) {\n        const { gl, blendSrcRgb, blendDstRgb, blendSrcAlpha, blendDstAlpha } = this;\n        if (src !== blendSrcRgb ||\n            dst !== blendDstRgb ||\n            src !== blendSrcAlpha ||\n            dst !== blendDstAlpha) {\n            gl.blendFunc(src, dst);\n            this.blendSrcRgb = src;\n            this.blendDstRgb = dst;\n            this.blendSrcAlpha = src;\n            this.blendDstAlpha = dst;\n        }\n    }\n    /**\n     * ```\n     * gl.createBuffer();\n     * ```\n     *\n     * @returns\n     */\n    createBuffer() {\n        const { gl } = this;\n        return gl.createBuffer();\n    }\n    /**\n     * ```\n     * gl.createFramebuffer();\n     * ```\n     * @returns\n     */\n    createFramebuffer() {\n        const { gl } = this;\n        return gl.createFramebuffer();\n    }\n    /**\n     * ```\n     * gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n     * ```\n     *\n     * @param framebuffer\n     */\n    bindFramebuffer(framebuffer) {\n        const { gl } = this;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n    /**\n     * ```\n     * gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.FRAMEBUFFER` and textarget is always `gl.TEXTURE_2D`\n     */\n    framebufferTexture2D(attachment, texture, level) {\n        const { gl } = this;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, level);\n    }\n    /**\n     * ```\n     * gl.clear(gl.COLOR_BUFFER_BIT);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Clear mask is always `gl.COLOR_BUFFER_BIT`\n     */\n    clear() {\n        const { gl } = this;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    arrayBufferData(buffer, data, usage) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n     * ```\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    elementArrayBufferData(buffer, data, usage) {\n        const { gl, boundElementArrayBuffer } = this;\n        if (boundElementArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            this.boundElementArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.vertexAttribPointer` are combined into one function.\n     *\n     * @param buffer\n     * @param index\n     * @param size\n     * @param type\n     * @param normalized\n     * @param stride\n     * @param offset\n     */\n    vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n    /**\n     * ```\n     * gl.useProgram(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    useProgram(program) {\n        const { gl, curProgram } = this;\n        if (curProgram === program) {\n            return;\n        }\n        gl.useProgram(program);\n        this.curProgram = program;\n    }\n    setUniform(type, location, ...args) {\n        const { gl, programUniforms } = this;\n        let uniforms = programUniforms.get(this.curProgram);\n        if (!uniforms) {\n            uniforms = new Map();\n            programUniforms.set(this.curProgram, uniforms);\n        }\n        const uniformArgs = uniforms.get(location);\n        if (!uniformArgs || !compareArrays(uniformArgs, args)) {\n            uniforms.set(location, args);\n            gl[type](location, ...args);\n        }\n    }\n    /**\n     * ```\n     * gl.getParameter(pname);\n     * ```\n     *\n     * @param pname\n     * @returns\n     */\n    getParameter(pname) {\n        const { gl } = this;\n        return gl.getParameter(pname);\n    }\n    /**\n     * ```\n     * gl.drawElements(mode, count, type, offset);\n     * ```\n     *\n     * @param mode\n     * @param count\n     * @param type\n     * @param offset\n     */\n    drawElements(mode, count, type, offset) {\n        const { gl } = this;\n        gl.drawElements(mode, count, type, offset);\n    }\n    /**\n     * ```\n     * gl.drawArrays(mode, first, count);\n     * ```\n     *\n     * @param name\n     * @returns\n     */\n    getExtension(name) {\n        const { gl } = this;\n        return gl.getExtension(name);\n    }\n    /**\n     * ```\n     * gl.createVertexArray();\n     * ```\n     *\n     * @returns\n     */\n    createVertexArray() {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        return gl.createVertexArray();\n    }\n    /**\n     * ```\n     * gl.bindVertexArray(vertexArray);\n     * ```\n     *\n     * @param vertexArray\n     */\n    bindVertexArray(vertexArray) {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        gl.bindVertexArray(vertexArray);\n    }\n    /**\n     * ```\n     * gl.getAttribLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getAttribLocation(program, name) {\n        const { gl } = this;\n        return gl.getAttribLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.getUniformLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getUniformLocation(program, name) {\n        const { gl } = this;\n        return gl.getUniformLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.enableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    enableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.enableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.disableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    disableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.disableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.createShader(type);\n     * ```\n     *\n     * @param type\n     * @returns\n     */\n    createShader(type) {\n        const { gl } = this;\n        return gl.createShader(type);\n    }\n    /**\n     * ```\n     * gl.compileShader(shader);\n     * ```\n     *\n     * @param shader\n     * @returns\n     */\n    compileShader(shader) {\n        const { gl } = this;\n        gl.compileShader(shader);\n    }\n    /**\n     * ```\n     * gl.attachShader(program, shader);\n     * ```\n     *\n     * @param program\n     * @param shader\n     */\n    attachShader(program, shader) {\n        const { gl } = this;\n        gl.attachShader(program, shader);\n    }\n    /**\n     * ```\n     * gl.linkProgram(program);\n     * ```\n     *\n     * @param program\n     */\n    linkProgram(program) {\n        const { gl } = this;\n        gl.linkProgram(program);\n    }\n    /**\n     * ```\n     * gl.deleteProgram(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteProgram(shader) {\n        const { gl } = this;\n        gl.deleteProgram(shader);\n    }\n    /**\n     * ```\n     * gl.getShaderParameter(shader, pname);\n     * ```\n     *\n     * @param shader\n     * @param pname\n     */\n    getShaderParameter(shader, pname) {\n        const { gl } = this;\n        return gl.getShaderParameter(shader, pname);\n    }\n    /**\n     * ```\n     * gl.getShaderInfoLog(shader);\n     * ```\n     *\n     * @param shader\n     */\n    getShaderInfoLog(shader) {\n        const { gl } = this;\n        return gl.getShaderInfoLog(shader);\n    }\n    /**\n     * ```\n     * gl.createProgram();\n     * ```\n     *\n     * @returns\n     */\n    createProgram() {\n        const { gl } = this;\n        return gl.createProgram();\n    }\n    /**\n     * ```\n     * gl.getProgramParameter(program, pname);\n     * ```\n     *\n     * @param program\n     * @param pname\n     * @returns\n     */\n    getProgramParameter(program, pname) {\n        const { gl } = this;\n        return gl.getProgramParameter(program, pname);\n    }\n    /**\n     * ```\n     * gl.getProgramInfoLog(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    getProgramInfoLog(program) {\n        const { gl } = this;\n        return gl.getProgramInfoLog(program);\n    }\n    /**\n     * ```\n     * gl.shaderSource(shader, source);\n     * ```\n     *\n     * @param shader\n     * @param source\n     */\n    shaderSource(shader, source) {\n        const { gl } = this;\n        gl.shaderSource(shader, source);\n    }\n    /**\n     * ```\n     * gl.deleteShader(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteShader(shader) {\n        const { gl } = this;\n        gl.deleteShader(shader);\n    }\n}\n/**\n * Compare two arrays for equality.\n *\n * @remarks\n * This function will not try to compare nested arrays or Float32Arrays and\n * instead will always return false when they are encountered.\n *\n * @param a\n * @param b\n * @returns\n */\nexport function compareArrays(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((v, i) => {\n        // Don't bother to compare nested arrays or Float32Arrays\n        if (Array.isArray(v) || v instanceof Float32Array) {\n            return false;\n        }\n        else {\n            return v === b[i];\n        }\n    });\n}\n//# sourceMappingURL=WebGlContextWrapper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generic WebGL Utility Functions\n *\n * @remarks\n * Nothing here should be coupled to Renderer logic / types.\n *\n * @param gl\n * @returns\n */\nexport function isWebGl2(gl) {\n    return (self.WebGL2RenderingContext && gl instanceof self.WebGL2RenderingContext);\n}\n//# sourceMappingURL=WebGlUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\nexport class RenderTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = RenderTexture.resolveDefaults(props || {});\n    }\n    get width() {\n        return this.props.width;\n    }\n    set width(value) {\n        this.props.width = value;\n    }\n    get height() {\n        return this.props.height;\n    }\n    set height(value) {\n        this.props.height = value;\n    }\n    async getTextureData() {\n        return {\n            data: null,\n            premultiplyAlpha: null,\n        };\n    }\n    static resolveDefaults(props) {\n        return {\n            width: props.width || 256,\n            height: props.height || 256,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=RenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxRenderTexture extends WebGlCoreCtxTexture {\n    framebuffer;\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n        // Create Framebuffer object\n        const framebuffer = glw.createFramebuffer();\n        assertTruthy(framebuffer, 'Unable to create framebuffer');\n        this.framebuffer = framebuffer;\n    }\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        const nativeTexture = (this._nativeCtxTexture =\n            this.createNativeCtxTexture());\n        const { width, height } = this.textureSource;\n        // Set the dimensions of the render texture\n        glw.texImage2D(0, glw.RGBA, width, height, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        // Update the texture memory manager\n        memManager.setTextureMemUse(this, width * height * 4);\n        // Bind the framebuffer\n        glw.bindFramebuffer(this.framebuffer);\n        // Attach the texture to the framebuffer\n        glw.framebufferTexture2D(glw.COLOR_ATTACHMENT0, nativeTexture, 0);\n        // Unbind the framebuffer\n        glw.bindFramebuffer(null);\n        return {\n            width,\n            height,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxRenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, createWebGLContext, hasOwn } from '../../../utils.js';\nimport { CoreRenderer, } from '../CoreRenderer.js';\nimport { WebGlCoreRenderOp } from './WebGlCoreRenderOp.js';\nimport { createIndexBuffer, getWebGlParameters, getWebGlExtensions, } from './internal/RendererUtils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nimport { Texture } from '../../textures/Texture.js';\nimport { ColorTexture } from '../../textures/ColorTexture.js';\nimport { SubTexture } from '../../textures/SubTexture.js';\nimport { WebGlCoreCtxSubTexture } from './WebGlCoreCtxSubTexture.js';\nimport { CoreShaderManager } from '../../CoreShaderManager.js';\nimport { BufferCollection } from './internal/BufferCollection.js';\nimport { compareRect, getNormalizedRgbaComponents, } from '../../lib/utils.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nimport { WebGlContextWrapper } from '../../lib/WebGlContextWrapper.js';\nimport { RenderTexture } from '../../textures/RenderTexture.js';\nimport { WebGlCoreCtxRenderTexture } from './WebGlCoreCtxRenderTexture.js';\nconst WORDS_PER_QUAD = 24;\nexport class WebGlCoreRenderer extends CoreRenderer {\n    //// WebGL Native Context and Data\n    glw;\n    system;\n    //// Persistent data\n    quadBuffer = new ArrayBuffer(1024 * 1024 * 4);\n    fQuadBuffer = new Float32Array(this.quadBuffer);\n    uiQuadBuffer = new Uint32Array(this.quadBuffer);\n    renderOps = [];\n    //// Render Op / Buffer Filling State\n    curBufferIdx = 0;\n    curRenderOp = null;\n    rttNodes = [];\n    activeRttNode = null;\n    //// Default Shader\n    defaultShader;\n    quadBufferCollection;\n    /**\n     * White pixel texture used by default when no texture is specified.\n     */\n    defaultTexture;\n    /**\n     * Whether the renderer is currently rendering to a texture.\n     */\n    renderToTextureActive = false;\n    constructor(options) {\n        super(options);\n        this.mode = 'webgl';\n        const { canvas, clearColor, bufferMemory } = options;\n        this.defaultTexture = new ColorTexture(this.txManager);\n        // Mark the default texture as ALWAYS renderable\n        // This prevents it from ever being garbage collected.\n        // Fixes https://github.com/lightning-js/renderer/issues/262\n        this.defaultTexture.setRenderableOwner(this, true);\n        // When the default texture is loaded, request a render in case the\n        // RAF is paused. Fixes: https://github.com/lightning-js/renderer/issues/123\n        this.defaultTexture.once('loaded', () => {\n            this.stage.requestRender();\n        });\n        const gl = createWebGLContext(canvas, options.contextSpy);\n        const glw = (this.glw = new WebGlContextWrapper(gl));\n        const color = getNormalizedRgbaComponents(clearColor);\n        glw.viewport(0, 0, canvas.width, canvas.height);\n        glw.clearColor(color[0], color[1], color[2], color[3]);\n        glw.setBlend(true);\n        glw.blendFunc(glw.ONE, glw.ONE_MINUS_SRC_ALPHA);\n        createIndexBuffer(glw, bufferMemory);\n        this.system = {\n            parameters: getWebGlParameters(this.glw),\n            extensions: getWebGlExtensions(this.glw),\n        };\n        this.shManager.renderer = this;\n        this.defaultShader = this.shManager.loadShader('DefaultShader').shader;\n        const quadBuffer = glw.createBuffer();\n        assertTruthy(quadBuffer);\n        const stride = 6 * Float32Array.BYTES_PER_ELEMENT;\n        this.quadBufferCollection = new BufferCollection([\n            {\n                buffer: quadBuffer,\n                attributes: {\n                    a_position: {\n                        name: 'a_position',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 0, // start at the beginning of the buffer\n                    },\n                    a_textureCoordinate: {\n                        name: 'a_textureCoordinate',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 2 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_color: {\n                        name: 'a_color',\n                        size: 4,\n                        type: glw.UNSIGNED_BYTE,\n                        normalized: true,\n                        stride,\n                        offset: 4 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_textureIndex: {\n                        name: 'a_textureIndex',\n                        size: 1,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 5 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                },\n            },\n        ]);\n    }\n    reset() {\n        const { glw } = this;\n        this.curBufferIdx = 0;\n        this.curRenderOp = null;\n        this.renderOps.length = 0;\n        glw.setScissorTest(false);\n        glw.clear();\n    }\n    getShaderManager() {\n        return this.shManager;\n    }\n    createCtxTexture(textureSource) {\n        if (textureSource instanceof SubTexture) {\n            return new WebGlCoreCtxSubTexture(this.glw, this.txMemManager, textureSource);\n        }\n        else if (textureSource instanceof RenderTexture) {\n            return new WebGlCoreCtxRenderTexture(this.glw, this.txMemManager, textureSource);\n        }\n        return new WebGlCoreCtxTexture(this.glw, this.txMemManager, textureSource);\n    }\n    /**\n     * This function adds a quad (a rectangle composed of two triangles) to the WebGL rendering pipeline.\n     *\n     * It takes a set of options that define the quad's properties, such as its dimensions, colors, texture, shader, and transformation matrix.\n     * The function first updates the shader properties with the current dimensions if necessary, then sets the default texture if none is provided.\n     * It then checks if a new render operation is needed, based on the current shader and clipping rectangle.\n     * If a new render operation is needed, it creates one and updates the current render operation.\n     * The function then adjusts the texture coordinates based on the texture options and adds the texture to the texture manager.\n     *\n     * Finally, it calculates the vertices for the quad, taking into account any transformations, and adds them to the quad buffer.\n     * The function updates the length and number of quads in the current render operation, and updates the current buffer index.\n     */\n    addQuad(params) {\n        const { fQuadBuffer, uiQuadBuffer } = this;\n        const { width, height, colorTl, colorTr, colorBl, colorBr, textureOptions, shader, shaderProps, alpha, clippingRect, tx, ty, ta, tb, tc, td, rtt: renderToTexture, parentHasRenderTexture, framebufferDimensions, } = params;\n        let { texture } = params;\n        /**\n         * If the shader props contain any automatic properties, update it with the\n         * current dimensions that will be used to render the quad.\n         */\n        if (shaderProps && hasOwn(shaderProps, '$dimensions')) {\n            const dimensions = shaderProps.$dimensions;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            dimensions.width = width;\n            dimensions.height = height;\n        }\n        texture = texture ?? this.defaultTexture;\n        assertTruthy(texture instanceof Texture, 'Invalid texture type');\n        let { curBufferIdx: bufferIdx, curRenderOp } = this;\n        const targetDims = {\n            width,\n            height,\n        };\n        const targetShader = shader || this.defaultShader;\n        assertTruthy(targetShader instanceof WebGlCoreShader);\n        if (!this.reuseRenderOp(params)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.newRenderOp(targetShader, shaderProps, alpha, targetDims, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions);\n            curRenderOp = this.curRenderOp;\n            assertTruthy(curRenderOp);\n        }\n        const flipX = textureOptions?.flipX ?? false;\n        const flipY = textureOptions?.flipY ?? false;\n        let texCoordX1 = 0;\n        let texCoordY1 = 0;\n        let texCoordX2 = 1;\n        let texCoordY2 = 1;\n        if (texture instanceof SubTexture) {\n            const { x: tx, y: ty, width: tw, height: th } = texture.props;\n            const { width: parentW = 0, height: parentH = 0 } = texture.parentTexture\n                .dimensions || { width: 0, height: 0 };\n            texCoordX1 = tx / parentW;\n            texCoordX2 = texCoordX1 + tw / parentW;\n            texCoordY1 = ty / parentH;\n            texCoordY2 = texCoordY1 + th / parentH;\n            texture = texture.parentTexture;\n        }\n        // Flip texture coordinates if dictated by texture options\n        if (flipX) {\n            [texCoordX1, texCoordX2] = [texCoordX2, texCoordX1];\n        }\n        if (flipY) {\n            [texCoordY1, texCoordY2] = [texCoordY2, texCoordY1];\n        }\n        const { txManager } = this.stage;\n        const ctxTexture = txManager.getCtxTexture(texture);\n        assertTruthy(ctxTexture instanceof WebGlCoreCtxTexture);\n        const textureIdx = this.addTexture(ctxTexture, bufferIdx);\n        curRenderOp = this.curRenderOp;\n        assertTruthy(curRenderOp);\n        // render quad advanced\n        if (tb !== 0 || tc !== 0) {\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta;\n            fQuadBuffer[bufferIdx++] = ty + width * tc;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + width * tc + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        else {\n            // Calculate the right corner of the quad\n            // multiplied by the scale\n            const rightCornerX = tx + width * ta;\n            const rightCornerY = ty + height * td;\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = ty;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        // Update the length of the current render op\n        curRenderOp.length += WORDS_PER_QUAD;\n        curRenderOp.numQuads++;\n        this.curBufferIdx = bufferIdx;\n    }\n    /**\n     * Replace the existing RenderOp with a new one that uses the specified Shader\n     * and starts at the specified buffer index.\n     *\n     * @param shader\n     * @param bufferIdx\n     */\n    newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        const curRenderOp = new WebGlCoreRenderOp(this.glw, this.options, this.quadBufferCollection, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, 0, // Z-Index is only used for explictly added Render Ops\n        renderToTexture, parentHasRenderTexture, framebufferDimensions);\n        this.curRenderOp = curRenderOp;\n        this.renderOps.push(curRenderOp);\n    }\n    /**\n     * Add a texture to the current RenderOp. If the texture cannot be added to the\n     * current RenderOp, a new RenderOp will be created and the texture will be added\n     * to that one.\n     *\n     * If the texture cannot be added to the new RenderOp, an error will be thrown.\n     *\n     * @param texture\n     * @param bufferIdx\n     * @param recursive\n     * @returns Assigned Texture Index of the texture in the render op\n     */\n    addTexture(texture, bufferIdx, recursive) {\n        const { curRenderOp } = this;\n        assertTruthy(curRenderOp);\n        const textureIdx = curRenderOp.addTexture(texture);\n        // TODO: Refactor to be more DRY\n        if (textureIdx === 0xffffffff) {\n            if (recursive) {\n                throw new Error('Unable to add texture to render op');\n            }\n            const { shader, shaderProps, dimensions, clippingRect, alpha } = curRenderOp;\n            this.newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx);\n            return this.addTexture(texture, bufferIdx, true);\n        }\n        return textureIdx;\n    }\n    /**\n     * Test if the current Render operation can be reused for the specified parameters.\n     * @param params\n     * @returns\n     */\n    reuseRenderOp(params) {\n        const { shader, shaderProps, parentHasRenderTexture, rtt, clippingRect } = params;\n        const targetShader = shader || this.defaultShader;\n        // Switching shader program will require a new render operation\n        if (this.curRenderOp?.shader !== targetShader) {\n            return false;\n        }\n        // Switching clipping rect will require a new render operation\n        if (!compareRect(this.curRenderOp.clippingRect, clippingRect)) {\n            return false;\n        }\n        // Force new render operation if rendering to texture\n        // @todo: This needs to be improved, render operations could also be reused\n        // for rendering to texture\n        if (parentHasRenderTexture || rtt) {\n            return false;\n        }\n        // Check if the shader can batch the shader properties\n        if (this.curRenderOp.shader !== this.defaultShader &&\n            (!shaderProps ||\n                !this.curRenderOp.shader.canBatchShaderProps(this.curRenderOp.shaderProps, shaderProps))) {\n            return false;\n        }\n        // Render operation can be reused\n        return true;\n    }\n    /**\n     * add RenderOp to the render pipeline\n     */\n    addRenderOp(renderable) {\n        this.renderOps.push(renderable);\n        this.curRenderOp = null;\n    }\n    /**\n     * Render the current set of RenderOps to render to the specified surface.\n     *\n     * TODO: 'screen' is the only supported surface at the moment.\n     *\n     * @param surface\n     */\n    render(surface = 'screen') {\n        const { glw, quadBuffer } = this;\n        const arr = new Float32Array(quadBuffer, 0, this.curBufferIdx);\n        const buffer = this.quadBufferCollection.getBuffer('a_position') ?? null;\n        glw.arrayBufferData(buffer, arr, glw.STATIC_DRAW);\n        const doLog = false; // idx++ % 100 === 0;\n        if (doLog) {\n            console.log('renderOps', this.renderOps.length);\n        }\n        this.renderOps.forEach((renderOp, i) => {\n            if (doLog) {\n                console.log('Quads per operation', renderOp.numQuads);\n            }\n            renderOp.draw();\n        });\n    }\n    renderToTexture(node) {\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            if (this.rttNodes[i] === node) {\n                return;\n            }\n        }\n        // @todo: Better bottom up rendering order\n        this.rttNodes.unshift(node);\n    }\n    renderRTTNodes() {\n        const { glw } = this;\n        const { txManager } = this.stage;\n        // Render all associated RTT nodes to their textures\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            const node = this.rttNodes[i];\n            // Skip nodes that don't have RTT updates\n            if (!node || !node.hasRTTupdates) {\n                continue;\n            }\n            // Set the active RTT node to the current node\n            // So we can prevent rendering children of nested RTT nodes\n            this.activeRttNode = node;\n            assertTruthy(node.texture, 'RTT node missing texture');\n            const ctxTexture = txManager.getCtxTexture(node.texture);\n            assertTruthy(ctxTexture instanceof WebGlCoreCtxRenderTexture);\n            this.renderToTextureActive = true;\n            // Bind the the texture's framebuffer\n            glw.bindFramebuffer(ctxTexture.framebuffer);\n            glw.viewport(0, 0, ctxTexture.w, ctxTexture.h);\n            glw.clear();\n            // Render all associated quads to the texture\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (!child) {\n                    continue;\n                }\n                child.update(this.stage.deltaTime, {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    valid: false,\n                });\n                this.stage.addQuads(child);\n                child.hasRTTupdates = false;\n            }\n            // Render all associated quads to the texture\n            this.render();\n            // Reset render operations\n            this.renderOps.length = 0;\n            node.hasRTTupdates = false;\n        }\n        // Bind the default framebuffer\n        glw.bindFramebuffer(null);\n        glw.viewport(0, 0, this.glw.canvas.width, this.glw.canvas.height);\n        this.renderToTextureActive = false;\n    }\n    removeRTTNode(node) {\n        const index = this.rttNodes.indexOf(node);\n        if (index === -1) {\n            return;\n        }\n        this.rttNodes.splice(index, 1);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const SpecialCodepoints = {\n    LINE_FEED: 0x0a,\n    CARRIAGE_RETURN: 0x0d,\n    SPACE: 0x20,\n    TAB: 0x09,\n    ZERO_WIDTH_SPACE: 0x200b,\n    ZERO_WIDTH_NON_JOINER: 0x200c,\n    ZERO_WIDTH_JOINER: 0x200d,\n    LEFT_TO_RIGHT_MARK: 0x200e,\n    RIGHT_TO_LEFT_MARK: 0x200f,\n    LEFT_TO_RIGHT_EMBEDDING: 0x202a,\n    RIGHT_TO_LEFT_EMBEDDING: 0x202b,\n    POP_DIRECTIONAL_FORMATTING: 0x202c,\n    LEFT_TO_RIGHT_OVERRIDE: 0x202d,\n    RIGHT_TO_LEFT_OVERRIDE: 0x202e,\n    LINE_SEPARATOR: 0x2028,\n    PARAGRAPH_SEPARATOR: 0x2029,\n    OBJECT_REPLACEMENT_CHARACTER: 0xfffc,\n    REPLACEMENT_CHARACTER: 0xfffd,\n    ZERO_WIDTH_NO_BREAK_SPACE: 0xfeff,\n    LEFT_TO_RIGHT_ISOLATE: 0x2066,\n    RIGHT_TO_LEFT_ISOLATE: 0x2067,\n    FIRST_STRONG_ISOLATE: 0x2068,\n    POP_DIRECTIONAL_ISOLATE: 0x2069,\n    INHIBIT_SYMMETRIC_SWAPPING: 0x206a,\n    ACTIVATE_SYMMETRIC_SWAPPING: 0x206b,\n    INHIBIT_ARABIC_FORM_SHAPING: 0x206c,\n    ACTIVATE_ARABIC_FORM_SHAPING: 0x206d,\n    NATIONAL_DIGIT_SHAPES: 0x206e,\n    NOMINAL_DIGIT_SHAPES: 0x206f,\n    LEFT_TO_RIGHT_BOUNDARY: 0x200e,\n    RIGHT_TO_LEFT_BOUNDARY: 0x200f,\n};\n//# sourceMappingURL=SpecialCodepoints.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class FontShaper {\n}\n//# sourceMappingURL=FontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SpecialCodepoints } from '../../../renderers/SdfTextRenderer/internal/SpecialCodepoints.js';\nimport { FontShaper, } from './FontShaper.js';\nexport class SdfFontShaper extends FontShaper {\n    data;\n    glyphMap;\n    kernings;\n    constructor(data, glyphMap) {\n        super();\n        this.data = data;\n        this.glyphMap = glyphMap;\n        const kernings = (this.kernings = {});\n        data.kernings.forEach((kerning) => {\n            const second = kerning.second;\n            const firsts = (kernings[second] = kernings[second] || {});\n            firsts[kerning.first] = kerning.amount;\n        });\n        this.kernings = kernings;\n    }\n    *shapeText(props, codepoints) {\n        let codepointResult;\n        let lastGlyphId = undefined;\n        while ((codepointResult = codepoints.peek()) && !codepointResult.done) {\n            const codepoint = codepointResult.value;\n            const glyph = this.glyphMap.get(codepoint);\n            codepoints.next();\n            if (glyph !== undefined) {\n                // We found a glyph for this codepoint\n                // Yield the mapped glyph info\n                /**\n                 * Kerning includes any possible additional letter spacing\n                 */\n                const kerning = lastGlyphId !== undefined\n                    ? (this.kernings[glyph.id]?.[lastGlyphId] || 0) +\n                        props.letterSpacing\n                    : 0;\n                lastGlyphId = glyph.id;\n                yield {\n                    mapped: true,\n                    glyphId: glyph.id,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                    xAdvance: glyph.xadvance + kerning,\n                    yAdvance: 0,\n                    xOffset: glyph.xoffset + kerning,\n                    yOffset: glyph.yoffset,\n                    xBearing: 0,\n                    yBearing: 0,\n                    width: glyph.width,\n                    height: glyph.height,\n                };\n            }\n            else {\n                // We didn't find a glyph for this codepoint\n                // Yield the unmapped codepoint info\n                // If this codepoint is a linebreak, we should reset the last glyph id\n                // so that the next glyph will not be kerned with the last glyph of the\n                // previous line.\n                if (codepoint === SpecialCodepoints.LINE_FEED) {\n                    lastGlyphId = undefined;\n                }\n                yield {\n                    mapped: false,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                };\n            }\n        }\n    }\n}\n//# sourceMappingURL=SdfFontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// import type { Renderer } from '../../../Renderer';\nimport { assertTruthy } from '../../../../utils.js';\nimport { WebGlCoreRenderer } from '../../../renderers/webgl/WebGlCoreRenderer.js';\nimport { ImageTexture } from '../../../textures/ImageTexture.js';\nimport { TrFontFace, } from '../TrFontFace.js';\nimport { SdfFontShaper } from './internal/SdfFontShaper.js';\nexport class SdfTrFontFace extends TrFontFace {\n    type;\n    texture;\n    /**\n     * Height of the tallest character in the font including the whitespace above it\n     * in SDF/vertex units.\n     */\n    maxCharHeight = 0;\n    data;\n    shaper;\n    glyphMap = new Map();\n    constructor(type, options) {\n        super(options);\n        const { atlasUrl, atlasDataUrl, stage } = options;\n        this.type = type;\n        const renderer = stage.renderer;\n        assertTruthy(renderer instanceof WebGlCoreRenderer, 'SDF Font Faces can only be used with the WebGL Renderer');\n        this.texture = stage.txManager.loadTexture('ImageTexture', {\n            src: atlasUrl,\n            // IMPORTANT: The SDF shader requires the alpha channel to NOT be\n            // premultiplied on the atlas texture. If it is premultiplied, the\n            // rendering of SDF glyphs (especially single-channel SDF fonts) will\n            // be very jagged.\n            premultiplyAlpha: false,\n        }, {\n            preload: true,\n        });\n        this.texture.on('loaded', () => {\n            this.checkLoaded();\n        });\n        // Set this.data to the fetched data from dataUrl\n        fetch(atlasDataUrl)\n            .then(async (response) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.data = await response.json();\n            assertTruthy(this.data);\n            // Add all the glyphs to the glyph map\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let maxCharHeight = 0;\n            this.data.chars.forEach((glyph) => {\n                this.glyphMap.set(glyph.id, glyph);\n                const charHeight = glyph.yoffset + glyph.height;\n                if (charHeight > maxCharHeight) {\n                    maxCharHeight = charHeight;\n                }\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.maxCharHeight = maxCharHeight;\n            // We know `data` is defined here, because we just set it\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.shaper = new SdfFontShaper(this.data, this.glyphMap);\n            // If the metrics aren't provided explicitly in the font face options,\n            // Gather them from the metrics added by the msdf-generator tool ()\n            // If they are missing then we throw an error.\n            if (!this.metrics) {\n                if (this.data?.lightningMetrics) {\n                    const { ascender, descender, lineGap, unitsPerEm } = this.data.lightningMetrics;\n                    this.metrics = {\n                        ascender: ascender / unitsPerEm,\n                        descender: descender / unitsPerEm,\n                        lineGap: lineGap / unitsPerEm,\n                    };\n                }\n                else {\n                    throw new Error(`Font metrics not found in ${this.type} font ${this.fontFamily}. ` +\n                        'Make sure you are using the latest version of the Lightning ' +\n                        '3 `msdf-generator` tool to generate your SDF fonts.');\n                }\n            }\n            this.checkLoaded();\n        })\n            .catch(console.error);\n    }\n    getAtlasEntry(glyphId) {\n        const glyph = this.glyphMap.get(glyphId);\n        if (glyph === undefined) {\n            throw new Error(`Glyph ${glyphId} not found in font ${this.fontFamily}`);\n        }\n        return {\n            x: glyph.x,\n            y: glyph.y,\n            width: glyph.width,\n            height: glyph.height,\n        };\n    }\n    checkLoaded() {\n        if (this.loaded)\n            return;\n        if (this.texture.state === 'loaded' && this.data) {\n            this.loaded = true;\n            this.emit('loaded');\n        }\n    }\n}\n//# sourceMappingURL=SdfTrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class for Core extensions.\n *\n * @remarks\n * Core extensions are used to extend the Core Renderer with custom code such as\n * custom fonts, custom shaders, custom textures, custom animation functions,\n * and more.\n */\nexport class CoreExtension {\n}\n//# sourceMappingURL=CoreExtension.js.map"],"names":["assertTruthy","condition","message","mode","premultiplyRGB","a","b","out","intersection","createBound","Math","max","x1","y1","min","x2","y2","x","y","width","height","rgba","color","r","floor","g","toFixed","bound","alpha","flipEndianess","newAlpha","rgbAlpha","trunc","rgba1","rgba2","p","r1","g1","b1","a1","r2","g2","b2","a2","round","bound1","bound2","hasOwn","obj","prop","Object","prototype","hasOwnProperty","call","isProductionEnvironment","BASE_URL","MODE","DEV","PROD","SSR","LEGACY","EventEmitter","constructor","_defineProperty","this","on","event","listener","listeners","eventListeners","push","off","index","indexOf","splice","once","onceListener","target","data","emit","forEach","removeAllListeners","exports","CoreShader","makeCacheKey","props","resolveDefaults","createShader","glw","type","source","shader","Error","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","WebGlCoreShader","options","super","renderer","supportsIndexedTextures","webGl2","isWebGl2","requiredExtensions","webgl2Extensions","webgl1Extensions","glVersion","extensionName","getExtension","name","shaderSources","fragment","vertex","textureUnits","system","parameters","MAX_VERTEX_TEXTURE_IMAGE_UNITS","vertexSource","Function","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","vao","createVertexArray","bindVertexArray","attributeLocations","attributeBuffers","attributeNames","attributes","attributeName","location","getAttribLocation","buffer","createBuffer","uniformLocations","uniformTypes","uniforms","uniform","getUniformLocation","warn","bindBufferAttribute","attribute","enableVertexAttribArray","vertexAttribPointer","size","normalized","stride","offset","disableAttribute","disableVertexAttribArray","disableAttributes","loc","boundBufferCollection","canBatchShaderProps","propsA","propsB","bindRenderOp","renderOp","bindBufferCollection","buffers","textures","length","bindTextures","parentHasRenderTexture","renderToTexture","_ref","framebufferDimensions","setUniform","Float32Array","pixelRatio","canvas","dimensions","$dimensions","$alpha","bindProps","value","resolvedBuffer","getBuffer","resolvedInfo","getAttributeInfo","attach","useProgram","detach","Texture","txManager","Set","setRenderableOwner","owner","renderable","renderableOwners","add","delete","setState","state","args","loadedArgs","failedArgs","error","getNormalizedRgbaComponents","TrFontFace","fontFamily","descriptors","metrics","ascender","unitsPerEm","descender","lineGap","_objectSpread","style","weight","stretch","convertToCssFontFaceDescriptors","unicodeRange","variant","featureSettings","display","ColorTexture","getTextureData","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pixelData32","pixelData8","wrap","_context","prev","next","Uint32Array","Uint8ClampedArray","abrupt","ImageData","premultiplyAlpha","stop","CoreContextTexture","memManager","textureSource","CoreRenderer","stage","txMemManager","shManager","CoreRenderOp","WebGlCoreRenderOp","shaderProps","clippingRect","bufferIdx","zIndex","maxTextures","getParameter","addTexture","texture","existingIdx","findIndex","t","newIdx","draw","useShader","quadIdx","valid","_this$clippingRect","canvasHeight","clipX","clipWidth","clipHeight","clipY","setScissorTest","scissor","drawElements","TRIANGLES","numQuads","UNSIGNED_SHORT","getWebGlParameters","params","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","MAX_TEXTURE_IMAGE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_ATTRIBS","MAX_VARYING_VECTORS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","keys","key","getWebGlExtensions","extensions","ANGLE_instanced_arrays","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_pvrtc","WEBKIT_WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc_srgb","OES_vertex_array_object","isPowerOfTwo","getTimingBezier","c","d","xc","xb","xa","yc","yb","ya","time","cbxd","dx","it","minT","maxT","timingMapping","timingLookup","ease","defaultTiming","str","undefined","_timingLookup$str","_slicedToArray","timing","startsWith","match","_match","num1","num2","num3","num4","parseFloat","parseCubicBezier","hypot","i","sqrt","TRANSPARENT_TEXTURE_DATA","Uint8Array","WebGlCoreCtxTexture","ctxTexture","_state","load","_nativeCtxTexture","w","_w","h","_h","createNativeCtxTexture","onLoadRequest","then","catch","err","_this2","_callee2","_this2$textureSource","textureData","_mipmaps$","_textureData$data","mipmaps","_textureData$data$wid","_width","_textureData$data$hei","_height","glInternalFormat","view","_callee2$","_context2","texImage2D","RGBA","UNSIGNED_BYTE","setTextureMemUse","byteLength","sent","activeTexture","ImageBitmap","bindTexture","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","generateMipmap","DataView","ArrayBuffer","compressedTexImage2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","free","deleteTexture","nativeTexture","createTexture","SubTexture","parentTexture","loadTexture","txType","queueMicrotask","parentTx","onParentTxLoaded","onParentTxFailed","_this3","_callee3","_context3","WebGlCoreCtxSubTexture","_this4","_callee4","_props$data","_props$data2","_context4","BufferCollection","config","_this$config$find","find","item","_this$config$find2","WebGlContextWrapper","gl","WeakMap","activeTextureUnit","ACTIVE_TEXTURE","TEXTURE0","maxTextureUnits","texture2dUnits","Array","fill","map","_","TEXTURE_BINDING_2D","scissorEnabled","isEnabled","SCISSOR_TEST","scissorBox","SCISSOR_BOX","scissorX","scissorY","scissorWidth","scissorHeight","blendEnabled","BLEND","blendSrcRgb","BLEND_SRC_RGB","blendDstRgb","BLEND_DST_RGB","blendSrcAlpha","BLEND_SRC_ALPHA","blendDstAlpha","BLEND_DST_ALPHA","boundArrayBuffer","ARRAY_BUFFER_BINDING","boundElementArrayBuffer","ELEMENT_ARRAY_BUFFER_BINDING","curProgram","CURRENT_PROGRAM","UNPACK_FLIP_Y_WEBGL","FLOAT","ONE","ONE_MINUS_SRC_ALPHA","STATIC_DRAW","DYNAMIC_DRAW","COLOR_ATTACHMENT0","self","WebGL2RenderingContext","textureUnit","TEXTURE_2D","_getActiveTexture","pname","param","texture2dParams","textureParams","get","set","level","internalFormat","widthOrFormat","heightOrType","borderOrSource","format","pixels","internalformat","border","viewport","clearColor","red","green","blue","enable","disable","setBlend","blend","blendFunc","src","dst","createFramebuffer","bindFramebuffer","framebuffer","FRAMEBUFFER","framebufferTexture2D","attachment","clear","COLOR_BUFFER_BIT","arrayBufferData","usage","bindBuffer","ARRAY_BUFFER","bufferData","elementArrayBufferData","ELEMENT_ARRAY_BUFFER","programUniforms","Map","uniformArgs","every","v","isArray","compareArrays","count","vertexArray","RenderTexture","_callee5","_context5","WebGlCoreCtxRenderTexture","_this5","_callee6","_this5$textureSource","_callee6$","_context6","WebGlCoreRenderer","quadBuffer","bufferMemory","defaultTexture","requestRender","contextSpy","antialias","depth","stencil","desynchronized","powerPreference","premultipliedAlpha","preserveDrawingBuffer","getContext","Proxy","increment","String","bind","createWebGLContext","maxQuads","indices","Uint16Array","j","createIndexBuffer","defaultShader","loadShader","BYTES_PER_ELEMENT","quadBufferCollection","a_position","a_textureCoordinate","a_color","a_textureIndex","reset","curBufferIdx","curRenderOp","renderOps","getShaderManager","createCtxTexture","addQuad","_texture","_textureOptions$flipX","_textureOptions$flipY","fQuadBuffer","uiQuadBuffer","colorTl","colorTr","colorBl","colorBr","textureOptions","tx","ty","ta","tb","tc","td","rtt","targetDims","targetShader","reuseRenderOp","newRenderOp","flipX","flipY","texCoordX1","texCoordY1","texCoordX2","texCoordY2","_texture$props","tw","th","_ref2","_ref2$width","parentW","_ref2$height","parentH","_ref3","_ref4","getCtxTexture","textureIdx","rightCornerX","rightCornerY","recursive","_this$curRenderOp","addRenderOp","render","surface","_this$quadBufferColle","arr","node","rttNodes","unshift","renderRTTNodes","hasRTTupdates","activeRttNode","renderToTextureActive","children","child","update","deltaTime","addQuads","removeRTTNode","SpecialCodepoints","FontShaper","SdfFontShaper","glyphMap","kernings","kerning","second","first","amount","shapeText","codepoints","_this6","_callee7","codepointResult","lastGlyphId","codepoint","glyph","_this6$kernings$glyph","_context7","peek","done","id","letterSpacing","mapped","glyphId","cluster","lastIndex","xAdvance","xadvance","yAdvance","xOffset","xoffset","yOffset","yoffset","xBearing","yBearing","_this7","atlasUrl","atlasDataUrl","preload","checkLoaded","fetch","_ref5","_callee8","response","maxCharHeight","_this7$data","_this7$data$lightning","_context8","json","chars","charHeight","shaper","lightningMetrics","_x","apply","arguments","getAtlasEntry","loaded"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]}