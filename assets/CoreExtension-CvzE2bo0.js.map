{"version":3,"file":"CoreExtension-CvzE2bo0.js","sources":["../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/common/EventEmitter.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreShader.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/ShaderUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/WebGlUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreShader.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/textures/Texture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/lib/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/TrFontFace.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/textures/ColorTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreContextTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreRenderer.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/CoreRenderOp.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreRenderOp.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/RendererUtils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/utils.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/textures/SubTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxSubTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/internal/BufferCollection.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/lib/WebGlContextWrapper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/textures/RenderTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreCtxRenderTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/lib/textureCompression.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/textures/ImageTexture.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/renderers/webgl/WebGlCoreRenderer.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/renderers/SdfTextRenderer/internal/SpecialCodepoints.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/FontShaper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/internal/SdfFontShaper.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/text-rendering/font-face-types/SdfTrFontFace/SdfTrFontFace.js","../../node_modules/.pnpm/@lightningjs+renderer@0.9.4/node_modules/@lightningjs/renderer/dist/src/core/CoreExtension.js"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function createWebGLContext(canvas, contextSpy) {\n    const config = {\n        alpha: true,\n        antialias: false,\n        depth: false,\n        stencil: true,\n        desynchronized: false,\n        // Disabled because it prevents Visual Regression Tests from working\n        // failIfMajorPerformanceCaveat: true,\n        powerPreference: 'high-performance',\n        premultipliedAlpha: true,\n        preserveDrawingBuffer: false,\n    };\n    const gl = \n    // TODO: Remove this assertion once this issue is fixed in TypeScript\n    // https://github.com/microsoft/TypeScript/issues/53614\n    (canvas.getContext('webgl', config) ||\n        canvas.getContext('experimental-webgl', config));\n    if (!gl) {\n        throw new Error('Unable to create WebGL context');\n    }\n    if (contextSpy) {\n        // Proxy the GL context to log all GL calls\n        return new Proxy(gl, {\n            get(target, prop) {\n                const value = target[prop];\n                if (typeof value === 'function') {\n                    contextSpy.increment(String(prop));\n                    return value.bind(target);\n                }\n                return value;\n            },\n        });\n    }\n    return gl;\n}\n/**\n * Asserts a condition is truthy, otherwise throws an error\n *\n * @remarks\n * Useful at the top of functions to ensure certain conditions, arguments and\n * properties are set/met before continuing. When using this function,\n * TypeScript will narrow away falsy types from the condition.\n *\n * @param condition\n * @param message\n * @returns\n */\nexport function assertTruthy(condition, message) {\n    if (isProductionEnvironment())\n        return;\n    if (!condition) {\n        throw new Error(message || 'Assertion failed');\n    }\n}\n/**\n * Merges two colors based on a given progress value.\n *\n * This function takes two colors (c1 and c2) represented as 32-bit integers\n * in RGBA format and blends them based on the provided progress value (p).\n * The result is a new color that is a weighted combination of the input colors,\n * where the weight is determined by the progress value.\n *\n * @param {number} c1 - The first color in RGBA format (32-bit integer).\n * @param {number} c2 - The second color in RGBA format (32-bit integer).\n * @param {number} p - The progress value between 0 and 1.\n * @returns {number} The merged color as a 32-bit integer in RGBA format.\n */\nexport function mergeColorProgress(rgba1, rgba2, p) {\n    const r1 = Math.trunc(rgba1 >>> 24);\n    const g1 = Math.trunc((rgba1 >>> 16) & 0xff);\n    const b1 = Math.trunc((rgba1 >>> 8) & 0xff);\n    const a1 = Math.trunc(rgba1 & 0xff);\n    const r2 = Math.trunc(rgba2 >>> 24);\n    const g2 = Math.trunc((rgba2 >>> 16) & 0xff);\n    const b2 = Math.trunc((rgba2 >>> 8) & 0xff);\n    const a2 = Math.trunc(rgba2 & 0xff);\n    const r = Math.round(r2 * p + r1 * (1 - p));\n    const g = Math.round(g2 * p + g1 * (1 - p));\n    const b = Math.round(b2 * p + b1 * (1 - p));\n    const a = Math.round(a2 * p + a1 * (1 - p));\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * @internalRemarks\n * This method does NOT premultiply the alpha into the color channels. If that\n * is required (for internal use only) use {@link mergeColorAlphaPremultiplied}\n * instead.\n *\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @returns\n */\nexport function mergeColorAlpha(rgba, alpha) {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = Math.trunc((rgba & 0xff) * alpha);\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\nlet premultiplyRGB = true;\n/**\n * RGB components should not be premultiplied when using Canvas renderer\n * @param mode  Renderer mode\n */\nexport function setPremultiplyMode(mode) {\n    premultiplyRGB = mode === 'webgl';\n}\n/**\n * Given an RGBA encoded number, returns back the RGBA number with it's alpha\n * component multiplied by the passed `alpha` parameter.\n *\n * For the webGl renderer, each color channel is premultiplied by the final alpha value.\n *\n * @remarks\n * If `flipEndianess` is set to true, the function will returned an ABGR encoded number\n * which is useful when the color value needs to be passed into a shader attribute.\n *\n * NOTE: Depending on the mode set by {@link setPremultiplyMode}, this method returns\n * a PREMULTIPLIED alpha color which is generally only useful in the context of the\n * internal rendering process. Use {@link mergeColorAlpha} if you need to blend an alpha\n * value into a color in the context of the Renderer's main API.\n *\n * @internalRemarks\n * Do not expose this method in the main API because Renderer users should instead use\n * {@link mergeColorAlpha} to manipulate the alpha value of a color.\n *\n * @internal\n * @param rgba RGBA encoded number\n * @param alpha Normalized alpha value (Range: 0.0 - 1.0)\n * @param flipEndianess Flip the endianess. RGBA becomes encoded as ABGR (for inserting colors into shader attributes)\n * @returns\n */\nexport function mergeColorAlphaPremultiplied(rgba, alpha, flipEndianess = false) {\n    const newAlpha = ((rgba & 0xff) / 255) * alpha;\n    const rgbAlpha = premultiplyRGB ? newAlpha : 1;\n    const r = Math.trunc((rgba >>> 24) * rgbAlpha);\n    const g = Math.trunc(((rgba >>> 16) & 0xff) * rgbAlpha);\n    const b = Math.trunc(((rgba >>> 8) & 0xff) * rgbAlpha);\n    const a = Math.trunc(newAlpha * 255);\n    if (flipEndianess) {\n        return ((a << 24) | (b << 16) | (g << 8) | r) >>> 0;\n    }\n    return ((r << 24) | (g << 16) | (b << 8) | a) >>> 0;\n}\n/**\n * Returns true if the given object has the given \"own\" property.\n *\n * @param obj\n * @param prop\n * @returns\n */\nexport function hasOwn(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n/**\n * Converts degrees to radians\n *\n * @param degrees\n * @returns\n */\nexport function deg2Rad(degrees) {\n    return (degrees * Math.PI) / 180;\n}\n/**\n * Returns image aspect ratio\n *\n * @param width\n * @param height\n * @returns\n */\nexport function getImageAspectRatio(width, height) {\n    return width / height;\n}\n/**\n * Checks import.meta if env is production\n *\n * @returns\n */\nexport function isProductionEnvironment() {\n    return import.meta.env && import.meta.env.PROD;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * EventEmitter base class\n */\nexport class EventEmitter {\n    eventListeners = {};\n    on(event, listener) {\n        let listeners = this.eventListeners[event];\n        if (!listeners) {\n            listeners = [];\n        }\n        listeners.push(listener);\n        this.eventListeners[event] = listeners;\n    }\n    off(event, listener) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        if (!listener) {\n            delete this.eventListeners[event];\n            return;\n        }\n        const index = listeners.indexOf(listener);\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n    once(event, listener) {\n        const onceListener = (target, data) => {\n            this.off(event, onceListener);\n            listener(target, data);\n        };\n        this.on(event, onceListener);\n    }\n    emit(event, data) {\n        const listeners = this.eventListeners[event];\n        if (!listeners) {\n            return;\n        }\n        [...listeners].forEach((listener) => {\n            listener(this, data);\n        });\n    }\n    removeAllListeners() {\n        this.eventListeners = {};\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreShader {\n    // abstract draw(): void;\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {};\n    }\n}\n//# sourceMappingURL=CoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//#endregion Types\nexport function createShader(glw, type, source) {\n    const shader = glw.createShader(type);\n    if (!shader) {\n        throw new Error();\n    }\n    glw.shaderSource(shader, source);\n    glw.compileShader(shader);\n    const success = glw.getShaderParameter(shader, glw.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(glw.getShaderInfoLog(shader));\n    glw.deleteShader(shader);\n}\nexport function createProgram(glw, vertexShader, fragmentShader) {\n    const program = glw.createProgram();\n    if (!program) {\n        throw new Error();\n    }\n    glw.attachShader(program, vertexShader);\n    glw.attachShader(program, fragmentShader);\n    glw.linkProgram(program);\n    const success = glw.getProgramParameter(program, glw.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(glw.getProgramInfoLog(program));\n    glw.deleteProgram(program);\n    return undefined;\n}\n//# sourceMappingURL=ShaderUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generic WebGL Utility Functions\n *\n * @remarks\n * Nothing here should be coupled to Renderer logic / types.\n *\n * @param gl\n * @returns\n */\nexport function isWebGl2(gl) {\n    return (self.WebGL2RenderingContext && gl instanceof self.WebGL2RenderingContext);\n}\n//# sourceMappingURL=WebGlUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, hasOwn } from '../../../utils.js';\nimport { CoreShader } from '../CoreShader.js';\nimport { createProgram, createShader, } from './internal/ShaderUtils.js';\nimport { isWebGl2 } from './internal/WebGlUtils.js';\nexport class WebGlCoreShader extends CoreShader {\n    boundBufferCollection = null;\n    buffersBound = false;\n    program;\n    /**\n     * Vertex Array Object\n     *\n     * @remarks\n     * Used by WebGL2 Only\n     */\n    vao;\n    renderer;\n    glw;\n    attributeBuffers;\n    attributeLocations;\n    attributeNames;\n    uniformLocations;\n    uniformTypes;\n    supportsIndexedTextures;\n    constructor(options) {\n        super();\n        const renderer = (this.renderer = options.renderer);\n        const glw = (this.glw = this.renderer.glw);\n        this.supportsIndexedTextures = options.supportsIndexedTextures || false;\n        // Check that extensions are supported\n        const webGl2 = glw.isWebGl2();\n        const requiredExtensions = (webGl2 && options.webgl2Extensions) ||\n            (!webGl2 && options.webgl1Extensions) ||\n            [];\n        const glVersion = webGl2 ? '2.0' : '1.0';\n        requiredExtensions.forEach((extensionName) => {\n            if (!glw.getExtension(extensionName)) {\n                throw new Error(`Shader \"${this.constructor.name}\" requires extension \"${extensionName}\" for WebGL ${glVersion} but wasn't found`);\n            }\n        });\n        // Gather shader sources\n        // - If WebGL 2 and special WebGL 2 sources are provided, we copy those sources and delete\n        // the extra copy of them to save memory.\n        // TODO: This could be further made optimal by just caching the compiled shaders and completely deleting\n        // the source code\n        const shaderSources = options.shaderSources ||\n            this.constructor.shaderSources;\n        if (!shaderSources) {\n            throw new Error(`Shader \"${this.constructor.name}\" is missing shaderSources.`);\n        }\n        else if (webGl2 && shaderSources?.webGl2) {\n            shaderSources.fragment = shaderSources.webGl2.fragment;\n            shaderSources.vertex = shaderSources.webGl2.vertex;\n            delete shaderSources.webGl2;\n        }\n        const textureUnits = renderer.system.parameters.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        const vertexSource = shaderSources.vertex instanceof Function\n            ? shaderSources.vertex(textureUnits)\n            : shaderSources.vertex;\n        const fragmentSource = shaderSources.fragment instanceof Function\n            ? shaderSources.fragment(textureUnits)\n            : shaderSources.fragment;\n        const vertexShader = createShader(glw, glw.VERTEX_SHADER, vertexSource);\n        const fragmentShader = createShader(glw, glw.FRAGMENT_SHADER, fragmentSource);\n        if (!vertexShader || !fragmentShader) {\n            throw new Error();\n        }\n        const program = createProgram(glw, vertexShader, fragmentShader);\n        if (!program) {\n            throw new Error();\n        }\n        this.program = program;\n        if (webGl2) {\n            const vao = glw.createVertexArray();\n            if (!vao) {\n                throw new Error();\n            }\n            this.vao = vao;\n            glw.bindVertexArray(this.vao);\n        }\n        this.attributeLocations = {};\n        this.attributeBuffers = {};\n        this.attributeNames = [];\n        [...options.attributes].forEach((attributeName) => {\n            const location = glw.getAttribLocation(this.program, attributeName);\n            if (location < 0) {\n                throw new Error(`${this.constructor.name}: Vertex shader must have an attribute \"${attributeName}\"!`);\n            }\n            const buffer = glw.createBuffer();\n            if (!buffer) {\n                throw new Error(`${this.constructor.name}: Could not create buffer for attribute \"${attributeName}\"`);\n            }\n            this.attributeLocations[attributeName] = location;\n            this.attributeBuffers[attributeName] = buffer;\n            this.attributeNames.push(attributeName);\n        });\n        this.uniformLocations = {};\n        this.uniformTypes = {};\n        options.uniforms.forEach((uniform) => {\n            const location = glw.getUniformLocation(this.program, uniform.name);\n            this.uniformTypes[uniform.name] = uniform.uniform;\n            if (!location) {\n                console.warn(`Shader \"${this.constructor.name}\" could not get uniform location for \"${uniform.name}\"`);\n                return;\n            }\n            this.uniformLocations[uniform.name] = location;\n        });\n    }\n    bindBufferAttribute(location, buffer, attribute) {\n        const { glw } = this;\n        glw.enableVertexAttribArray(location);\n        glw.vertexAttribPointer(buffer, location, attribute.size, attribute.type, attribute.normalized, attribute.stride, attribute.offset);\n    }\n    disableAttribute(location) {\n        this.glw.disableVertexAttribArray(location);\n    }\n    disableAttributes() {\n        for (const loc in this.attributeLocations) {\n            this.disableAttribute(this.attributeLocations[loc]);\n        }\n        this.boundBufferCollection = null;\n    }\n    /**\n     * Given two sets of Shader props destined for this Shader, determine if they can be batched together\n     * to reduce the number of draw calls.\n     *\n     * @remarks\n     * This is used by the {@link WebGlCoreRenderer} to determine if it can batch multiple consecutive draw\n     * calls into a single draw call.\n     *\n     * By default, this returns false (meaning no batching is allowed), but can be\n     * overridden by child classes to provide more efficient batching.\n     *\n     * @param propsA\n     * @param propsB\n     * @returns\n     */\n    canBatchShaderProps(propsA, propsB) {\n        return false;\n    }\n    bindRenderOp(renderOp, props) {\n        this.bindBufferCollection(renderOp.buffers);\n        if (renderOp.textures.length > 0) {\n            this.bindTextures(renderOp.textures);\n        }\n        const { glw, parentHasRenderTexture, renderToTexture } = renderOp;\n        // Skip if the parent and current operation both have render textures\n        if (renderToTexture && parentHasRenderTexture) {\n            return;\n        }\n        // Bind render texture framebuffer dimensions as resolution\n        // if the parent has a render texture\n        if (parentHasRenderTexture) {\n            const { width, height } = renderOp.framebufferDimensions || {};\n            // Force pixel ratio to 1.0 for render textures since they are always 1:1\n            // the final render texture will be rendered to the screen with the correct pixel ratio\n            this.setUniform('u_pixelRatio', 1.0);\n            // Set resolution to the framebuffer dimensions\n            this.setUniform('u_resolution', new Float32Array([width ?? 0, height ?? 0]));\n        }\n        else {\n            this.setUniform('u_pixelRatio', renderOp.options.pixelRatio);\n            this.setUniform('u_resolution', new Float32Array([glw.canvas.width, glw.canvas.height]));\n        }\n        if (props) {\n            // Bind optional automatic uniforms\n            // These are only bound if their keys are present in the props.\n            if (hasOwn(props, '$dimensions')) {\n                let dimensions = props.$dimensions;\n                if (!dimensions) {\n                    dimensions = renderOp.dimensions;\n                }\n                this.setUniform('u_dimensions', [dimensions.width, dimensions.height]);\n            }\n            if (hasOwn(props, '$alpha')) {\n                let alpha = props.$alpha;\n                if (!alpha) {\n                    alpha = renderOp.alpha;\n                }\n                this.setUniform('u_alpha', alpha);\n            }\n            this.bindProps(props);\n        }\n    }\n    setUniform(name, ...value) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-argument\n        this.glw.setUniform(this.uniformTypes[name], this.uniformLocations[name], ...value);\n    }\n    bindBufferCollection(buffer) {\n        if (this.boundBufferCollection === buffer) {\n            return;\n        }\n        for (const attributeName in this.attributeLocations) {\n            const resolvedBuffer = buffer.getBuffer(attributeName);\n            const resolvedInfo = buffer.getAttributeInfo(attributeName);\n            assertTruthy(resolvedBuffer, `Buffer for \"${attributeName}\" not found`);\n            assertTruthy(resolvedInfo);\n            this.bindBufferAttribute(this.attributeLocations[attributeName], resolvedBuffer, resolvedInfo);\n        }\n        this.boundBufferCollection = buffer;\n    }\n    bindProps(props) {\n        // Implement in child class\n    }\n    bindTextures(textures) {\n        // no defaults\n    }\n    attach() {\n        this.glw.useProgram(this.program);\n        this.glw.useProgram(this.program);\n        if (this.glw.isWebGl2() && this.vao) {\n            this.glw.bindVertexArray(this.vao);\n        }\n    }\n    detach() {\n        this.disableAttributes();\n    }\n    static shaderSources;\n}\n//# sourceMappingURL=WebGlCoreShader.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../common/EventEmitter.js';\n/**\n * Represents a source of texture data for a CoreContextTexture.\n *\n * @remarks\n * Texture sources are used to populate a CoreContextTexture when that texture\n * is loaded. Texture data retrieved by the CoreContextTexture by the\n * `getTextureData` method. It's the responsibility of the concerete `Texture`\n * subclass to implement this method appropriately.\n */\nexport class Texture extends EventEmitter {\n    txManager;\n    /**\n     * The dimensions of the texture\n     *\n     * @remarks\n     * Until the texture data is loaded for the first time the value will be\n     * `null`.\n     */\n    dimensions = null;\n    error = null;\n    state = 'freed';\n    renderableOwners = new Set();\n    constructor(txManager) {\n        super();\n        this.txManager = txManager;\n    }\n    /**\n     * Add/remove an owner to/from the Texture based on its renderability.\n     *\n     * @remarks\n     * Any object can own a texture, be it a CoreNode or even the state object\n     * from a Text Renderer.\n     *\n     * When the reference to the texture that an owner object holds is replaced\n     * or cleared it must call this with `renderable=false` to release the owner\n     * association.\n     *\n     * @param owner\n     * @param renderable\n     */\n    setRenderableOwner(owner, renderable) {\n        if (renderable) {\n            this.renderableOwners.add(owner);\n        }\n        else {\n            this.renderableOwners.delete(owner);\n        }\n    }\n    /**\n     * Returns true if the texture is assigned to any Nodes that are renderable.\n     */\n    get renderable() {\n        return this.renderableOwners.size > 0;\n    }\n    /**\n     * Set the state of the texture\n     *\n     * @remark\n     * Intended for internal-use only but declared public so that it can be set\n     * by it's associated {@link CoreContextTexture}\n     *\n     * @param state\n     * @param args\n     */\n    setState(state, ...args) {\n        if (this.state !== state) {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.state = state;\n            if (state === 'loaded') {\n                const loadedArgs = args;\n                this.dimensions = loadedArgs[0];\n            }\n            else if (state === 'failed') {\n                const failedArgs = args;\n                this.error = failedArgs[0];\n            }\n            this.emit(state, ...args);\n        }\n    }\n    /**\n     * Make a cache key for this texture.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide an\n     * appropriate cache key for the texture type including the texture's\n     * properties that uniquely identify a copy of the texture. If the texture\n     * type does not support caching, then this method should return `false`.\n     *\n     * @param props\n     * @returns\n     * A cache key for this texture or `false` if the texture type does not\n     * support caching.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    /**\n     * Resolve the default values for the texture's properties.\n     *\n     * @remarks\n     * Each concrete `Texture` subclass must implement this method to provide\n     * default values for the texture's optional properties.\n     *\n     * @param props\n     * @returns\n     * The default values for the texture's properties.\n     */\n    static resolveDefaults(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    props) {\n        return {};\n    }\n}\n//# sourceMappingURL=Texture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const PROTOCOL_REGEX = /^(data|ftps?|https?):/;\nexport const getNormalizedRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r / 255, g / 255, b / 255, a / 255];\n};\nexport const getRgbaComponents = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    return [r, g, b, a];\n};\nexport const norm = (rgba) => {\n    const r = rgba >>> 24;\n    const g = (rgba >>> 16) & 0xff;\n    const b = (rgba >>> 8) & 0xff;\n    const a = rgba & 0xff;\n    const rgbaArr = [r / 255, g / 255, b / 255, a / 255];\n    rgbaArr[0] = Math.max(0, Math.min(255, rgbaArr[0]));\n    rgbaArr[1] = Math.max(0, Math.min(255, rgbaArr[1]));\n    rgbaArr[2] = Math.max(0, Math.min(255, rgbaArr[2]));\n    rgbaArr[3] = Math.max(0, Math.min(255, rgbaArr[3]));\n    let v = ((rgbaArr[3] | 0) << 24) +\n        ((rgbaArr[0] | 0) << 16) +\n        ((rgbaArr[1] | 0) << 8) +\n        (rgbaArr[2] | 0);\n    if (v < 0) {\n        v = 0xffffffff + v + 1;\n    }\n    return v;\n};\nexport function getNormalizedAlphaComponent(rgba) {\n    return (rgba & 0xff) / 255.0;\n}\n/**\n * Get a CSS color string from a RGBA color\n *\n * @param color\n * @returns\n */\nexport function getRgbaString(color) {\n    const r = Math.floor(color[0] * 255.0);\n    const g = Math.floor(color[1] * 255.0);\n    const b = Math.floor(color[2] * 255.0);\n    const a = Math.floor(color[3] * 255.0);\n    return `rgba(${r},${g},${b},${a.toFixed(4)})`;\n}\nexport function createBound(x1, y1, x2, y2, out) {\n    if (out) {\n        out.x1 = x1;\n        out.y1 = y1;\n        out.x2 = x2;\n        out.y2 = y2;\n        return out;\n    }\n    return {\n        x1,\n        y1,\n        x2,\n        y2,\n    };\n}\nexport function intersectBound(a, b, out) {\n    const intersection = createBound(Math.max(a.x1, b.x1), Math.max(a.y1, b.y1), Math.min(a.x2, b.x2), Math.min(a.y2, b.y2), out);\n    if (intersection.x1 < intersection.x2 && intersection.y1 < intersection.y2) {\n        return intersection;\n    }\n    return createBound(0, 0, 0, 0, intersection);\n}\nexport function boundsOverlap(a, b) {\n    return a.x1 < b.x2 && a.x2 > b.x1 && a.y1 < b.y2 && a.y2 > b.y1;\n}\nexport function convertBoundToRect(bound, out) {\n    if (out) {\n        out.x = bound.x1;\n        out.y = bound.y1;\n        out.width = bound.x2 - bound.x1;\n        out.height = bound.y2 - bound.y1;\n        return out;\n    }\n    return {\n        x: bound.x1,\n        y: bound.y1,\n        width: bound.x2 - bound.x1,\n        height: bound.y2 - bound.y1,\n    };\n}\nexport function intersectRect(a, b, out) {\n    const x = Math.max(a.x, b.x);\n    const y = Math.max(a.y, b.y);\n    const width = Math.min(a.x + a.width, b.x + b.width) - x;\n    const height = Math.min(a.y + a.height, b.y + b.height) - y;\n    if (width > 0 && height > 0) {\n        if (out) {\n            out.x = x;\n            out.y = y;\n            out.width = width;\n            out.height = height;\n            return out;\n        }\n        return {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n    if (out) {\n        out.x = 0;\n        out.y = 0;\n        out.width = 0;\n        out.height = 0;\n        return out;\n    }\n    return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n}\nexport function copyRect(a, out) {\n    if (out) {\n        out.x = a.x;\n        out.y = a.y;\n        out.width = a.width;\n        out.height = a.height;\n        return out;\n    }\n    return {\n        x: a.x,\n        y: a.y,\n        width: a.width,\n        height: a.height,\n    };\n}\nexport function compareRect(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null) {\n        return false;\n    }\n    return (a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height);\n}\nexport function boundInsideBound(bound1, bound2) {\n    return (bound1.x1 <= bound2.x2 &&\n        bound1.y1 <= bound2.y2 &&\n        bound1.x2 >= bound2.x1 &&\n        bound1.y2 >= bound2.y1);\n}\nexport function isBoundPositive(bound) {\n    return bound.x1 < bound.x2 && bound.y1 < bound.y2;\n}\nexport function isRectPositive(rect) {\n    return rect.width > 0 && rect.height > 0;\n}\nexport function convertUrlToAbsolute(url) {\n    // handle local file imports if the url isn't remote resource or data blob\n    if (self.location.protocol === 'file:' && !PROTOCOL_REGEX.test(url)) {\n        const path = self.location.pathname.split('/');\n        path.pop();\n        const basePath = path.join('/');\n        const baseUrl = self.location.protocol + '//' + basePath;\n        // check if url has a leading dot\n        if (url.charAt(0) === '.') {\n            url = url.slice(1);\n        }\n        // check if url has a leading slash\n        if (url.charAt(0) === '/') {\n            url = url.slice(1);\n        }\n        return baseUrl + '/' + url;\n    }\n    const absoluteUrl = new URL(url, self.location.href);\n    return absoluteUrl.href;\n}\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../../../common/EventEmitter.js';\nexport class TrFontFace extends EventEmitter {\n    fontFamily;\n    descriptors;\n    loaded = false;\n    metrics = null;\n    constructor(options) {\n        super();\n        const { fontFamily, descriptors, metrics } = options;\n        if (metrics) {\n            // Normalize metrics to be in the range of 0 to 1\n            this.metrics = {\n                ascender: metrics.ascender / metrics.unitsPerEm,\n                descender: metrics.descender / metrics.unitsPerEm,\n                lineGap: metrics.lineGap / metrics.unitsPerEm,\n            };\n        }\n        this.fontFamily = fontFamily;\n        this.descriptors = {\n            style: 'normal',\n            weight: 'normal',\n            stretch: 'normal',\n            ...descriptors,\n        };\n    }\n    /**\n     * Convert a TrFontFaceDescriptors to a FontFaceDescriptors which differ slightly\n     *\n     * @param descriptors\n     * @returns\n     */\n    static convertToCssFontFaceDescriptors(descriptors) {\n        return {\n            style: descriptors.style,\n            weight: typeof descriptors.weight === 'number'\n                ? `${descriptors.weight}`\n                : descriptors.weight,\n            stretch: descriptors.stretch,\n            unicodeRange: descriptors.unicodeRange,\n            variant: descriptors.variant,\n            featureSettings: descriptors.featureSettings,\n            display: descriptors.display,\n        };\n    }\n}\n//# sourceMappingURL=TrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\n/**\n * Texture consisting of only a 1x1 color pixel\n *\n * @remarks\n * The pixel color is set with the {@link ColorTextureProps.color} prop.\n *\n * This is the default texture used for a Node if it's\n * {@link INodeWritableProps.texture} prop is set to `null` (the default)\n *\n * Generally the 1x1 color pixel is stretched to whatever the set dimensions of\n * a Node are.\n */\nexport class ColorTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = ColorTexture.resolveDefaults(props || {});\n    }\n    get color() {\n        return this.props.color;\n    }\n    set color(color) {\n        this.props.color = color;\n    }\n    async getTextureData() {\n        const pixelData32 = new Uint32Array([this.color]);\n        const pixelData8 = new Uint8ClampedArray(pixelData32.buffer);\n        return {\n            data: new ImageData(pixelData8, 1, 1),\n            premultiplyAlpha: true,\n        };\n    }\n    static makeCacheKey(props) {\n        const resolvedProps = ColorTexture.resolveDefaults(props);\n        return `ColorTexture,${resolvedProps.color}`;\n    }\n    static resolveDefaults(props) {\n        return {\n            color: props.color || 0xffffffff,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=ColorTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreContextTexture {\n    memManager;\n    textureSource;\n    constructor(memManager, textureSource) {\n        this.memManager = memManager;\n        this.textureSource = textureSource;\n    }\n}\n//# sourceMappingURL=CoreContextTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ColorTexture } from '../textures/ColorTexture.js';\nimport { CoreContextTexture } from './CoreContextTexture.js';\nexport class CoreRenderer {\n    options;\n    mode;\n    stage;\n    //// Core Managers\n    txManager;\n    txMemManager;\n    shManager;\n    rttNodes = [];\n    constructor(options) {\n        this.options = options;\n        this.stage = options.stage;\n        this.txManager = options.txManager;\n        this.txMemManager = options.txMemManager;\n        this.shManager = options.shManager;\n    }\n}\n//# sourceMappingURL=CoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class CoreRenderOp {\n}\n//# sourceMappingURL=CoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CoreRenderOp } from '../CoreRenderOp.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nconst MAX_TEXTURES = 8; // TODO: get from gl\n/**\n * Can render multiple quads with multiple textures (up to vertex shader texture limit)\n *\n */\nexport class WebGlCoreRenderOp extends CoreRenderOp {\n    glw;\n    options;\n    buffers;\n    shader;\n    shaderProps;\n    alpha;\n    clippingRect;\n    dimensions;\n    bufferIdx;\n    zIndex;\n    renderToTexture;\n    parentHasRenderTexture;\n    framebufferDimensions;\n    length = 0;\n    numQuads = 0;\n    textures = [];\n    maxTextures;\n    constructor(glw, options, buffers, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, zIndex, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        super();\n        this.glw = glw;\n        this.options = options;\n        this.buffers = buffers;\n        this.shader = shader;\n        this.shaderProps = shaderProps;\n        this.alpha = alpha;\n        this.clippingRect = clippingRect;\n        this.dimensions = dimensions;\n        this.bufferIdx = bufferIdx;\n        this.zIndex = zIndex;\n        this.renderToTexture = renderToTexture;\n        this.parentHasRenderTexture = parentHasRenderTexture;\n        this.framebufferDimensions = framebufferDimensions;\n        this.maxTextures = shader.supportsIndexedTextures\n            ? glw.getParameter(glw.MAX_VERTEX_TEXTURE_IMAGE_UNITS)\n            : 1;\n    }\n    addTexture(texture) {\n        const { textures, maxTextures } = this;\n        const existingIdx = textures.findIndex((t) => t === texture);\n        if (existingIdx !== -1) {\n            return existingIdx;\n        }\n        const newIdx = textures.length;\n        if (newIdx >= maxTextures) {\n            return 0xffffffff;\n        }\n        this.textures.push(texture);\n        return newIdx;\n    }\n    draw() {\n        const { glw, shader, shaderProps, options } = this;\n        const { shManager } = options;\n        shManager.useShader(shader);\n        shader.bindRenderOp(this, shaderProps);\n        // TODO: Reduce calculations required\n        const quadIdx = (this.bufferIdx / 24) * 6 * 2;\n        // Clipping\n        if (this.clippingRect.valid) {\n            const { x, y, width, height } = this.clippingRect;\n            const pixelRatio = options.pixelRatio;\n            const canvasHeight = options.canvas.height;\n            const clipX = Math.round(x * pixelRatio);\n            const clipWidth = Math.round(width * pixelRatio);\n            const clipHeight = Math.round(height * pixelRatio);\n            const clipY = Math.round(canvasHeight - clipHeight - y * pixelRatio);\n            glw.setScissorTest(true);\n            glw.scissor(clipX, clipY, clipWidth, clipHeight);\n        }\n        else {\n            glw.setScissorTest(false);\n        }\n        glw.drawElements(glw.TRIANGLES, 6 * this.numQuads, glw.UNSIGNED_SHORT, quadIdx);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderOp.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Get device specific webgl parameters\n * @param glw\n */\nexport function getWebGlParameters(glw) {\n    const params = {\n        MAX_RENDERBUFFER_SIZE: 0,\n        MAX_TEXTURE_SIZE: 0,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\n        MAX_VIEWPORT_DIMS: 0,\n        MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_TEXTURE_IMAGE_UNITS: 0,\n        MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0,\n        MAX_VERTEX_ATTRIBS: 0,\n        MAX_VARYING_VECTORS: 0,\n        MAX_VERTEX_UNIFORM_VECTORS: 0,\n        MAX_FRAGMENT_UNIFORM_VECTORS: 0,\n    };\n    // Map over all parameters and get them\n    const keys = Object.keys(params);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        params[key] = glw.getParameter(glw[key]);\n    });\n    return params;\n}\n/**\n * Get device webgl extensions\n * @param glw\n */\nexport function getWebGlExtensions(glw) {\n    const extensions = {\n        ANGLE_instanced_arrays: null,\n        WEBGL_compressed_texture_s3tc: null,\n        WEBGL_compressed_texture_astc: null,\n        WEBGL_compressed_texture_etc: null,\n        WEBGL_compressed_texture_etc1: null,\n        WEBGL_compressed_texture_pvrtc: null,\n        WEBKIT_WEBGL_compressed_texture_pvrtc: null,\n        WEBGL_compressed_texture_s3tc_srgb: null,\n        OES_vertex_array_object: null,\n    };\n    // Map over all extensions and get them\n    const keys = Object.keys(extensions);\n    keys.forEach((key) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        extensions[key] = glw.getExtension(key);\n    });\n    return extensions;\n}\n/**\n * Allocate big memory chunk that we\n * can re-use to draw quads\n *\n * @param glw\n * @param size\n */\nexport function createIndexBuffer(glw, size) {\n    const maxQuads = ~~(size / 80);\n    const indices = new Uint16Array(maxQuads * 6);\n    for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n        indices[i] = j;\n        indices[i + 1] = j + 1;\n        indices[i + 2] = j + 2;\n        indices[i + 3] = j + 2;\n        indices[i + 4] = j + 1;\n        indices[i + 5] = j + 3;\n    }\n    const buffer = glw.createBuffer();\n    glw.elementArrayBufferData(buffer, indices, glw.STATIC_DRAW);\n}\n/**\n * Checks if an object is of type HTMLImageElement.\n * This is used because we cant check for HTMLImageElement directly when the\n * renderer is running in a seperate web worker context.\n *\n * @param obj\n * @returns\n */\nexport function isHTMLImageElement(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        obj.constructor &&\n        obj.constructor.name === 'HTMLImageElement');\n}\n//# sourceMappingURL=RendererUtils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Core Utility Functions\n *\n * @module\n */\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\nconst degree = Math.PI / 180;\nexport const setMatrixArrayType = (type) => {\n    ARRAY_TYPE = type;\n};\nexport const toRadian = (a) => {\n    return a * degree;\n};\nexport const equals = (a, b) => {\n    return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n};\nexport const rand = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nexport const isPowerOfTwo = (value) => {\n    return value && !(value & (value - 1));\n};\nconst getTimingBezier = (a, b, c, d) => {\n    const xc = 3.0 * a;\n    const xb = 3.0 * (c - a) - xc;\n    const xa = 1.0 - xc - xb;\n    const yc = 3.0 * b;\n    const yb = 3.0 * (d - b) - yc;\n    const ya = 1.0 - yc - yb;\n    return function (time) {\n        if (time >= 1.0) {\n            return 1;\n        }\n        if (time <= 0) {\n            return 0;\n        }\n        let t = 0.5, cbx, cbxd, dx;\n        for (let it = 0; it < 20; it++) {\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                return t * (t * (t * ya + yb) + yc);\n            }\n            // Cubic bezier derivative.\n            cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n            t += dx / cbxd;\n        }\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n            cbx = t * (t * (t * xa + xb) + xc);\n            dx = time - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc);\n            }\n            if (dx < 0) {\n                maxT = t;\n            }\n            else {\n                minT = t;\n            }\n        }\n    };\n};\nconst timingMapping = {};\nconst timingLookup = {\n    ease: [0.25, 0.1, 0.25, 1.0],\n    'ease-in': [0.42, 0, 1.0, 1.0],\n    'ease-out': [0, 0, 0.58, 1.0],\n    'ease-in-out': [0.42, 0, 0.58, 1.0],\n    'ease-in-sine': [0.12, 0, 0.39, 0],\n    'ease-out-sine': [0.12, 0, 0.39, 0],\n    'ease-in-out-sine': [0.37, 0, 0.63, 1],\n    'ease-in-cubic': [0.32, 0, 0.67, 0],\n    'ease-out-cubic': [0.33, 1, 0.68, 1],\n    'ease-in-out-cubic': [0.65, 0, 0.35, 1],\n    'ease-in-circ': [0.55, 0, 1, 0.45],\n    'ease-out-circ': [0, 0.55, 0.45, 1],\n    'ease-in-out-circ': [0.85, 0, 0.15, 1],\n    'ease-in-back': [0.36, 0, 0.66, -0.56],\n    'ease-out-back': [0.34, 1.56, 0.64, 1],\n    'ease-in-out-back': [0.68, -0.6, 0.32, 1.6],\n};\nconst defaultTiming = (t) => t;\nconst parseCubicBezier = (str) => {\n    //cubic-bezier(0.84, 0.52, 0.56, 0.6)\n    const regex = /-?\\d*\\.?\\d+/g;\n    const match = str.match(regex);\n    if (match) {\n        const [num1, num2, num3, num4] = match;\n        const a = parseFloat(num1 || '0.42');\n        const b = parseFloat(num2 || '0');\n        const c = parseFloat(num3 || '1');\n        const d = parseFloat(num4 || '1');\n        const timing = getTimingBezier(a, b, c, d);\n        timingMapping[str] = timing;\n        return timing;\n    }\n    // parse failed, return linear\n    console.warn('Unknown cubic-bezier timing: ' + str);\n    return defaultTiming;\n};\nexport const getTimingFunction = (str) => {\n    if (str === 'linear') {\n        return defaultTiming;\n    }\n    if (timingMapping[str] !== undefined) {\n        return timingMapping[str] || defaultTiming;\n    }\n    if (str === 'step-start') {\n        return () => {\n            return 1;\n        };\n    }\n    if (str === 'step-end') {\n        return (time) => {\n            return time === 1 ? 1 : 0;\n        };\n    }\n    if (timingLookup[str] !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS doesn't understand that we've checked for undefined\n        const [a, b, c, d] = timingLookup[str];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const timing = getTimingBezier(a, b, c, d);\n        timingMapping[str] = timing;\n        return timing;\n    }\n    if (str.startsWith('cubic-bezier')) {\n        return parseCubicBezier(str);\n    }\n    console.warn('Unknown timing function: ' + str);\n    return defaultTiming;\n};\nif (!Math.hypot)\n    Math.hypot = (...args) => {\n        let y = 0, i = args.length;\n        while (i--) {\n            y += args[i] * args[i];\n        }\n        return Math.sqrt(y);\n    };\n//# sourceMappingURL=utils.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { isPowerOfTwo } from '../../utils.js';\nimport { CoreContextTexture } from '../CoreContextTexture.js';\nimport { isHTMLImageElement } from './internal/RendererUtils.js';\nconst TRANSPARENT_TEXTURE_DATA = new Uint8Array([0, 0, 0, 0]);\n/**\n * A wrapper around a WebGLTexture that handles loading the texture data\n * from a Texture source and uploading it to the GPU as well as freeing\n * the uploaded texture.\n *\n * @remarks\n * When accessing the ctxTexture property, the texture will be loaded if\n * it hasn't been already. ctxTexture will always return a valid WebGLTexture\n * and trigger the loading/uploading of the texture's data if it hasn't been\n * loaded yet.\n */\nexport class WebGlCoreCtxTexture extends CoreContextTexture {\n    glw;\n    _nativeCtxTexture = null;\n    _state = 'freed';\n    _w = 0;\n    _h = 0;\n    constructor(glw, memManager, textureSource) {\n        super(memManager, textureSource);\n        this.glw = glw;\n    }\n    get ctxTexture() {\n        if (this._state === 'freed') {\n            this.load();\n        }\n        assertTruthy(this._nativeCtxTexture);\n        return this._nativeCtxTexture;\n    }\n    get renderable() {\n        return this.textureSource.renderable;\n    }\n    get w() {\n        return this._w;\n    }\n    get h() {\n        return this._h;\n    }\n    /**\n     * Load the texture data from the Texture source and upload it to the GPU\n     *\n     * @remarks\n     * This method is called automatically when accessing the ctxTexture property\n     * if the texture hasn't been loaded yet. But it can also be called manually\n     * to force the texture to be pre-loaded prior to accessing the ctxTexture\n     * property.\n     */\n    load() {\n        // If the texture is already loading or loaded, don't load it again.\n        if (this._state === 'loading' || this._state === 'loaded') {\n            return;\n        }\n        this._state = 'loading';\n        this.textureSource.setState('loading');\n        this._nativeCtxTexture = this.createNativeCtxTexture();\n        this.onLoadRequest()\n            .then(({ width, height }) => {\n            // If the texture has been freed while loading, return early.\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'loaded';\n            this._w = width;\n            this._h = height;\n            // Update the texture source's width and height so that it can be used\n            // for rendering.\n            this.textureSource.setState('loaded', { width, height });\n        })\n            .catch((err) => {\n            // If the texture has been freed while loading, return early.\n            if (this._state === 'freed') {\n                return;\n            }\n            this._state = 'failed';\n            this.textureSource.setState('failed', err);\n            console.error(err);\n        });\n    }\n    /**\n     * Called when the texture data needs to be loaded and uploaded to a texture\n     */\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        // Set to a 1x1 transparent texture\n        glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        const textureData = await this.textureSource?.getTextureData();\n        // If the texture has been freed while loading, return early.\n        if (!this._nativeCtxTexture) {\n            assertTruthy(this._state === 'freed');\n            return { width: 0, height: 0 };\n        }\n        let width = 0;\n        let height = 0;\n        assertTruthy(this._nativeCtxTexture);\n        glw.activeTexture(0);\n        // If textureData is null, the texture is empty (0, 0) and we don't need to\n        // upload any data to the GPU.\n        if (textureData.data instanceof ImageBitmap ||\n            textureData.data instanceof ImageData ||\n            // not using typeof HTMLImageElement due to web worker\n            isHTMLImageElement(textureData.data)) {\n            const data = textureData.data;\n            width = data.width;\n            height = data.height;\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.pixelStorei(glw.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !!textureData.premultiplyAlpha);\n            glw.texImage2D(0, glw.RGBA, glw.RGBA, glw.UNSIGNED_BYTE, data);\n            memManager.setTextureMemUse(this, width * height * 4);\n            // generate mipmaps for power-of-2 textures or in WebGL2RenderingContext\n            if (glw.isWebGl2() || (isPowerOfTwo(width) && isPowerOfTwo(height))) {\n                glw.generateMipmap();\n            }\n        }\n        else if (textureData.data === null) {\n            width = 0;\n            height = 0;\n            // Reset to a 1x1 transparent texture\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.texImage2D(0, glw.RGBA, 1, 1, 0, glw.RGBA, glw.UNSIGNED_BYTE, TRANSPARENT_TEXTURE_DATA);\n            memManager.setTextureMemUse(this, TRANSPARENT_TEXTURE_DATA.byteLength);\n        }\n        else if ('mipmaps' in textureData.data && textureData.data.mipmaps) {\n            const { mipmaps, width = 0, height = 0, type, glInternalFormat, } = textureData.data;\n            const view = type === 'ktx'\n                ? new DataView(mipmaps[0] ?? new ArrayBuffer(0))\n                : mipmaps[0];\n            glw.bindTexture(this._nativeCtxTexture);\n            glw.compressedTexImage2D(0, glInternalFormat, width, height, 0, view);\n            glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n            glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n            glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n            memManager.setTextureMemUse(this, view.byteLength);\n        }\n        else {\n            console.error(`WebGlCoreCtxTexture.onLoadRequest: Unexpected textureData returned`, textureData);\n        }\n        return {\n            width,\n            height,\n        };\n    }\n    /**\n     * Free the WebGLTexture from the GPU\n     *\n     * @returns\n     */\n    free() {\n        if (this._state === 'freed') {\n            return;\n        }\n        this._state = 'freed';\n        this.textureSource.setState('freed');\n        this._w = 0;\n        this._h = 0;\n        if (!this._nativeCtxTexture) {\n            return;\n        }\n        const { glw, memManager } = this;\n        glw.deleteTexture(this._nativeCtxTexture);\n        memManager.setTextureMemUse(this, 0);\n        this._nativeCtxTexture = null;\n    }\n    /**\n     * Create native context texture\n     *\n     * @remarks\n     * When this method returns the returned texture will be bound to the GL context state.\n     *\n     * @param width\n     * @param height\n     * @returns\n     */\n    createNativeCtxTexture() {\n        const { glw } = this;\n        const nativeTexture = glw.createTexture();\n        if (!nativeTexture) {\n            throw new Error('Could not create WebGL Texture');\n        }\n        // On initial load request, create a 1x1 transparent texture to use until\n        // the texture data is finally loaded.\n        glw.activeTexture(0);\n        glw.bindTexture(nativeTexture);\n        // linear texture filtering\n        glw.texParameteri(glw.TEXTURE_MAG_FILTER, glw.LINEAR);\n        glw.texParameteri(glw.TEXTURE_MIN_FILTER, glw.LINEAR);\n        // texture wrapping method\n        glw.texParameteri(glw.TEXTURE_WRAP_S, glw.CLAMP_TO_EDGE);\n        glw.texParameteri(glw.TEXTURE_WRAP_T, glw.CLAMP_TO_EDGE);\n        return nativeTexture;\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture, } from './Texture.js';\n/**\n * A Texture that is a sub-region of another Texture.\n *\n * @remarks\n * The parent texture can be a Sprite Sheet/Texture Atlas and set using the\n * {@link SubTextureProps.texture} prop. The sub-region relative to the parent\n * texture is defined with the {@link SubTextureProps.x},\n * {@link SubTextureProps.y}, {@link SubTextureProps.width}, and\n * {@link SubTextureProps.height} pixel values.\n */\nexport class SubTexture extends Texture {\n    props;\n    parentTexture;\n    constructor(txManager, props) {\n        super(txManager);\n        this.parentTexture = this.txManager.loadTexture(props.texture.txType, props.texture.props, props.texture.options);\n        this.props = SubTexture.resolveDefaults(props || {});\n        // If parent texture is already loaded / failed, trigger loaded event manually\n        // so that users get a consistent event experience.\n        // We do this in a microtask to allow listeners to be attached in the same\n        // synchronous task after calling loadTexture()\n        queueMicrotask(() => {\n            const parentTx = this.parentTexture;\n            if (parentTx.state === 'loaded') {\n                this.onParentTxLoaded(parentTx, parentTx.dimensions);\n            }\n            else if (parentTx.state === 'failed') {\n                this.onParentTxFailed(parentTx, parentTx.error);\n            }\n            parentTx.on('loaded', this.onParentTxLoaded);\n            parentTx.on('failed', this.onParentTxFailed);\n        });\n    }\n    onParentTxLoaded = () => {\n        // We ignore the parent's passed dimensions, and simply use the SubTexture's\n        // configured dimensions (because that's all that matters here)\n        this.setState('loaded', {\n            width: this.props.width,\n            height: this.props.height,\n        });\n    };\n    onParentTxFailed = (target, error) => {\n        this.setState('failed', error);\n    };\n    async getTextureData() {\n        return {\n            data: this.props,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static makeCacheKey(props) {\n        return false;\n    }\n    static resolveDefaults(props) {\n        return {\n            texture: props.texture,\n            x: props.x || 0,\n            y: props.y || 0,\n            width: props.width || 0,\n            height: props.height || 0,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=SubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxSubTexture extends WebGlCoreCtxTexture {\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n    }\n    async onLoadRequest() {\n        const props = await this.textureSource.getTextureData();\n        return {\n            width: props.data?.width || 0,\n            height: props.data?.height || 0,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxSubTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a collection of WebGL Buffers along with their associated\n * vertex attribute formats.\n */\nexport class BufferCollection {\n    config;\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * Get the WebGLBuffer associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getBuffer(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])?.buffer;\n    }\n    /**\n     * Get the AttributeInfo associated with the given attribute name if it exists.\n     *\n     * @param attributeName\n     * @returns\n     */\n    getAttributeInfo(attributeName) {\n        return this.config.find((item) => item.attributes[attributeName])\n            ?.attributes[attributeName];\n    }\n}\n//# sourceMappingURL=BufferCollection.js.map","/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport { assertTruthy } from '../../utils.js';\nimport { isWebGl2 } from '../renderers/webgl/internal/WebGlUtils.js';\n/**\n * Optimized WebGL Context Wrapper\n *\n * @remarks\n * This class contains the subset of the WebGLRenderingContext & WebGL2RenderingContext\n * API that is used by the renderer. Select high volume WebGL methods include\n * caching optimizations to avoid making WebGL calls if the state is already set\n * to the desired value.\n *\n * While most methods contained are direct passthroughs to the WebGL context,\n * some methods combine multiple WebGL calls into one for convenience, modify\n * arguments to be more convenient, or are replaced by more specific methods.\n *\n * Not all methods are optimized. Only methods that are called frequently\n * and/or have a high cost are optimized.\n *\n * A subset of GLenum constants are also exposed as properties on this class\n * for convenience.\n */\nexport class WebGlContextWrapper {\n    gl;\n    //#region Cached WebGL State\n    activeTextureUnit = 0;\n    texture2dUnits;\n    texture2dParams = new WeakMap();\n    scissorEnabled;\n    scissorX;\n    scissorY;\n    scissorWidth;\n    scissorHeight;\n    blendEnabled;\n    blendSrcRgb;\n    blendDstRgb;\n    blendSrcAlpha;\n    blendDstAlpha;\n    boundArrayBuffer;\n    boundElementArrayBuffer;\n    curProgram;\n    programUniforms = new WeakMap();\n    //#endregion Cached WebGL State\n    //#region Canvas\n    canvas;\n    //#endregion Canvas\n    //#region WebGL Enums\n    MAX_RENDERBUFFER_SIZE;\n    MAX_TEXTURE_SIZE;\n    MAX_VIEWPORT_DIMS;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n    MAX_TEXTURE_IMAGE_UNITS;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n    MAX_VERTEX_ATTRIBS;\n    MAX_VARYING_VECTORS;\n    MAX_VERTEX_UNIFORM_VECTORS;\n    MAX_FRAGMENT_UNIFORM_VECTORS;\n    TEXTURE_MAG_FILTER;\n    TEXTURE_MIN_FILTER;\n    TEXTURE_WRAP_S;\n    TEXTURE_WRAP_T;\n    LINEAR;\n    CLAMP_TO_EDGE;\n    RGBA;\n    UNSIGNED_BYTE;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n    UNPACK_FLIP_Y_WEBGL;\n    FLOAT;\n    TRIANGLES;\n    UNSIGNED_SHORT;\n    ONE;\n    ONE_MINUS_SRC_ALPHA;\n    VERTEX_SHADER;\n    FRAGMENT_SHADER;\n    STATIC_DRAW;\n    COMPILE_STATUS;\n    LINK_STATUS;\n    DYNAMIC_DRAW;\n    COLOR_ATTACHMENT0;\n    //#endregion WebGL Enums\n    constructor(gl) {\n        this.gl = gl;\n        // The following code extracts the current state of the WebGL context\n        // to our local JavaScript cached version of it. This is so we can\n        // avoid making WebGL calls if we don't need to.\n        // We could assume that the WebGL context is in a default state, but\n        // in the future we may want to support restoring a broken WebGL context\n        // and this will help with that.\n        this.activeTextureUnit =\n            gl.getParameter(gl.ACTIVE_TEXTURE) - gl.TEXTURE0;\n        const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        // save current texture units\n        this.texture2dUnits = new Array(maxTextureUnits)\n            .fill(undefined)\n            .map((_, i) => {\n            this.activeTexture(i);\n            return gl.getParameter(gl.TEXTURE_BINDING_2D);\n        });\n        // restore active texture unit\n        this.activeTexture(this.activeTextureUnit);\n        this.scissorEnabled = gl.isEnabled(gl.SCISSOR_TEST);\n        const scissorBox = gl.getParameter(gl.SCISSOR_BOX);\n        this.scissorX = scissorBox[0];\n        this.scissorY = scissorBox[1];\n        this.scissorWidth = scissorBox[2];\n        this.scissorHeight = scissorBox[3];\n        this.blendEnabled = gl.isEnabled(gl.BLEND);\n        this.blendSrcRgb = gl.getParameter(gl.BLEND_SRC_RGB);\n        this.blendDstRgb = gl.getParameter(gl.BLEND_DST_RGB);\n        this.blendSrcAlpha = gl.getParameter(gl.BLEND_SRC_ALPHA);\n        this.blendDstAlpha = gl.getParameter(gl.BLEND_DST_ALPHA);\n        this.boundArrayBuffer = gl.getParameter(gl.ARRAY_BUFFER_BINDING);\n        this.boundElementArrayBuffer = gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);\n        this.curProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n        this.canvas = gl.canvas;\n        // Extract GLenums\n        this.MAX_RENDERBUFFER_SIZE = gl.MAX_RENDERBUFFER_SIZE;\n        this.MAX_TEXTURE_SIZE = gl.MAX_TEXTURE_SIZE;\n        this.MAX_VIEWPORT_DIMS = gl.MAX_VIEWPORT_DIMS;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.MAX_TEXTURE_IMAGE_UNITS = gl.MAX_TEXTURE_IMAGE_UNITS;\n        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS;\n        this.MAX_VERTEX_ATTRIBS = gl.MAX_VERTEX_ATTRIBS;\n        this.MAX_VARYING_VECTORS = gl.MAX_VARYING_VECTORS;\n        this.MAX_VERTEX_UNIFORM_VECTORS = gl.MAX_VERTEX_UNIFORM_VECTORS;\n        this.MAX_FRAGMENT_UNIFORM_VECTORS = gl.MAX_FRAGMENT_UNIFORM_VECTORS;\n        this.TEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;\n        this.TEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;\n        this.TEXTURE_WRAP_S = gl.TEXTURE_WRAP_S;\n        this.TEXTURE_WRAP_T = gl.TEXTURE_WRAP_T;\n        this.LINEAR = gl.LINEAR;\n        this.CLAMP_TO_EDGE = gl.CLAMP_TO_EDGE;\n        this.RGBA = gl.RGBA;\n        this.UNSIGNED_BYTE = gl.UNSIGNED_BYTE;\n        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL;\n        this.UNPACK_FLIP_Y_WEBGL = gl.UNPACK_FLIP_Y_WEBGL;\n        this.FLOAT = gl.FLOAT;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.ONE = gl.ONE;\n        this.ONE_MINUS_SRC_ALPHA = gl.ONE_MINUS_SRC_ALPHA;\n        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS;\n        this.TRIANGLES = gl.TRIANGLES;\n        this.UNSIGNED_SHORT = gl.UNSIGNED_SHORT;\n        this.VERTEX_SHADER = gl.VERTEX_SHADER;\n        this.FRAGMENT_SHADER = gl.FRAGMENT_SHADER;\n        this.STATIC_DRAW = gl.STATIC_DRAW;\n        this.COMPILE_STATUS = gl.COMPILE_STATUS;\n        this.LINK_STATUS = gl.LINK_STATUS;\n        this.DYNAMIC_DRAW = gl.DYNAMIC_DRAW;\n        this.COLOR_ATTACHMENT0 = gl.COLOR_ATTACHMENT0;\n    }\n    /**\n     * Returns true if the WebGL context is WebGL2\n     *\n     * @returns\n     */\n    isWebGl2() {\n        return isWebGl2(this.gl);\n    }\n    /**\n     * ```\n     * gl.activeTexture(textureUnit + gl.TEXTURE0);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: `textureUnit` is based from 0, not `gl.TEXTURE0`.\n     *\n     * @param textureUnit\n     */\n    activeTexture(textureUnit) {\n        const { gl } = this;\n        if (this.activeTextureUnit !== textureUnit) {\n            gl.activeTexture(textureUnit + gl.TEXTURE0);\n            this.activeTextureUnit = textureUnit;\n        }\n    }\n    /**\n     * ```\n     * gl.bindTexture(gl.TEXTURE_2D, texture);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param texture\n     */\n    bindTexture(texture) {\n        const { gl, activeTextureUnit, texture2dUnits } = this;\n        if (texture2dUnits[activeTextureUnit] === texture) {\n            return;\n        }\n        texture2dUnits[activeTextureUnit] = texture;\n        gl.bindTexture(this.gl.TEXTURE_2D, texture);\n    }\n    _getActiveTexture() {\n        const { activeTextureUnit, texture2dUnits } = this;\n        return texture2dUnits[activeTextureUnit];\n    }\n    /**\n     * ```\n     * gl.texParameteri(gl.TEXTURE_2D, pname, param);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     *\n     * @param pname\n     * @param param\n     * @returns\n     */\n    texParameteri(pname, param) {\n        const { gl, texture2dParams } = this;\n        const activeTexture = this._getActiveTexture();\n        if (!activeTexture) {\n            throw new Error('No active texture');\n        }\n        let textureParams = texture2dParams.get(activeTexture);\n        if (!textureParams) {\n            textureParams = {};\n            texture2dParams.set(activeTexture, textureParams);\n        }\n        if (textureParams[pname] === param) {\n            return;\n        }\n        textureParams[pname] = param;\n        gl.texParameteri(gl.TEXTURE_2D, pname, param);\n    }\n    texImage2D(level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels) {\n        const { gl } = this;\n        if (format) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource, format, type, pixels);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, widthOrFormat, heightOrType, borderOrSource);\n        }\n    }\n    /**\n     * ```\n     * gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, data);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    compressedTexImage2D(level, internalformat, width, height, border, data) {\n        const { gl } = this;\n        gl.compressedTexImage2D(gl.TEXTURE_2D, level, internalformat, width, height, border, data);\n    }\n    /**\n     * ```\n     * gl.pixelStorei(pname, param);\n     * ```\n     *\n     * @param pname\n     * @param param\n     */\n    pixelStorei(pname, param) {\n        const { gl } = this;\n        gl.pixelStorei(pname, param);\n    }\n    /**\n     * ```\n     * gl.generateMipmap(gl.TEXTURE_2D);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.TEXTURE_2D`\n     */\n    generateMipmap() {\n        const { gl } = this;\n        gl.generateMipmap(gl.TEXTURE_2D);\n    }\n    /**\n     * ```\n     * gl.createTexture();\n     * ```\n     *\n     * @returns\n     */\n    createTexture() {\n        const { gl } = this;\n        return gl.createTexture();\n    }\n    /**\n     * ```\n     * gl.deleteTexture(texture);\n     * ```\n     *\n     * @param texture\n     */\n    deleteTexture(texture) {\n        const { gl } = this;\n        if (texture) {\n            this.texture2dParams.delete(texture);\n        }\n        gl.deleteTexture(texture);\n    }\n    /**\n     * ```\n     * gl.viewport(x, y, width, height);\n     * ```\n     */\n    viewport(x, y, width, height) {\n        const { gl } = this;\n        gl.viewport(x, y, width, height);\n    }\n    /**\n     * ```\n     * gl.clearColor(red, green, blue, alpha);\n     * ```\n     *\n     * @param red\n     * @param green\n     * @param blue\n     * @param alpha\n     */\n    clearColor(red, green, blue, alpha) {\n        const { gl } = this;\n        gl.clearColor(red, green, blue, alpha);\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.SCISSOR_TEST);\n     * ```\n     * @param enable\n     */\n    setScissorTest(enable) {\n        const { gl, scissorEnabled } = this;\n        if (enable === scissorEnabled) {\n            return;\n        }\n        if (enable) {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n        else {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n        this.scissorEnabled = enable;\n    }\n    /**\n     * ```\n     * gl.scissor(x, y, width, height);\n     * ```\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    scissor(x, y, width, height) {\n        const { gl, scissorX, scissorY, scissorWidth, scissorHeight } = this;\n        if (x !== scissorX ||\n            y !== scissorY ||\n            width !== scissorWidth ||\n            height !== scissorHeight) {\n            gl.scissor(x, y, width, height);\n            this.scissorX = x;\n            this.scissorY = y;\n            this.scissorWidth = width;\n            this.scissorHeight = height;\n        }\n    }\n    /**\n     * ```\n     * gl[\"enable\"|\"disable\"](gl.BLEND);\n     * ```\n     *\n     * @param blend\n     * @returns\n     */\n    setBlend(blend) {\n        const { gl, blendEnabled } = this;\n        if (blend === blendEnabled) {\n            return;\n        }\n        if (blend) {\n            gl.enable(gl.BLEND);\n        }\n        else {\n            gl.disable(gl.BLEND);\n        }\n        this.blendEnabled = blend;\n    }\n    /**\n     * ```\n     * gl.blendFunc(src, dst);\n     * ```\n     *\n     * @param src\n     * @param dst\n     */\n    blendFunc(src, dst) {\n        const { gl, blendSrcRgb, blendDstRgb, blendSrcAlpha, blendDstAlpha } = this;\n        if (src !== blendSrcRgb ||\n            dst !== blendDstRgb ||\n            src !== blendSrcAlpha ||\n            dst !== blendDstAlpha) {\n            gl.blendFunc(src, dst);\n            this.blendSrcRgb = src;\n            this.blendDstRgb = dst;\n            this.blendSrcAlpha = src;\n            this.blendDstAlpha = dst;\n        }\n    }\n    /**\n     * ```\n     * gl.createBuffer();\n     * ```\n     *\n     * @returns\n     */\n    createBuffer() {\n        const { gl } = this;\n        return gl.createBuffer();\n    }\n    /**\n     * ```\n     * gl.createFramebuffer();\n     * ```\n     * @returns\n     */\n    createFramebuffer() {\n        const { gl } = this;\n        return gl.createFramebuffer();\n    }\n    /**\n     * ```\n     * gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n     * ```\n     *\n     * @param framebuffer\n     */\n    bindFramebuffer(framebuffer) {\n        const { gl } = this;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    }\n    /**\n     * ```\n     * gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n     * ```\n     * @remarks\n     * **WebGL Difference**: Bind target is always `gl.FRAMEBUFFER` and textarget is always `gl.TEXTURE_2D`\n     */\n    framebufferTexture2D(attachment, texture, level) {\n        const { gl } = this;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, level);\n    }\n    /**\n     * ```\n     * gl.clear(gl.COLOR_BUFFER_BIT);\n     * ```\n     *\n     * @remarks\n     * **WebGL Difference**: Clear mask is always `gl.COLOR_BUFFER_BIT`\n     */\n    clear() {\n        const { gl } = this;\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    arrayBufferData(buffer, data, usage) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n     * gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n     * ```\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.bufferData` are combined into one function.\n     *\n     * @param buffer\n     * @param data\n     * @param usage\n     */\n    elementArrayBufferData(buffer, data, usage) {\n        const { gl, boundElementArrayBuffer } = this;\n        if (boundElementArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n            this.boundElementArrayBuffer = buffer;\n        }\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, usage);\n    }\n    /**\n     * ```\n     * gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n     * gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n     * ```\n     *\n     * @remarks\n     * **WebGL Combo**: `gl.bindBuffer` and `gl.vertexAttribPointer` are combined into one function.\n     *\n     * @param buffer\n     * @param index\n     * @param size\n     * @param type\n     * @param normalized\n     * @param stride\n     * @param offset\n     */\n    vertexAttribPointer(buffer, index, size, type, normalized, stride, offset) {\n        const { gl, boundArrayBuffer } = this;\n        if (boundArrayBuffer !== buffer) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            this.boundArrayBuffer = buffer;\n        }\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n    /**\n     * ```\n     * gl.useProgram(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    useProgram(program) {\n        const { gl, curProgram } = this;\n        if (curProgram === program) {\n            return;\n        }\n        gl.useProgram(program);\n        this.curProgram = program;\n    }\n    setUniform(type, location, ...args) {\n        const { gl, programUniforms } = this;\n        let uniforms = programUniforms.get(this.curProgram);\n        if (!uniforms) {\n            uniforms = new Map();\n            programUniforms.set(this.curProgram, uniforms);\n        }\n        const uniformArgs = uniforms.get(location);\n        if (!uniformArgs || !compareArrays(uniformArgs, args)) {\n            uniforms.set(location, args);\n            gl[type](location, ...args);\n        }\n    }\n    /**\n     * ```\n     * gl.getParameter(pname);\n     * ```\n     *\n     * @param pname\n     * @returns\n     */\n    getParameter(pname) {\n        const { gl } = this;\n        return gl.getParameter(pname);\n    }\n    /**\n     * ```\n     * gl.drawElements(mode, count, type, offset);\n     * ```\n     *\n     * @param mode\n     * @param count\n     * @param type\n     * @param offset\n     */\n    drawElements(mode, count, type, offset) {\n        const { gl } = this;\n        gl.drawElements(mode, count, type, offset);\n    }\n    /**\n     * ```\n     * gl.drawArrays(mode, first, count);\n     * ```\n     *\n     * @param name\n     * @returns\n     */\n    getExtension(name) {\n        const { gl } = this;\n        return gl.getExtension(name);\n    }\n    /**\n     * ```\n     * gl.createVertexArray();\n     * ```\n     *\n     * @returns\n     */\n    createVertexArray() {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        return gl.createVertexArray();\n    }\n    /**\n     * ```\n     * gl.bindVertexArray(vertexArray);\n     * ```\n     *\n     * @param vertexArray\n     */\n    bindVertexArray(vertexArray) {\n        const { gl } = this;\n        assertTruthy(gl instanceof WebGL2RenderingContext);\n        gl.bindVertexArray(vertexArray);\n    }\n    /**\n     * ```\n     * gl.getAttribLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getAttribLocation(program, name) {\n        const { gl } = this;\n        return gl.getAttribLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.getUniformLocation(program, name);\n     * ```\n     *\n     * @param program\n     * @param name\n     * @returns\n     */\n    getUniformLocation(program, name) {\n        const { gl } = this;\n        return gl.getUniformLocation(program, name);\n    }\n    /**\n     * ```\n     * gl.enableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    enableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.enableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.disableVertexAttribArray(index);\n     * ```\n     *\n     * @param index\n     */\n    disableVertexAttribArray(index) {\n        const { gl } = this;\n        gl.disableVertexAttribArray(index);\n    }\n    /**\n     * ```\n     * gl.createShader(type);\n     * ```\n     *\n     * @param type\n     * @returns\n     */\n    createShader(type) {\n        const { gl } = this;\n        return gl.createShader(type);\n    }\n    /**\n     * ```\n     * gl.compileShader(shader);\n     * ```\n     *\n     * @param shader\n     * @returns\n     */\n    compileShader(shader) {\n        const { gl } = this;\n        gl.compileShader(shader);\n    }\n    /**\n     * ```\n     * gl.attachShader(program, shader);\n     * ```\n     *\n     * @param program\n     * @param shader\n     */\n    attachShader(program, shader) {\n        const { gl } = this;\n        gl.attachShader(program, shader);\n    }\n    /**\n     * ```\n     * gl.linkProgram(program);\n     * ```\n     *\n     * @param program\n     */\n    linkProgram(program) {\n        const { gl } = this;\n        gl.linkProgram(program);\n    }\n    /**\n     * ```\n     * gl.deleteProgram(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteProgram(shader) {\n        const { gl } = this;\n        gl.deleteProgram(shader);\n    }\n    /**\n     * ```\n     * gl.getShaderParameter(shader, pname);\n     * ```\n     *\n     * @param shader\n     * @param pname\n     */\n    getShaderParameter(shader, pname) {\n        const { gl } = this;\n        return gl.getShaderParameter(shader, pname);\n    }\n    /**\n     * ```\n     * gl.getShaderInfoLog(shader);\n     * ```\n     *\n     * @param shader\n     */\n    getShaderInfoLog(shader) {\n        const { gl } = this;\n        return gl.getShaderInfoLog(shader);\n    }\n    /**\n     * ```\n     * gl.createProgram();\n     * ```\n     *\n     * @returns\n     */\n    createProgram() {\n        const { gl } = this;\n        return gl.createProgram();\n    }\n    /**\n     * ```\n     * gl.getProgramParameter(program, pname);\n     * ```\n     *\n     * @param program\n     * @param pname\n     * @returns\n     */\n    getProgramParameter(program, pname) {\n        const { gl } = this;\n        return gl.getProgramParameter(program, pname);\n    }\n    /**\n     * ```\n     * gl.getProgramInfoLog(program);\n     * ```\n     *\n     * @param program\n     * @returns\n     */\n    getProgramInfoLog(program) {\n        const { gl } = this;\n        return gl.getProgramInfoLog(program);\n    }\n    /**\n     * ```\n     * gl.shaderSource(shader, source);\n     * ```\n     *\n     * @param shader\n     * @param source\n     */\n    shaderSource(shader, source) {\n        const { gl } = this;\n        gl.shaderSource(shader, source);\n    }\n    /**\n     * ```\n     * gl.deleteShader(shader);\n     * ```\n     *\n     * @param shader\n     */\n    deleteShader(shader) {\n        const { gl } = this;\n        gl.deleteShader(shader);\n    }\n}\n/**\n * Compare two arrays for equality.\n *\n * @remarks\n * This function will not try to compare nested arrays or Float32Arrays and\n * instead will always return false when they are encountered.\n *\n * @param a\n * @param b\n * @returns\n */\nexport function compareArrays(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((v, i) => {\n        // Don't bother to compare nested arrays or Float32Arrays\n        if (Array.isArray(v) || v instanceof Float32Array) {\n            return false;\n        }\n        else {\n            return v === b[i];\n        }\n    });\n}\n//# sourceMappingURL=WebGlContextWrapper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\nexport class RenderTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = RenderTexture.resolveDefaults(props || {});\n    }\n    get width() {\n        return this.props.width;\n    }\n    set width(value) {\n        this.props.width = value;\n    }\n    get height() {\n        return this.props.height;\n    }\n    set height(value) {\n        this.props.height = value;\n    }\n    async getTextureData() {\n        return {\n            data: null,\n            premultiplyAlpha: null,\n        };\n    }\n    static resolveDefaults(props) {\n        return {\n            width: props.width || 256,\n            height: props.height || 256,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=RenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2024 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy } from '../../../utils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nexport class WebGlCoreCtxRenderTexture extends WebGlCoreCtxTexture {\n    framebuffer;\n    constructor(glw, memManager, textureSource) {\n        super(glw, memManager, textureSource);\n        // Create Framebuffer object\n        const framebuffer = glw.createFramebuffer();\n        assertTruthy(framebuffer, 'Unable to create framebuffer');\n        this.framebuffer = framebuffer;\n    }\n    async onLoadRequest() {\n        const { glw, memManager } = this;\n        const nativeTexture = (this._nativeCtxTexture =\n            this.createNativeCtxTexture());\n        const { width, height } = this.textureSource;\n        // Set the dimensions of the render texture\n        glw.texImage2D(0, glw.RGBA, width, height, 0, glw.RGBA, glw.UNSIGNED_BYTE, null);\n        // Update the texture memory manager\n        memManager.setTextureMemUse(this, width * height * 4);\n        // Bind the framebuffer\n        glw.bindFramebuffer(this.framebuffer);\n        // Attach the texture to the framebuffer\n        glw.framebufferTexture2D(glw.COLOR_ATTACHMENT0, nativeTexture, 0);\n        // Unbind the framebuffer\n        glw.bindFramebuffer(null);\n        return {\n            width,\n            height,\n        };\n    }\n}\n//# sourceMappingURL=WebGlCoreCtxRenderTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {} from '../textures/Texture.js';\n/**\n * Tests if the given location is a compressed texture container\n * @param url\n * @remarks\n * This function is used to determine if the given image url is a compressed\n * and only supports the following extensions: .ktx and .pvr\n * @returns\n */\nexport function isCompressedTextureContainer(url) {\n    return /\\.(ktx|pvr)$/.test(url);\n}\n/**\n * Loads a compressed texture container\n * @param url\n * @returns\n */\nexport const loadCompressedTexture = async (url) => {\n    const response = await fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    if (url.indexOf('.ktx') !== -1) {\n        return loadKTXData(arrayBuffer);\n    }\n    return loadPVRData(arrayBuffer);\n};\n/**\n * Loads a KTX texture container and returns the texture data\n * @param buffer\n * @returns\n */\nconst loadKTXData = async (buffer) => {\n    const view = new DataView(buffer);\n    const littleEndian = view.getUint32(12) === 16909060 ? true : false;\n    const mipmaps = [];\n    const data = {\n        glInternalFormat: view.getUint32(28, littleEndian),\n        pixelWidth: view.getUint32(36, littleEndian),\n        pixelHeight: view.getUint32(40, littleEndian),\n        numberOfMipmapLevels: view.getUint32(56, littleEndian),\n        bytesOfKeyValueData: view.getUint32(60, littleEndian),\n    };\n    let offset = 64;\n    // Key Value Pairs of data start at byte offset 64\n    // But the only known kvp is the API version, so skipping parsing.\n    offset += data.bytesOfKeyValueData;\n    for (let i = 0; i < data.numberOfMipmapLevels; i++) {\n        const imageSize = view.getUint32(offset);\n        offset += 4;\n        mipmaps.push(view.buffer.slice(offset, imageSize));\n        offset += imageSize;\n    }\n    return {\n        data: {\n            glInternalFormat: data.glInternalFormat,\n            mipmaps,\n            width: data.pixelWidth || 0,\n            height: data.pixelHeight || 0,\n            type: 'ktx',\n        },\n        premultiplyAlpha: false,\n    };\n};\n/**\n * Loads a PVR texture container and returns the texture data\n * @param buffer\n * @returns\n */\nconst loadPVRData = async (buffer) => {\n    // pvr header length in 32 bits\n    const pvrHeaderLength = 13;\n    // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n    const pvrFormatEtc1 = 0x8d64;\n    const pvrWidth = 7;\n    const pvrHeight = 6;\n    const pvrMipmapCount = 11;\n    const pvrMetadata = 12;\n    const arrayBuffer = buffer;\n    const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n    // @ts-expect-error Object possibly undefined\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n    const dataOffset = header[pvrMetadata] + 52;\n    const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n    const mipmaps = [];\n    const data = {\n        pixelWidth: header[pvrWidth],\n        pixelHeight: header[pvrHeight],\n        numberOfMipmapLevels: header[pvrMipmapCount] || 0,\n    };\n    let offset = 0;\n    let width = data.pixelWidth || 0;\n    let height = data.pixelHeight || 0;\n    for (let i = 0; i < data.numberOfMipmapLevels; i++) {\n        const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n        const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n        mipmaps.push(view);\n        offset += level;\n        width = width >> 1;\n        height = height >> 1;\n    }\n    return {\n        data: {\n            glInternalFormat: pvrFormatEtc1,\n            mipmaps: mipmaps,\n            width: data.pixelWidth || 0,\n            height: data.pixelHeight || 0,\n            type: 'pvr',\n        },\n        premultiplyAlpha: false,\n    };\n};\n//# sourceMappingURL=textureCompression.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Texture } from './Texture.js';\nimport { isCompressedTextureContainer, loadCompressedTexture, } from '../lib/textureCompression.js';\nimport { convertUrlToAbsolute } from '../lib/utils.js';\n/**\n * Texture consisting of an image loaded from a URL\n *\n * @remarks\n * The ImageTexture's {@link ImageTextureProps.src} prop defines the image URL\n * to be downloaded.\n *\n * By default, the texture's alpha values will be premultiplied into its color\n * values which is generally the desired setting before they are sent to the\n * texture's associated {@link Shader}. However, in special cases you may want\n * the Shader to receive straight (non-premultiplied) values. In that case you\n * can disable the default behavior by setting the\n * {@link ImageTextureProps.premultiplyAlpha} prop to `false`.\n */\nexport class ImageTexture extends Texture {\n    props;\n    constructor(txManager, props) {\n        super(txManager);\n        this.props = ImageTexture.resolveDefaults(props);\n    }\n    hasAlphaChannel(mimeType) {\n        return mimeType.indexOf('image/png') !== -1;\n    }\n    async getTextureData() {\n        const { src, premultiplyAlpha } = this.props;\n        if (!src) {\n            return {\n                data: null,\n            };\n        }\n        if (typeof src !== 'string') {\n            if (src instanceof ImageData) {\n                return {\n                    data: src,\n                    premultiplyAlpha,\n                };\n            }\n            return {\n                data: src(),\n                premultiplyAlpha,\n            };\n        }\n        // Handle compressed textures\n        if (isCompressedTextureContainer(src)) {\n            return loadCompressedTexture(src);\n        }\n        // Convert relative URL to absolute URL\n        const absoluteSrc = convertUrlToAbsolute(src);\n        if (this.txManager.imageWorkerManager) {\n            return await this.txManager.imageWorkerManager.getImage(absoluteSrc, premultiplyAlpha);\n        }\n        else if (this.txManager.hasCreateImageBitmap) {\n            const response = await fetch(absoluteSrc);\n            const blob = await response.blob();\n            const hasAlphaChannel = premultiplyAlpha ?? this.hasAlphaChannel(blob.type);\n            return {\n                data: await createImageBitmap(blob, {\n                    premultiplyAlpha: hasAlphaChannel ? 'premultiply' : 'none',\n                    colorSpaceConversion: 'none',\n                    imageOrientation: 'none',\n                }),\n                premultiplyAlpha: hasAlphaChannel,\n            };\n        }\n        else {\n            const img = new Image();\n            if (!(src.substr(0, 5) === 'data:')) {\n                img.crossOrigin = 'Anonymous';\n            }\n            img.src = absoluteSrc;\n            await new Promise((resolve, reject) => {\n                img.onload = () => resolve();\n                img.onerror = () => reject(new Error(`Failed to load image`));\n            }).catch((e) => {\n                console.error(e);\n            });\n            return {\n                data: img,\n                premultiplyAlpha: premultiplyAlpha ?? true,\n            };\n        }\n    }\n    static makeCacheKey(props) {\n        const resolvedProps = ImageTexture.resolveDefaults(props);\n        // Only cache key-able textures; prioritise key\n        const key = resolvedProps.key || resolvedProps.src;\n        if (typeof key !== 'string') {\n            return false;\n        }\n        return `ImageTexture,${key},${resolvedProps.premultiplyAlpha ?? 'true'}`;\n    }\n    static resolveDefaults(props) {\n        return {\n            src: props.src ?? '',\n            premultiplyAlpha: props.premultiplyAlpha ?? true,\n            key: props.key ?? null,\n        };\n    }\n    static z$__type__Props;\n}\n//# sourceMappingURL=ImageTexture.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assertTruthy, createWebGLContext, hasOwn } from '../../../utils.js';\nimport { CoreRenderer, } from '../CoreRenderer.js';\nimport { WebGlCoreRenderOp } from './WebGlCoreRenderOp.js';\nimport { createIndexBuffer, getWebGlParameters, getWebGlExtensions, } from './internal/RendererUtils.js';\nimport { WebGlCoreCtxTexture } from './WebGlCoreCtxTexture.js';\nimport { Texture } from '../../textures/Texture.js';\nimport { ColorTexture } from '../../textures/ColorTexture.js';\nimport { SubTexture } from '../../textures/SubTexture.js';\nimport { WebGlCoreCtxSubTexture } from './WebGlCoreCtxSubTexture.js';\nimport { CoreShaderManager } from '../../CoreShaderManager.js';\nimport { BufferCollection } from './internal/BufferCollection.js';\nimport { compareRect, getNormalizedRgbaComponents, } from '../../lib/utils.js';\nimport { WebGlCoreShader } from './WebGlCoreShader.js';\nimport { WebGlContextWrapper } from '../../lib/WebGlContextWrapper.js';\nimport { RenderTexture } from '../../textures/RenderTexture.js';\nimport { WebGlCoreCtxRenderTexture } from './WebGlCoreCtxRenderTexture.js';\nimport { ImageTexture } from '../../textures/ImageTexture.js';\nconst WORDS_PER_QUAD = 24;\nexport class WebGlCoreRenderer extends CoreRenderer {\n    //// WebGL Native Context and Data\n    glw;\n    system;\n    //// Persistent data\n    quadBuffer = new ArrayBuffer(1024 * 1024 * 4);\n    fQuadBuffer = new Float32Array(this.quadBuffer);\n    uiQuadBuffer = new Uint32Array(this.quadBuffer);\n    renderOps = [];\n    //// Render Op / Buffer Filling State\n    curBufferIdx = 0;\n    curRenderOp = null;\n    rttNodes = [];\n    activeRttNode = null;\n    //// Default Shader\n    defaultShader;\n    quadBufferCollection;\n    /**\n     * White pixel texture used by default when no texture is specified.\n     */\n    defaultTexture;\n    /**\n     * Whether the renderer is currently rendering to a texture.\n     */\n    renderToTextureActive = false;\n    constructor(options) {\n        super(options);\n        this.mode = 'webgl';\n        const { canvas, clearColor, bufferMemory } = options;\n        this.defaultTexture = new ColorTexture(this.txManager);\n        // Mark the default texture as ALWAYS renderable\n        // This prevents it from ever being garbage collected.\n        // Fixes https://github.com/lightning-js/renderer/issues/262\n        this.defaultTexture.setRenderableOwner(this, true);\n        // When the default texture is loaded, request a render in case the\n        // RAF is paused. Fixes: https://github.com/lightning-js/renderer/issues/123\n        this.defaultTexture.once('loaded', () => {\n            this.stage.requestRender();\n        });\n        const gl = createWebGLContext(canvas, options.contextSpy);\n        const glw = (this.glw = new WebGlContextWrapper(gl));\n        const color = getNormalizedRgbaComponents(clearColor);\n        glw.viewport(0, 0, canvas.width, canvas.height);\n        glw.clearColor(color[0], color[1], color[2], color[3]);\n        glw.setBlend(true);\n        glw.blendFunc(glw.ONE, glw.ONE_MINUS_SRC_ALPHA);\n        createIndexBuffer(glw, bufferMemory);\n        this.system = {\n            parameters: getWebGlParameters(this.glw),\n            extensions: getWebGlExtensions(this.glw),\n        };\n        this.shManager.renderer = this;\n        this.defaultShader = this.shManager.loadShader('DefaultShader').shader;\n        const quadBuffer = glw.createBuffer();\n        assertTruthy(quadBuffer);\n        const stride = 6 * Float32Array.BYTES_PER_ELEMENT;\n        this.quadBufferCollection = new BufferCollection([\n            {\n                buffer: quadBuffer,\n                attributes: {\n                    a_position: {\n                        name: 'a_position',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 0, // start at the beginning of the buffer\n                    },\n                    a_textureCoordinate: {\n                        name: 'a_textureCoordinate',\n                        size: 2,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 2 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_color: {\n                        name: 'a_color',\n                        size: 4,\n                        type: glw.UNSIGNED_BYTE,\n                        normalized: true,\n                        stride,\n                        offset: 4 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                    a_textureIndex: {\n                        name: 'a_textureIndex',\n                        size: 1,\n                        type: glw.FLOAT,\n                        normalized: false,\n                        stride,\n                        offset: 5 * Float32Array.BYTES_PER_ELEMENT,\n                    },\n                },\n            },\n        ]);\n    }\n    reset() {\n        const { glw } = this;\n        this.curBufferIdx = 0;\n        this.curRenderOp = null;\n        this.renderOps.length = 0;\n        glw.setScissorTest(false);\n        glw.clear();\n    }\n    getShaderManager() {\n        return this.shManager;\n    }\n    createCtxTexture(textureSource) {\n        if (textureSource instanceof SubTexture) {\n            return new WebGlCoreCtxSubTexture(this.glw, this.txMemManager, textureSource);\n        }\n        else if (textureSource instanceof RenderTexture) {\n            return new WebGlCoreCtxRenderTexture(this.glw, this.txMemManager, textureSource);\n        }\n        return new WebGlCoreCtxTexture(this.glw, this.txMemManager, textureSource);\n    }\n    /**\n     * This function adds a quad (a rectangle composed of two triangles) to the WebGL rendering pipeline.\n     *\n     * It takes a set of options that define the quad's properties, such as its dimensions, colors, texture, shader, and transformation matrix.\n     * The function first updates the shader properties with the current dimensions if necessary, then sets the default texture if none is provided.\n     * It then checks if a new render operation is needed, based on the current shader and clipping rectangle.\n     * If a new render operation is needed, it creates one and updates the current render operation.\n     * The function then adjusts the texture coordinates based on the texture options and adds the texture to the texture manager.\n     *\n     * Finally, it calculates the vertices for the quad, taking into account any transformations, and adds them to the quad buffer.\n     * The function updates the length and number of quads in the current render operation, and updates the current buffer index.\n     */\n    addQuad(params) {\n        const { fQuadBuffer, uiQuadBuffer } = this;\n        const { width, height, colorTl, colorTr, colorBl, colorBr, textureOptions, shader, shaderProps, alpha, clippingRect, tx, ty, ta, tb, tc, td, rtt: renderToTexture, parentHasRenderTexture, framebufferDimensions, } = params;\n        let { texture } = params;\n        /**\n         * If the shader props contain any automatic properties, update it with the\n         * current dimensions that will be used to render the quad.\n         */\n        if (shaderProps && hasOwn(shaderProps, '$dimensions')) {\n            const dimensions = shaderProps.$dimensions;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            dimensions.width = width;\n            dimensions.height = height;\n        }\n        texture = texture ?? this.defaultTexture;\n        assertTruthy(texture instanceof Texture, 'Invalid texture type');\n        let { curBufferIdx: bufferIdx, curRenderOp } = this;\n        const targetDims = {\n            width,\n            height,\n        };\n        const targetShader = shader || this.defaultShader;\n        assertTruthy(targetShader instanceof WebGlCoreShader);\n        if (!this.reuseRenderOp(params)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.newRenderOp(targetShader, shaderProps, alpha, targetDims, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions);\n            curRenderOp = this.curRenderOp;\n            assertTruthy(curRenderOp);\n        }\n        const flipX = textureOptions?.flipX ?? false;\n        const flipY = textureOptions?.flipY ?? false;\n        let texCoordX1 = 0;\n        let texCoordY1 = 0;\n        let texCoordX2 = 1;\n        let texCoordY2 = 1;\n        if (texture instanceof SubTexture) {\n            const { x: tx, y: ty, width: tw, height: th } = texture.props;\n            const { width: parentW = 0, height: parentH = 0 } = texture.parentTexture\n                .dimensions || { width: 0, height: 0 };\n            texCoordX1 = tx / parentW;\n            texCoordX2 = texCoordX1 + tw / parentW;\n            texCoordY1 = ty / parentH;\n            texCoordY2 = texCoordY1 + th / parentH;\n            texture = texture.parentTexture;\n        }\n        const resizeMode = textureOptions?.resizeMode ?? false;\n        if (texture instanceof ImageTexture) {\n            if (resizeMode && texture.dimensions) {\n                const { width: tw, height: th } = texture.dimensions;\n                if (resizeMode.type === 'cover') {\n                    const scaleX = width / tw;\n                    const scaleY = height / th;\n                    const scale = Math.max(scaleX, scaleY);\n                    const precision = 1 / scale;\n                    // Determine based on width\n                    if (scale && scaleX && scaleX < scale) {\n                        const desiredSize = precision * width;\n                        texCoordX1 = (1 - desiredSize / tw) * (resizeMode.clipX ?? 0.5);\n                        texCoordX2 = texCoordX1 + desiredSize / tw;\n                    }\n                    // Determine based on height\n                    if (scale && scaleY && scaleY < scale) {\n                        const desiredSize = precision * height;\n                        texCoordY1 = (1 - desiredSize / th) * (resizeMode.clipY ?? 0.5);\n                        texCoordY2 = texCoordY1 + desiredSize / th;\n                    }\n                }\n            }\n        }\n        // Flip texture coordinates if dictated by texture options\n        if (flipX) {\n            [texCoordX1, texCoordX2] = [texCoordX2, texCoordX1];\n        }\n        if (flipY) {\n            [texCoordY1, texCoordY2] = [texCoordY2, texCoordY1];\n        }\n        const { txManager } = this.stage;\n        const ctxTexture = txManager.getCtxTexture(texture);\n        assertTruthy(ctxTexture instanceof WebGlCoreCtxTexture);\n        const textureIdx = this.addTexture(ctxTexture, bufferIdx);\n        curRenderOp = this.curRenderOp;\n        assertTruthy(curRenderOp);\n        // render quad advanced\n        if (tb !== 0 || tc !== 0) {\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta;\n            fQuadBuffer[bufferIdx++] = ty + width * tc;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = tx + width * ta + height * tb;\n            fQuadBuffer[bufferIdx++] = ty + width * tc + height * td;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        else {\n            // Calculate the right corner of the quad\n            // multiplied by the scale\n            const rightCornerX = tx + width * ta;\n            const rightCornerY = ty + height * td;\n            // Upper-Left\n            fQuadBuffer[bufferIdx++] = tx; // vertexX\n            fQuadBuffer[bufferIdx++] = ty; // vertexY\n            fQuadBuffer[bufferIdx++] = texCoordX1; // texCoordX\n            fQuadBuffer[bufferIdx++] = texCoordY1; // texCoordY\n            uiQuadBuffer[bufferIdx++] = colorTl; // color\n            fQuadBuffer[bufferIdx++] = textureIdx; // texIndex\n            // Upper-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = ty;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY1;\n            uiQuadBuffer[bufferIdx++] = colorTr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Left\n            fQuadBuffer[bufferIdx++] = tx;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX1;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBl;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n            // Lower-Right\n            fQuadBuffer[bufferIdx++] = rightCornerX;\n            fQuadBuffer[bufferIdx++] = rightCornerY;\n            fQuadBuffer[bufferIdx++] = texCoordX2;\n            fQuadBuffer[bufferIdx++] = texCoordY2;\n            uiQuadBuffer[bufferIdx++] = colorBr;\n            fQuadBuffer[bufferIdx++] = textureIdx;\n        }\n        // Update the length of the current render op\n        curRenderOp.length += WORDS_PER_QUAD;\n        curRenderOp.numQuads++;\n        this.curBufferIdx = bufferIdx;\n    }\n    /**\n     * Replace the existing RenderOp with a new one that uses the specified Shader\n     * and starts at the specified buffer index.\n     *\n     * @param shader\n     * @param bufferIdx\n     */\n    newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx, renderToTexture, parentHasRenderTexture, framebufferDimensions) {\n        const curRenderOp = new WebGlCoreRenderOp(this.glw, this.options, this.quadBufferCollection, shader, shaderProps, alpha, clippingRect, dimensions, bufferIdx, 0, // Z-Index is only used for explictly added Render Ops\n        renderToTexture, parentHasRenderTexture, framebufferDimensions);\n        this.curRenderOp = curRenderOp;\n        this.renderOps.push(curRenderOp);\n    }\n    /**\n     * Add a texture to the current RenderOp. If the texture cannot be added to the\n     * current RenderOp, a new RenderOp will be created and the texture will be added\n     * to that one.\n     *\n     * If the texture cannot be added to the new RenderOp, an error will be thrown.\n     *\n     * @param texture\n     * @param bufferIdx\n     * @param recursive\n     * @returns Assigned Texture Index of the texture in the render op\n     */\n    addTexture(texture, bufferIdx, recursive) {\n        const { curRenderOp } = this;\n        assertTruthy(curRenderOp);\n        const textureIdx = curRenderOp.addTexture(texture);\n        // TODO: Refactor to be more DRY\n        if (textureIdx === 0xffffffff) {\n            if (recursive) {\n                throw new Error('Unable to add texture to render op');\n            }\n            const { shader, shaderProps, dimensions, clippingRect, alpha } = curRenderOp;\n            this.newRenderOp(shader, shaderProps, alpha, dimensions, clippingRect, bufferIdx);\n            return this.addTexture(texture, bufferIdx, true);\n        }\n        return textureIdx;\n    }\n    /**\n     * Test if the current Render operation can be reused for the specified parameters.\n     * @param params\n     * @returns\n     */\n    reuseRenderOp(params) {\n        const { shader, shaderProps, parentHasRenderTexture, rtt, clippingRect } = params;\n        const targetShader = shader || this.defaultShader;\n        // Switching shader program will require a new render operation\n        if (this.curRenderOp?.shader !== targetShader) {\n            return false;\n        }\n        // Switching clipping rect will require a new render operation\n        if (!compareRect(this.curRenderOp.clippingRect, clippingRect)) {\n            return false;\n        }\n        // Force new render operation if rendering to texture\n        // @todo: This needs to be improved, render operations could also be reused\n        // for rendering to texture\n        if (parentHasRenderTexture || rtt) {\n            return false;\n        }\n        // Check if the shader can batch the shader properties\n        if (this.curRenderOp.shader !== this.defaultShader &&\n            (!shaderProps ||\n                !this.curRenderOp.shader.canBatchShaderProps(this.curRenderOp.shaderProps, shaderProps))) {\n            return false;\n        }\n        // Render operation can be reused\n        return true;\n    }\n    /**\n     * add RenderOp to the render pipeline\n     */\n    addRenderOp(renderable) {\n        this.renderOps.push(renderable);\n        this.curRenderOp = null;\n    }\n    /**\n     * Render the current set of RenderOps to render to the specified surface.\n     *\n     * TODO: 'screen' is the only supported surface at the moment.\n     *\n     * @param surface\n     */\n    render(surface = 'screen') {\n        const { glw, quadBuffer } = this;\n        const arr = new Float32Array(quadBuffer, 0, this.curBufferIdx);\n        const buffer = this.quadBufferCollection.getBuffer('a_position') ?? null;\n        glw.arrayBufferData(buffer, arr, glw.STATIC_DRAW);\n        const doLog = false; // idx++ % 100 === 0;\n        if (doLog) {\n            console.log('renderOps', this.renderOps.length);\n        }\n        this.renderOps.forEach((renderOp, i) => {\n            if (doLog) {\n                console.log('Quads per operation', renderOp.numQuads);\n            }\n            renderOp.draw();\n        });\n    }\n    renderToTexture(node) {\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            if (this.rttNodes[i] === node) {\n                return;\n            }\n        }\n        // @todo: Better bottom up rendering order\n        this.rttNodes.unshift(node);\n    }\n    renderRTTNodes() {\n        const { glw } = this;\n        const { txManager } = this.stage;\n        // Render all associated RTT nodes to their textures\n        for (let i = 0; i < this.rttNodes.length; i++) {\n            const node = this.rttNodes[i];\n            // Skip nodes that don't have RTT updates\n            if (!node || !node.hasRTTupdates) {\n                continue;\n            }\n            // Set the active RTT node to the current node\n            // So we can prevent rendering children of nested RTT nodes\n            this.activeRttNode = node;\n            assertTruthy(node.texture, 'RTT node missing texture');\n            const ctxTexture = txManager.getCtxTexture(node.texture);\n            assertTruthy(ctxTexture instanceof WebGlCoreCtxRenderTexture);\n            this.renderToTextureActive = true;\n            // Bind the the texture's framebuffer\n            glw.bindFramebuffer(ctxTexture.framebuffer);\n            glw.viewport(0, 0, ctxTexture.w, ctxTexture.h);\n            glw.clear();\n            // Render all associated quads to the texture\n            for (let i = 0; i < node.children.length; i++) {\n                const child = node.children[i];\n                if (!child) {\n                    continue;\n                }\n                child.update(this.stage.deltaTime, {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                    valid: false,\n                });\n                this.stage.addQuads(child);\n                child.hasRTTupdates = false;\n            }\n            // Render all associated quads to the texture\n            this.render();\n            // Reset render operations\n            this.renderOps.length = 0;\n            node.hasRTTupdates = false;\n        }\n        // Bind the default framebuffer\n        glw.bindFramebuffer(null);\n        glw.viewport(0, 0, this.glw.canvas.width, this.glw.canvas.height);\n        this.renderToTextureActive = false;\n    }\n    removeRTTNode(node) {\n        const index = this.rttNodes.indexOf(node);\n        if (index === -1) {\n            return;\n        }\n        this.rttNodes.splice(index, 1);\n    }\n}\n//# sourceMappingURL=WebGlCoreRenderer.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const SpecialCodepoints = {\n    LINE_FEED: 0x0a,\n    CARRIAGE_RETURN: 0x0d,\n    SPACE: 0x20,\n    TAB: 0x09,\n    ZERO_WIDTH_SPACE: 0x200b,\n    ZERO_WIDTH_NON_JOINER: 0x200c,\n    ZERO_WIDTH_JOINER: 0x200d,\n    LEFT_TO_RIGHT_MARK: 0x200e,\n    RIGHT_TO_LEFT_MARK: 0x200f,\n    LEFT_TO_RIGHT_EMBEDDING: 0x202a,\n    RIGHT_TO_LEFT_EMBEDDING: 0x202b,\n    POP_DIRECTIONAL_FORMATTING: 0x202c,\n    LEFT_TO_RIGHT_OVERRIDE: 0x202d,\n    RIGHT_TO_LEFT_OVERRIDE: 0x202e,\n    LINE_SEPARATOR: 0x2028,\n    PARAGRAPH_SEPARATOR: 0x2029,\n    OBJECT_REPLACEMENT_CHARACTER: 0xfffc,\n    REPLACEMENT_CHARACTER: 0xfffd,\n    ZERO_WIDTH_NO_BREAK_SPACE: 0xfeff,\n    LEFT_TO_RIGHT_ISOLATE: 0x2066,\n    RIGHT_TO_LEFT_ISOLATE: 0x2067,\n    FIRST_STRONG_ISOLATE: 0x2068,\n    POP_DIRECTIONAL_ISOLATE: 0x2069,\n    INHIBIT_SYMMETRIC_SWAPPING: 0x206a,\n    ACTIVATE_SYMMETRIC_SWAPPING: 0x206b,\n    INHIBIT_ARABIC_FORM_SHAPING: 0x206c,\n    ACTIVATE_ARABIC_FORM_SHAPING: 0x206d,\n    NATIONAL_DIGIT_SHAPES: 0x206e,\n    NOMINAL_DIGIT_SHAPES: 0x206f,\n    LEFT_TO_RIGHT_BOUNDARY: 0x200e,\n    RIGHT_TO_LEFT_BOUNDARY: 0x200f,\n};\n//# sourceMappingURL=SpecialCodepoints.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class FontShaper {\n}\n//# sourceMappingURL=FontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SpecialCodepoints } from '../../../renderers/SdfTextRenderer/internal/SpecialCodepoints.js';\nimport { FontShaper, } from './FontShaper.js';\nexport class SdfFontShaper extends FontShaper {\n    data;\n    glyphMap;\n    kernings;\n    constructor(data, glyphMap) {\n        super();\n        this.data = data;\n        this.glyphMap = glyphMap;\n        const kernings = (this.kernings = {});\n        data.kernings.forEach((kerning) => {\n            const second = kerning.second;\n            const firsts = (kernings[second] = kernings[second] || {});\n            firsts[kerning.first] = kerning.amount;\n        });\n        this.kernings = kernings;\n    }\n    *shapeText(props, codepoints) {\n        let codepointResult;\n        let lastGlyphId = undefined;\n        while ((codepointResult = codepoints.peek()) && !codepointResult.done) {\n            const codepoint = codepointResult.value;\n            const glyph = this.glyphMap.get(codepoint);\n            codepoints.next();\n            if (glyph !== undefined) {\n                // We found a glyph for this codepoint\n                // Yield the mapped glyph info\n                /**\n                 * Kerning includes any possible additional letter spacing\n                 */\n                const kerning = lastGlyphId !== undefined\n                    ? (this.kernings[glyph.id]?.[lastGlyphId] || 0) +\n                        props.letterSpacing\n                    : 0;\n                lastGlyphId = glyph.id;\n                yield {\n                    mapped: true,\n                    glyphId: glyph.id,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                    xAdvance: glyph.xadvance + kerning,\n                    yAdvance: 0,\n                    xOffset: glyph.xoffset + kerning,\n                    yOffset: glyph.yoffset,\n                    xBearing: 0,\n                    yBearing: 0,\n                    width: glyph.width,\n                    height: glyph.height,\n                };\n            }\n            else {\n                // We didn't find a glyph for this codepoint\n                // Yield the unmapped codepoint info\n                // If this codepoint is a linebreak, we should reset the last glyph id\n                // so that the next glyph will not be kerned with the last glyph of the\n                // previous line.\n                if (codepoint === SpecialCodepoints.LINE_FEED) {\n                    lastGlyphId = undefined;\n                }\n                yield {\n                    mapped: false,\n                    codepoint,\n                    cluster: codepoints.lastIndex,\n                };\n            }\n        }\n    }\n}\n//# sourceMappingURL=SdfFontShaper.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// import type { Renderer } from '../../../Renderer';\nimport { assertTruthy } from '../../../../utils.js';\nimport { WebGlCoreRenderer } from '../../../renderers/webgl/WebGlCoreRenderer.js';\nimport { ImageTexture } from '../../../textures/ImageTexture.js';\nimport { TrFontFace, } from '../TrFontFace.js';\nimport { SdfFontShaper } from './internal/SdfFontShaper.js';\nexport class SdfTrFontFace extends TrFontFace {\n    type;\n    texture;\n    /**\n     * Height of the tallest character in the font including the whitespace above it\n     * in SDF/vertex units.\n     */\n    maxCharHeight = 0;\n    data;\n    shaper;\n    glyphMap = new Map();\n    constructor(type, options) {\n        super(options);\n        const { atlasUrl, atlasDataUrl, stage } = options;\n        this.type = type;\n        const renderer = stage.renderer;\n        assertTruthy(renderer instanceof WebGlCoreRenderer, 'SDF Font Faces can only be used with the WebGL Renderer');\n        this.texture = stage.txManager.loadTexture('ImageTexture', {\n            src: atlasUrl,\n            // IMPORTANT: The SDF shader requires the alpha channel to NOT be\n            // premultiplied on the atlas texture. If it is premultiplied, the\n            // rendering of SDF glyphs (especially single-channel SDF fonts) will\n            // be very jagged.\n            premultiplyAlpha: false,\n        }, {\n            preload: true,\n        });\n        this.texture.on('loaded', () => {\n            this.checkLoaded();\n        });\n        // Set this.data to the fetched data from dataUrl\n        fetch(atlasDataUrl)\n            .then(async (response) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.data = await response.json();\n            assertTruthy(this.data);\n            // Add all the glyphs to the glyph map\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let maxCharHeight = 0;\n            this.data.chars.forEach((glyph) => {\n                this.glyphMap.set(glyph.id, glyph);\n                const charHeight = glyph.yoffset + glyph.height;\n                if (charHeight > maxCharHeight) {\n                    maxCharHeight = charHeight;\n                }\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            this.maxCharHeight = maxCharHeight;\n            // We know `data` is defined here, because we just set it\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.shaper = new SdfFontShaper(this.data, this.glyphMap);\n            // If the metrics aren't provided explicitly in the font face options,\n            // Gather them from the metrics added by the msdf-generator tool ()\n            // If they are missing then we throw an error.\n            if (!this.metrics) {\n                if (this.data?.lightningMetrics) {\n                    const { ascender, descender, lineGap, unitsPerEm } = this.data.lightningMetrics;\n                    this.metrics = {\n                        ascender: ascender / unitsPerEm,\n                        descender: descender / unitsPerEm,\n                        lineGap: lineGap / unitsPerEm,\n                    };\n                }\n                else {\n                    throw new Error(`Font metrics not found in ${this.type} font ${this.fontFamily}. ` +\n                        'Make sure you are using the latest version of the Lightning ' +\n                        '3 `msdf-generator` tool to generate your SDF fonts.');\n                }\n            }\n            this.checkLoaded();\n        })\n            .catch(console.error);\n    }\n    getAtlasEntry(glyphId) {\n        const glyph = this.glyphMap.get(glyphId);\n        if (glyph === undefined) {\n            throw new Error(`Glyph ${glyphId} not found in font ${this.fontFamily}`);\n        }\n        return {\n            x: glyph.x,\n            y: glyph.y,\n            width: glyph.width,\n            height: glyph.height,\n        };\n    }\n    checkLoaded() {\n        if (this.loaded)\n            return;\n        if (this.texture.state === 'loaded' && this.data) {\n            this.loaded = true;\n            this.emit('loaded');\n        }\n    }\n}\n//# sourceMappingURL=SdfTrFontFace.js.map","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class for Core extensions.\n *\n * @remarks\n * Core extensions are used to extend the Core Renderer with custom code such as\n * custom fonts, custom shaders, custom textures, custom animation functions,\n * and more.\n */\nexport class CoreExtension {\n}\n//# sourceMappingURL=CoreExtension.js.map"],"names":["createWebGLContext","canvas","contextSpy","config","gl","target","prop","value","assertTruthy","condition","message","isProductionEnvironment","mergeColorProgress","rgba1","rgba2","p","r1","g1","b1","a1","r2","g2","b2","a2","r","g","b","a","mergeColorAlpha","rgba","alpha","premultiplyRGB","setPremultiplyMode","mode","mergeColorAlphaPremultiplied","flipEndianess","newAlpha","rgbAlpha","hasOwn","obj","define_import_meta_env_default","EventEmitter","__publicField","event","listener","listeners","index","onceListener","data","CoreShader","props","createShader","glw","type","source","shader","createProgram","vertexShader","fragmentShader","program","isWebGl2","WebGlCoreShader","options","renderer","webGl2","requiredExtensions","glVersion","extensionName","shaderSources","textureUnits","vertexSource","fragmentSource","vao","attributeName","location","buffer","uniform","attribute","loc","propsA","propsB","renderOp","parentHasRenderTexture","renderToTexture","width","height","dimensions","name","resolvedBuffer","resolvedInfo","textures","Texture","txManager","owner","renderable","state","args","loadedArgs","failedArgs","PROTOCOL_REGEX","getNormalizedRgbaComponents","getRgbaComponents","getNormalizedAlphaComponent","getRgbaString","color","createBound","x1","y1","x2","y2","out","intersectBound","intersection","boundsOverlap","convertBoundToRect","bound","intersectRect","x","y","copyRect","compareRect","boundInsideBound","bound1","bound2","isBoundPositive","convertUrlToAbsolute","url","path","basePath","baseUrl","TrFontFace","fontFamily","descriptors","metrics","_ColorTexture","pixelData32","pixelData8","ColorTexture","CoreContextTexture","memManager","textureSource","CoreRenderer","CoreRenderOp","WebGlCoreRenderOp","buffers","shaderProps","clippingRect","bufferIdx","zIndex","framebufferDimensions","texture","maxTextures","existingIdx","t","newIdx","shManager","quadIdx","pixelRatio","canvasHeight","clipX","clipWidth","clipHeight","clipY","getWebGlParameters","params","key","getWebGlExtensions","extensions","createIndexBuffer","size","maxQuads","indices","j","isHTMLImageElement","isPowerOfTwo","getTimingBezier","c","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","timingMapping","timingLookup","defaultTiming","parseCubicBezier","str","regex","match","num1","num2","num3","num4","timing","getTimingFunction","i","TRANSPARENT_TEXTURE_DATA","WebGlCoreCtxTexture","err","textureData","_a","mipmaps","glInternalFormat","view","nativeTexture","_SubTexture","error","parentTx","SubTexture","WebGlCoreCtxSubTexture","_b","BufferCollection","item","WebGlContextWrapper","maxTextureUnits","_","scissorBox","textureUnit","activeTextureUnit","texture2dUnits","pname","param","texture2dParams","activeTexture","textureParams","level","internalFormat","widthOrFormat","heightOrType","borderOrSource","format","pixels","internalformat","border","red","green","blue","enable","scissorEnabled","scissorX","scissorY","scissorWidth","scissorHeight","blend","blendEnabled","src","dst","blendSrcRgb","blendDstRgb","blendSrcAlpha","blendDstAlpha","framebuffer","attachment","usage","boundArrayBuffer","boundElementArrayBuffer","normalized","stride","offset","curProgram","programUniforms","uniforms","uniformArgs","compareArrays","count","vertexArray","v","_RenderTexture","RenderTexture","WebGlCoreCtxRenderTexture","isCompressedTextureContainer","loadCompressedTexture","arrayBuffer","loadKTXData","loadPVRData","littleEndian","imageSize","header","dataOffset","pvrtcData","_ImageTexture","mimeType","premultiplyAlpha","absoluteSrc","blob","hasAlphaChannel","img","resolve","reject","e","resolvedProps","ImageTexture","WORDS_PER_QUAD","WebGlCoreRenderer","clearColor","bufferMemory","quadBuffer","fQuadBuffer","uiQuadBuffer","colorTl","colorTr","colorBl","colorBr","textureOptions","tx","ty","ta","tb","tc","td","curRenderOp","targetDims","targetShader","flipX","flipY","texCoordX1","texCoordY1","texCoordX2","texCoordY2","tw","th","parentW","parentH","resizeMode","scaleX","scaleY","scale","precision","desiredSize","ctxTexture","textureIdx","rightCornerX","rightCornerY","recursive","rtt","surface","arr","node","child","SpecialCodepoints","FontShaper","SdfFontShaper","glyphMap","kernings","kerning","second","firsts","codepoints","codepointResult","lastGlyphId","codepoint","glyph","SdfTrFontFace","atlasUrl","atlasDataUrl","stage","response","maxCharHeight","charHeight","ascender","descender","lineGap","unitsPerEm","glyphId","CoreExtension"],"mappings":"mPAkBgB,SAAAA,GAAmBC,EAAQC,EAAY,CACnD,MAAMC,EAAS,CACX,MAAO,GACP,UAAW,GACX,MAAO,GACP,QAAS,GACT,eAAgB,GAGhB,gBAAiB,mBACjB,mBAAoB,GACpB,sBAAuB,EAAA,EAErBC,EAGLH,EAAO,WAAW,QAASE,CAAM,GAC9BF,EAAO,WAAW,qBAAsBE,CAAM,EAClD,GAAI,CAACC,EACK,MAAA,IAAI,MAAM,gCAAgC,EAEpD,OAAIF,EAEO,IAAI,MAAME,EAAI,CACjB,IAAIC,EAAQC,EAAM,CACR,MAAAC,EAAQF,EAAOC,CAAI,EACrB,OAAA,OAAOC,GAAU,YACNL,EAAA,UAAU,OAAOI,CAAI,CAAC,EAC1BC,EAAM,KAAKF,CAAM,GAErBE,CACX,CAAA,CACH,EAEEH,CACX,CAagB,SAAAI,EAAaC,EAAWC,EAAS,CAC7C,GAAI,CAAAC,GAAwB,GAExB,CAACF,EACK,MAAA,IAAI,MAAMC,GAAW,kBAAkB,CAErD,CAcgB,SAAAE,GAAmBC,EAAOC,EAAOC,EAAG,CAChD,MAAMC,EAAK,KAAK,MAAMH,IAAU,EAAE,EAC5BI,EAAK,KAAK,MAAOJ,IAAU,GAAM,GAAI,EACrCK,EAAK,KAAK,MAAOL,IAAU,EAAK,GAAI,EACpCM,EAAK,KAAK,MAAMN,EAAQ,GAAI,EAC5BO,EAAK,KAAK,MAAMN,IAAU,EAAE,EAC5BO,EAAK,KAAK,MAAOP,IAAU,GAAM,GAAI,EACrCQ,EAAK,KAAK,MAAOR,IAAU,EAAK,GAAI,EACpCS,EAAK,KAAK,MAAMT,EAAQ,GAAI,EAC5BU,EAAI,KAAK,MAAMJ,EAAKL,EAAIC,GAAM,EAAID,EAAE,EACpCU,EAAI,KAAK,MAAMJ,EAAKN,EAAIE,GAAM,EAAIF,EAAE,EACpCW,EAAI,KAAK,MAAMJ,EAAKP,EAAIG,GAAM,EAAIH,EAAE,EACpCY,EAAI,KAAK,MAAMJ,EAAKR,EAAII,GAAM,EAAIJ,EAAE,EAC1C,OAASS,GAAK,GAAOC,GAAK,GAAOC,GAAK,EAAKC,KAAO,CACtD,CAcgB,SAAAC,GAAgBC,EAAMC,EAAO,CACzC,MAAMN,EAAIK,IAAS,GACbJ,EAAKI,IAAS,GAAM,IACpBH,EAAKG,IAAS,EAAK,IACnBF,EAAI,KAAK,OAAOE,EAAO,KAAQC,CAAK,EAC1C,OAASN,GAAK,GAAOC,GAAK,GAAOC,GAAK,EAAKC,KAAO,CACtD,CACA,IAAII,GAAiB,GAKd,SAASC,GAAmBC,EAAM,CACrCF,GAAiBE,IAAS,OAC9B,CA0BO,SAASC,GAA6BL,EAAMC,EAAOK,EAAgB,GAAO,CACvE,MAAAC,GAAaP,EAAO,KAAQ,IAAOC,EACnCO,EAAWN,GAAiBK,EAAW,EACvCZ,EAAI,KAAK,OAAOK,IAAS,IAAMQ,CAAQ,EACvCZ,EAAI,KAAK,OAAQI,IAAS,GAAM,KAAQQ,CAAQ,EAChDX,EAAI,KAAK,OAAQG,IAAS,EAAK,KAAQQ,CAAQ,EAC/CV,EAAI,KAAK,MAAMS,EAAW,GAAG,EACnC,OAAID,GACSR,GAAK,GAAOD,GAAK,GAAOD,GAAK,EAAKD,KAAO,GAE7CA,GAAK,GAAOC,GAAK,GAAOC,GAAK,EAAKC,KAAO,CACtD,CAQgB,SAAAW,EAAOC,EAAKjC,EAAM,CAC9B,OAAO,OAAO,UAAU,eAAe,KAAKiC,EAAKjC,CAAI,CACzD,CAyBO,SAASK,IAA0B,CACtC,OAAO6B,IAAmB,EAC9B,CCrLO,MAAMC,EAAa,CAAnB,cACHC,EAAA,sBAAiB,CAAA,GACjB,GAAGC,EAAOC,EAAU,CAChB,IAAIC,EAAY,KAAK,eAAeF,CAAK,EACpCE,IACDA,EAAY,CAAA,GAEhBA,EAAU,KAAKD,CAAQ,EACvB,KAAK,eAAeD,CAAK,EAAIE,CAChC,CACD,IAAIF,EAAOC,EAAU,CACjB,MAAMC,EAAY,KAAK,eAAeF,CAAK,EAC3C,GAAI,CAACE,EACD,OAEJ,GAAI,CAACD,EAAU,CACX,OAAO,KAAK,eAAeD,CAAK,EAChC,MACH,CACD,MAAMG,EAAQD,EAAU,QAAQD,CAAQ,EACpCE,GAAS,GACTD,EAAU,OAAOC,EAAO,CAAC,CAEhC,CACD,KAAKH,EAAOC,EAAU,CAClB,MAAMG,EAAe,CAAC1C,EAAQ2C,IAAS,CACnC,KAAK,IAAIL,EAAOI,CAAY,EAC5BH,EAASvC,EAAQ2C,CAAI,CACjC,EACQ,KAAK,GAAGL,EAAOI,CAAY,CAC9B,CACD,KAAKJ,EAAOK,EAAM,CACd,MAAMH,EAAY,KAAK,eAAeF,CAAK,EACtCE,GAGL,CAAC,GAAGA,CAAS,EAAE,QAASD,GAAa,CACjCA,EAAS,KAAMI,CAAI,CAC/B,CAAS,CACJ,CACD,oBAAqB,CACjB,KAAK,eAAiB,EACzB,CACL,CC9CO,MAAMC,EAAW,CAEpB,OAAO,aAAaC,EAAO,CACvB,MAAO,EACV,CACD,OAAO,gBAAgBA,EAAO,CAC1B,MAAO,EACV,CACL,CCPO,SAASC,GAAaC,EAAKC,EAAMC,EAAQ,CAC5C,MAAMC,EAASH,EAAI,aAAaC,CAAI,EACpC,GAAI,CAACE,EACD,MAAM,IAAI,MAKd,GAHAH,EAAI,aAAaG,EAAQD,CAAM,EAC/BF,EAAI,cAAcG,CAAM,EACRH,EAAI,mBAAmBG,EAAQH,EAAI,cAAc,EAE7D,OAAOG,EAEX,QAAQ,IAAIH,EAAI,iBAAiBG,CAAM,CAAC,EACxCH,EAAI,aAAaG,CAAM,CAC3B,CACO,SAASC,GAAcJ,EAAKK,EAAcC,EAAgB,CAC7D,MAAMC,EAAUP,EAAI,gBACpB,GAAI,CAACO,EACD,MAAM,IAAI,MAMd,GAJAP,EAAI,aAAaO,EAASF,CAAY,EACtCL,EAAI,aAAaO,EAASD,CAAc,EACxCN,EAAI,YAAYO,CAAO,EACPP,EAAI,oBAAoBO,EAASP,EAAI,WAAW,EAE5D,OAAOO,EAEX,QAAQ,IAAIP,EAAI,kBAAkBO,CAAO,CAAC,EAC1CP,EAAI,cAAcO,CAAO,CAE7B,CCrBO,SAASC,GAASxD,EAAI,CACzB,OAAQ,KAAK,wBAA0BA,aAAc,KAAK,sBAC9D,CCPO,MAAMyD,WAAwBZ,EAAW,CAmB5C,YAAYa,EAAS,CACjB,QAnBJpB,EAAA,6BAAwB,MACxBA,EAAA,oBAAe,IACfA,EAAA,gBAOAA,EAAA,YACAA,EAAA,iBACAA,EAAA,YACAA,EAAA,yBACAA,EAAA,2BACAA,EAAA,uBACAA,EAAA,yBACAA,EAAA,qBACAA,EAAA,gCAGI,MAAMqB,EAAY,KAAK,SAAWD,EAAQ,SACpCV,EAAO,KAAK,IAAM,KAAK,SAAS,IACtC,KAAK,wBAA0BU,EAAQ,yBAA2B,GAElE,MAAME,EAASZ,EAAI,WACba,EAAsBD,GAAUF,EAAQ,kBACzC,CAACE,GAAUF,EAAQ,kBACpB,GACEI,EAAYF,EAAS,MAAQ,MACnCC,EAAmB,QAASE,GAAkB,CAC1C,GAAI,CAACf,EAAI,aAAae,CAAa,EAC/B,MAAM,IAAI,MAAM,WAAW,KAAK,YAAY,IAAI,yBAAyBA,CAAa,eAAeD,CAAS,mBAAmB,CAEjJ,CAAS,EAMD,MAAME,EAAgBN,EAAQ,eAC1B,KAAK,YAAY,cACrB,GAAKM,EAGIJ,IAAUI,GAAA,MAAAA,EAAe,UAC9BA,EAAc,SAAWA,EAAc,OAAO,SAC9CA,EAAc,OAASA,EAAc,OAAO,OAC5C,OAAOA,EAAc,YALrB,OAAM,IAAI,MAAM,WAAW,KAAK,YAAY,IAAI,6BAA6B,EAOjF,MAAMC,EAAeN,EAAS,OAAO,WAAW,+BAC1CO,EAAeF,EAAc,kBAAkB,SAC/CA,EAAc,OAAOC,CAAY,EACjCD,EAAc,OACdG,EAAiBH,EAAc,oBAAoB,SACnDA,EAAc,SAASC,CAAY,EACnCD,EAAc,SACdX,EAAeN,GAAaC,EAAKA,EAAI,cAAekB,CAAY,EAChEZ,EAAiBP,GAAaC,EAAKA,EAAI,gBAAiBmB,CAAc,EAC5E,GAAI,CAACd,GAAgB,CAACC,EAClB,MAAM,IAAI,MAEd,MAAMC,EAAUH,GAAcJ,EAAKK,EAAcC,CAAc,EAC/D,GAAI,CAACC,EACD,MAAM,IAAI,MAGd,GADA,KAAK,QAAUA,EACXK,EAAQ,CACR,MAAMQ,EAAMpB,EAAI,oBAChB,GAAI,CAACoB,EACD,MAAM,IAAI,MAEd,KAAK,IAAMA,EACXpB,EAAI,gBAAgB,KAAK,GAAG,CAC/B,CACD,KAAK,mBAAqB,GAC1B,KAAK,iBAAmB,GACxB,KAAK,eAAiB,GACtB,CAAC,GAAGU,EAAQ,UAAU,EAAE,QAASW,GAAkB,CAC/C,MAAMC,EAAWtB,EAAI,kBAAkB,KAAK,QAASqB,CAAa,EAClE,GAAIC,EAAW,EACX,MAAM,IAAI,MAAM,GAAG,KAAK,YAAY,IAAI,2CAA2CD,CAAa,IAAI,EAExG,MAAME,EAASvB,EAAI,eACnB,GAAI,CAACuB,EACD,MAAM,IAAI,MAAM,GAAG,KAAK,YAAY,IAAI,4CAA4CF,CAAa,GAAG,EAExG,KAAK,mBAAmBA,CAAa,EAAIC,EACzC,KAAK,iBAAiBD,CAAa,EAAIE,EACvC,KAAK,eAAe,KAAKF,CAAa,CAClD,CAAS,EACD,KAAK,iBAAmB,GACxB,KAAK,aAAe,GACpBX,EAAQ,SAAS,QAASc,GAAY,CAClC,MAAMF,EAAWtB,EAAI,mBAAmB,KAAK,QAASwB,EAAQ,IAAI,EAElE,GADA,KAAK,aAAaA,EAAQ,IAAI,EAAIA,EAAQ,QACtC,CAACF,EAAU,CACX,QAAQ,KAAK,WAAW,KAAK,YAAY,IAAI,yCAAyCE,EAAQ,IAAI,GAAG,EACrG,MACH,CACD,KAAK,iBAAiBA,EAAQ,IAAI,EAAIF,CAClD,CAAS,CACJ,CACD,oBAAoBA,EAAUC,EAAQE,EAAW,CAC7C,KAAM,CAAE,IAAAzB,CAAK,EAAG,KAChBA,EAAI,wBAAwBsB,CAAQ,EACpCtB,EAAI,oBAAoBuB,EAAQD,EAAUG,EAAU,KAAMA,EAAU,KAAMA,EAAU,WAAYA,EAAU,OAAQA,EAAU,MAAM,CACrI,CACD,iBAAiBH,EAAU,CACvB,KAAK,IAAI,yBAAyBA,CAAQ,CAC7C,CACD,mBAAoB,CAChB,UAAWI,KAAO,KAAK,mBACnB,KAAK,iBAAiB,KAAK,mBAAmBA,CAAG,CAAC,EAEtD,KAAK,sBAAwB,IAChC,CAgBD,oBAAoBC,EAAQC,EAAQ,CAChC,MAAO,EACV,CACD,aAAaC,EAAU/B,EAAO,CAC1B,KAAK,qBAAqB+B,EAAS,OAAO,EACtCA,EAAS,SAAS,OAAS,GAC3B,KAAK,aAAaA,EAAS,QAAQ,EAEvC,KAAM,CAAE,IAAA7B,EAAK,uBAAA8B,EAAwB,gBAAAC,CAAe,EAAKF,EAEzD,GAAI,EAAAE,GAAmBD,GAKvB,IAAIA,EAAwB,CACxB,KAAM,CAAE,MAAAE,EAAO,OAAAC,CAAM,EAAKJ,EAAS,uBAAyB,CAAA,EAG5D,KAAK,WAAW,eAAgB,CAAG,EAEnC,KAAK,WAAW,eAAgB,IAAI,aAAa,CAACG,GAAS,EAAGC,GAAU,CAAC,CAAC,CAAC,CAC9E,MAEG,KAAK,WAAW,eAAgBJ,EAAS,QAAQ,UAAU,EAC3D,KAAK,WAAW,eAAgB,IAAI,aAAa,CAAC7B,EAAI,OAAO,MAAOA,EAAI,OAAO,MAAM,CAAC,CAAC,EAE3F,GAAIF,EAAO,CAGP,GAAIZ,EAAOY,EAAO,aAAa,EAAG,CAC9B,IAAIoC,EAAapC,EAAM,YAClBoC,IACDA,EAAaL,EAAS,YAE1B,KAAK,WAAW,eAAgB,CAACK,EAAW,MAAOA,EAAW,MAAM,CAAC,CACxE,CACD,GAAIhD,EAAOY,EAAO,QAAQ,EAAG,CACzB,IAAIpB,EAAQoB,EAAM,OACbpB,IACDA,EAAQmD,EAAS,OAErB,KAAK,WAAW,UAAWnD,CAAK,CACnC,CACD,KAAK,UAAUoB,CAAK,CACvB,EACJ,CACD,WAAWqC,KAAShF,EAAO,CAEvB,KAAK,IAAI,WAAW,KAAK,aAAagF,CAAI,EAAG,KAAK,iBAAiBA,CAAI,EAAG,GAAGhF,CAAK,CACrF,CACD,qBAAqBoE,EAAQ,CACzB,GAAI,KAAK,wBAA0BA,EAGnC,WAAWF,KAAiB,KAAK,mBAAoB,CACjD,MAAMe,EAAiBb,EAAO,UAAUF,CAAa,EAC/CgB,EAAed,EAAO,iBAAiBF,CAAa,EAC1DjE,EAAagF,EAAgB,eAAef,CAAa,aAAa,EACtEjE,EAAaiF,CAAY,EACzB,KAAK,oBAAoB,KAAK,mBAAmBhB,CAAa,EAAGe,EAAgBC,CAAY,CAChG,CACD,KAAK,sBAAwBd,EAChC,CACD,UAAUzB,EAAO,CAEhB,CACD,aAAawC,EAAU,CAEtB,CACD,QAAS,CACL,KAAK,IAAI,WAAW,KAAK,OAAO,EAChC,KAAK,IAAI,WAAW,KAAK,OAAO,EAC5B,KAAK,IAAI,SAAQ,GAAM,KAAK,KAC5B,KAAK,IAAI,gBAAgB,KAAK,GAAG,CAExC,CACD,QAAS,CACL,KAAK,kBAAiB,CACzB,CAEL,CADIhD,EApNSmB,GAoNF,iBC9MJ,MAAM8B,UAAgBlD,EAAa,CAatC,YAAYmD,EAAW,CACnB,QAbJlD,EAAA,kBAQAA,EAAA,kBAAa,MACbA,EAAA,aAAQ,MACRA,EAAA,aAAQ,SACRA,EAAA,wBAAmB,IAAI,KAGnB,KAAK,UAAYkD,CACpB,CAeD,mBAAmBC,EAAOC,EAAY,CAC9BA,EACA,KAAK,iBAAiB,IAAID,CAAK,EAG/B,KAAK,iBAAiB,OAAOA,CAAK,CAEzC,CAID,IAAI,YAAa,CACb,OAAO,KAAK,iBAAiB,KAAO,CACvC,CAWD,SAASE,KAAUC,EAAM,CACrB,GAAI,KAAK,QAAUD,EAAO,CAGtB,GADA,KAAK,MAAQA,EACTA,IAAU,SAAU,CACpB,MAAME,EAAaD,EACnB,KAAK,WAAaC,EAAW,CAAC,CACjC,SACQF,IAAU,SAAU,CACzB,MAAMG,EAAaF,EACnB,KAAK,MAAQE,EAAW,CAAC,CAC5B,CACD,KAAK,KAAKH,EAAO,GAAGC,CAAI,CAC3B,CACJ,CAgBD,OAAO,aAAa9C,EAAO,CACvB,MAAO,EACV,CAYD,OAAO,gBAEPA,EAAO,CACH,MAAO,EACV,CACL,CClHO,MAAMiD,GAAiB,wBACjBC,GAA+BvE,GAAS,CACjD,MAAML,EAAIK,IAAS,GACbJ,EAAKI,IAAS,GAAM,IACpBH,EAAKG,IAAS,EAAK,IACnBF,EAAIE,EAAO,IACjB,MAAO,CAACL,EAAI,IAAKC,EAAI,IAAKC,EAAI,IAAKC,EAAI,GAAG,CAC9C,EACa0E,GAAqBxE,GAAS,CACvC,MAAML,EAAIK,IAAS,GACbJ,EAAKI,IAAS,GAAM,IACpBH,EAAKG,IAAS,EAAK,IACnBF,EAAIE,EAAO,IACjB,MAAO,CAACL,EAAGC,EAAGC,EAAGC,CAAC,CACtB,EAoBO,SAAS2E,GAA4BzE,EAAM,CAC9C,OAAQA,EAAO,KAAQ,GAC3B,CAOO,SAAS0E,GAAcC,EAAO,CACjC,MAAMhF,EAAI,KAAK,MAAMgF,EAAM,CAAC,EAAI,GAAK,EAC/B/E,EAAI,KAAK,MAAM+E,EAAM,CAAC,EAAI,GAAK,EAC/B9E,EAAI,KAAK,MAAM8E,EAAM,CAAC,EAAI,GAAK,EAC/B7E,EAAI,KAAK,MAAM6E,EAAM,CAAC,EAAI,GAAK,EACrC,MAAO,QAAQhF,CAAC,IAAIC,CAAC,IAAIC,CAAC,IAAIC,EAAE,QAAQ,CAAC,CAAC,GAC9C,CACO,SAAS8E,GAAYC,EAAIC,EAAIC,EAAIC,EAAIC,EAAK,CAC7C,OAAIA,GACAA,EAAI,GAAKJ,EACTI,EAAI,GAAKH,EACTG,EAAI,GAAKF,EACTE,EAAI,GAAKD,EACFC,GAEJ,CACH,GAAAJ,EACA,GAAAC,EACA,GAAAC,EACA,GAAAC,CACR,CACA,CACO,SAASE,GAAepF,EAAGD,EAAGoF,EAAK,CACtC,MAAME,EAAeP,GAAY,KAAK,IAAI9E,EAAE,GAAID,EAAE,EAAE,EAAG,KAAK,IAAIC,EAAE,GAAID,EAAE,EAAE,EAAG,KAAK,IAAIC,EAAE,GAAID,EAAE,EAAE,EAAG,KAAK,IAAIC,EAAE,GAAID,EAAE,EAAE,EAAGoF,CAAG,EAC5H,OAAIE,EAAa,GAAKA,EAAa,IAAMA,EAAa,GAAKA,EAAa,GAC7DA,EAEJP,GAAY,EAAG,EAAG,EAAG,EAAGO,CAAY,CAC/C,CACO,SAASC,GAActF,EAAGD,EAAG,CAChC,OAAOC,EAAE,GAAKD,EAAE,IAAMC,EAAE,GAAKD,EAAE,IAAMC,EAAE,GAAKD,EAAE,IAAMC,EAAE,GAAKD,EAAE,EACjE,CACO,SAASwF,GAAmBC,EAAOL,EAAK,CAC3C,OAAIA,GACAA,EAAI,EAAIK,EAAM,GACdL,EAAI,EAAIK,EAAM,GACdL,EAAI,MAAQK,EAAM,GAAKA,EAAM,GAC7BL,EAAI,OAASK,EAAM,GAAKA,EAAM,GACvBL,GAEJ,CACH,EAAGK,EAAM,GACT,EAAGA,EAAM,GACT,MAAOA,EAAM,GAAKA,EAAM,GACxB,OAAQA,EAAM,GAAKA,EAAM,EACjC,CACA,CACO,SAASC,GAAczF,EAAGD,EAAGoF,EAAK,CACrC,MAAMO,EAAI,KAAK,IAAI1F,EAAE,EAAGD,EAAE,CAAC,EACrB4F,EAAI,KAAK,IAAI3F,EAAE,EAAGD,EAAE,CAAC,EACrB0D,EAAQ,KAAK,IAAIzD,EAAE,EAAIA,EAAE,MAAOD,EAAE,EAAIA,EAAE,KAAK,EAAI2F,EACjDhC,EAAS,KAAK,IAAI1D,EAAE,EAAIA,EAAE,OAAQD,EAAE,EAAIA,EAAE,MAAM,EAAI4F,EAC1D,OAAIlC,EAAQ,GAAKC,EAAS,EAClByB,GACAA,EAAI,EAAIO,EACRP,EAAI,EAAIQ,EACRR,EAAI,MAAQ1B,EACZ0B,EAAI,OAASzB,EACNyB,GAEJ,CACH,EAAAO,EACA,EAAAC,EACA,MAAAlC,EACA,OAAAC,CACZ,EAEQyB,GACAA,EAAI,EAAI,EACRA,EAAI,EAAI,EACRA,EAAI,MAAQ,EACZA,EAAI,OAAS,EACNA,GAEJ,CACH,EAAG,EACH,EAAG,EACH,MAAO,EACP,OAAQ,CAChB,CACA,CACO,SAASS,GAAS5F,EAAGmF,EAAK,CAC7B,OAAIA,GACAA,EAAI,EAAInF,EAAE,EACVmF,EAAI,EAAInF,EAAE,EACVmF,EAAI,MAAQnF,EAAE,MACdmF,EAAI,OAASnF,EAAE,OACRmF,GAEJ,CACH,EAAGnF,EAAE,EACL,EAAGA,EAAE,EACL,MAAOA,EAAE,MACT,OAAQA,EAAE,MAClB,CACA,CACO,SAAS6F,GAAY7F,EAAGD,EAAG,CAC9B,OAAIC,IAAMD,EACC,GAEPC,IAAM,MAAQD,IAAM,KACb,GAEHC,EAAE,IAAMD,EAAE,GAAKC,EAAE,IAAMD,EAAE,GAAKC,EAAE,QAAUD,EAAE,OAASC,EAAE,SAAWD,EAAE,MAChF,CACO,SAAS+F,GAAiBC,EAAQC,EAAQ,CAC7C,OAAQD,EAAO,IAAMC,EAAO,IACxBD,EAAO,IAAMC,EAAO,IACpBD,EAAO,IAAMC,EAAO,IACpBD,EAAO,IAAMC,EAAO,EAC5B,CACO,SAASC,GAAgBT,EAAO,CACnC,OAAOA,EAAM,GAAKA,EAAM,IAAMA,EAAM,GAAKA,EAAM,EACnD,CAIO,SAASU,GAAqBC,EAAK,CAEtC,GAAI,KAAK,SAAS,WAAa,SAAW,CAAC3B,GAAe,KAAK2B,CAAG,EAAG,CACjE,MAAMC,EAAO,KAAK,SAAS,SAAS,MAAM,GAAG,EAC7CA,EAAK,IAAG,EACR,MAAMC,EAAWD,EAAK,KAAK,GAAG,EACxBE,EAAU,KAAK,SAAS,SAAW,KAAOD,EAEhD,OAAIF,EAAI,OAAO,CAAC,IAAM,MAClBA,EAAMA,EAAI,MAAM,CAAC,GAGjBA,EAAI,OAAO,CAAC,IAAM,MAClBA,EAAMA,EAAI,MAAM,CAAC,GAEdG,EAAU,IAAMH,CAC1B,CAED,OADoB,IAAI,IAAIA,EAAK,KAAK,SAAS,IAAI,EAChC,IACvB,CClLO,MAAMI,WAAmBzF,EAAa,CAKzC,YAAYqB,EAAS,CACjB,QALJpB,EAAA,mBACAA,EAAA,oBACAA,EAAA,cAAS,IACTA,EAAA,eAAU,MAGN,KAAM,CAAE,WAAAyF,EAAY,YAAAC,EAAa,QAAAC,CAAO,EAAKvE,EACzCuE,IAEA,KAAK,QAAU,CACX,SAAUA,EAAQ,SAAWA,EAAQ,WACrC,UAAWA,EAAQ,UAAYA,EAAQ,WACvC,QAASA,EAAQ,QAAUA,EAAQ,UACnD,GAEQ,KAAK,WAAaF,EAClB,KAAK,YAAc,CACf,MAAO,SACP,OAAQ,SACR,QAAS,SACT,GAAGC,CACf,CACK,CAOD,OAAO,gCAAgCA,EAAa,CAChD,MAAO,CACH,MAAOA,EAAY,MACnB,OAAQ,OAAOA,EAAY,QAAW,SAChC,GAAGA,EAAY,MAAM,GACrBA,EAAY,OAClB,QAASA,EAAY,QACrB,aAAcA,EAAY,aAC1B,QAASA,EAAY,QACrB,gBAAiBA,EAAY,gBAC7B,QAASA,EAAY,OACjC,CACK,CACL,CC/BO,MAAME,EAAN,MAAMA,UAAqB3C,CAAQ,CAEtC,YAAYC,EAAW1C,EAAO,CAC1B,MAAM0C,CAAS,EAFnBlD,EAAA,cAGI,KAAK,MAAQ4F,EAAa,gBAAgBpF,GAAS,CAAE,CAAA,CACxD,CACD,IAAI,OAAQ,CACR,OAAO,KAAK,MAAM,KACrB,CACD,IAAI,MAAMsD,EAAO,CACb,KAAK,MAAM,MAAQA,CACtB,CACD,MAAM,gBAAiB,CACnB,MAAM+B,EAAc,IAAI,YAAY,CAAC,KAAK,KAAK,CAAC,EAC1CC,EAAa,IAAI,kBAAkBD,EAAY,MAAM,EAC3D,MAAO,CACH,KAAM,IAAI,UAAUC,EAAY,EAAG,CAAC,EACpC,iBAAkB,EAC9B,CACK,CACD,OAAO,aAAatF,EAAO,CAEvB,MAAO,gBADeoF,EAAa,gBAAgBpF,CAAK,EACnB,KAAK,EAC7C,CACD,OAAO,gBAAgBA,EAAO,CAC1B,MAAO,CACH,MAAOA,EAAM,OAAS,UAClC,CACK,CAEL,EADIR,EA7BS4F,EA6BF,mBA7BJ,IAAMG,EAANH,ECbA,MAAMI,EAAmB,CAG5B,YAAYC,EAAYC,EAAe,CAFvClG,EAAA,mBACAA,EAAA,sBAEI,KAAK,WAAaiG,EAClB,KAAK,cAAgBC,CACxB,CACL,CCLO,MAAMC,EAAa,CAStB,YAAY/E,EAAS,CARrBpB,EAAA,gBACAA,EAAA,aACAA,EAAA,cAEAA,EAAA,kBACAA,EAAA,qBACAA,EAAA,kBACAA,EAAA,gBAAW,CAAA,GAEP,KAAK,QAAUoB,EACf,KAAK,MAAQA,EAAQ,MACrB,KAAK,UAAYA,EAAQ,UACzB,KAAK,aAAeA,EAAQ,aAC5B,KAAK,UAAYA,EAAQ,SAC5B,CACL,CClBO,MAAMgF,EAAa,CAC1B,CCMO,MAAMC,WAA0BD,EAAa,CAkBhD,YAAY1F,EAAKU,EAASkF,EAASzF,EAAQ0F,EAAanH,EAAOoH,EAAc5D,EAAY6D,EAAWC,EAAQjE,EAAiBD,EAAwBmE,EAAuB,CACxK,QAlBJ3G,EAAA,YACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,oBACAA,EAAA,cACAA,EAAA,qBACAA,EAAA,mBACAA,EAAA,kBACAA,EAAA,eACAA,EAAA,wBACAA,EAAA,+BACAA,EAAA,8BACAA,EAAA,cAAS,GACTA,EAAA,gBAAW,GACXA,EAAA,gBAAW,CAAA,GACXA,EAAA,oBAGI,KAAK,IAAMU,EACX,KAAK,QAAUU,EACf,KAAK,QAAUkF,EACf,KAAK,OAASzF,EACd,KAAK,YAAc0F,EACnB,KAAK,MAAQnH,EACb,KAAK,aAAeoH,EACpB,KAAK,WAAa5D,EAClB,KAAK,UAAY6D,EACjB,KAAK,OAASC,EACd,KAAK,gBAAkBjE,EACvB,KAAK,uBAAyBD,EAC9B,KAAK,sBAAwBmE,EAC7B,KAAK,YAAc9F,EAAO,wBACpBH,EAAI,aAAaA,EAAI,8BAA8B,EACnD,CACT,CACD,WAAWkG,EAAS,CAChB,KAAM,CAAE,SAAA5D,EAAU,YAAA6D,CAAa,EAAG,KAC5BC,EAAc9D,EAAS,UAAW+D,GAAMA,IAAMH,CAAO,EAC3D,GAAIE,IAAgB,GAChB,OAAOA,EAEX,MAAME,EAAShE,EAAS,OACxB,OAAIgE,GAAUH,EACH,YAEX,KAAK,SAAS,KAAKD,CAAO,EACnBI,EACV,CACD,MAAO,CACH,KAAM,CAAE,IAAAtG,EAAK,OAAAG,EAAQ,YAAA0F,EAAa,QAAAnF,CAAO,EAAK,KACxC,CAAE,UAAA6F,CAAW,EAAG7F,EACtB6F,EAAU,UAAUpG,CAAM,EAC1BA,EAAO,aAAa,KAAM0F,CAAW,EAErC,MAAMW,EAAW,KAAK,UAAY,GAAM,EAAI,EAE5C,GAAI,KAAK,aAAa,MAAO,CACzB,KAAM,CAAE,EAAAvC,EAAG,EAAAC,EAAG,MAAAlC,EAAO,OAAAC,CAAQ,EAAG,KAAK,aAC/BwE,EAAa/F,EAAQ,WACrBgG,EAAehG,EAAQ,OAAO,OAC9BiG,EAAQ,KAAK,MAAM1C,EAAIwC,CAAU,EACjCG,EAAY,KAAK,MAAM5E,EAAQyE,CAAU,EACzCI,EAAa,KAAK,MAAM5E,EAASwE,CAAU,EAC3CK,EAAQ,KAAK,MAAMJ,EAAeG,EAAa3C,EAAIuC,CAAU,EACnEzG,EAAI,eAAe,EAAI,EACvBA,EAAI,QAAQ2G,EAAOG,EAAOF,EAAWC,CAAU,CAClD,MAEG7G,EAAI,eAAe,EAAK,EAE5BA,EAAI,aAAaA,EAAI,UAAW,EAAI,KAAK,SAAUA,EAAI,eAAgBwG,CAAO,CACjF,CACL,CC7EO,SAASO,GAAmB/G,EAAK,CACpC,MAAMgH,EAAS,CACX,sBAAuB,EACvB,iBAAkB,EAElB,kBAAmB,EACnB,+BAAgC,EAChC,wBAAyB,EACzB,iCAAkC,EAClC,mBAAoB,EACpB,oBAAqB,EACrB,2BAA4B,EAC5B,6BAA8B,CACtC,EAGI,OADa,OAAO,KAAKA,CAAM,EAC1B,QAASC,GAAQ,CAElBD,EAAOC,CAAG,EAAIjH,EAAI,aAAaA,EAAIiH,CAAG,CAAC,CAC/C,CAAK,EACMD,CACX,CAKO,SAASE,GAAmBlH,EAAK,CACpC,MAAMmH,EAAa,CACf,uBAAwB,KACxB,8BAA+B,KAC/B,8BAA+B,KAC/B,6BAA8B,KAC9B,8BAA+B,KAC/B,+BAAgC,KAChC,sCAAuC,KACvC,mCAAoC,KACpC,wBAAyB,IACjC,EAGI,OADa,OAAO,KAAKA,CAAU,EAC9B,QAASF,GAAQ,CAElBE,EAAWF,CAAG,EAAIjH,EAAI,aAAaiH,CAAG,CAC9C,CAAK,EACME,CACX,CAQO,SAASC,GAAkBpH,EAAKqH,EAAM,CACzC,MAAMC,EAAW,CAAC,EAAED,EAAO,IACrBE,EAAU,IAAI,YAAYD,EAAW,CAAC,EAC5C,QAAS,EAAI,EAAGE,EAAI,EAAG,EAAIF,EAAU,GAAK,EAAGE,GAAK,EAC9CD,EAAQ,CAAC,EAAIC,EACbD,EAAQ,EAAI,CAAC,EAAIC,EAAI,EACrBD,EAAQ,EAAI,CAAC,EAAIC,EAAI,EACrBD,EAAQ,EAAI,CAAC,EAAIC,EAAI,EACrBD,EAAQ,EAAI,CAAC,EAAIC,EAAI,EACrBD,EAAQ,EAAI,CAAC,EAAIC,EAAI,EAEzB,MAAMjG,EAASvB,EAAI,eACnBA,EAAI,uBAAuBuB,EAAQgG,EAASvH,EAAI,WAAW,CAC/D,CASO,SAASyH,GAAmBtI,EAAK,CACpC,OAAQA,IAAQ,MACZ,OAAOA,GAAQ,UACfA,EAAI,aACJA,EAAI,YAAY,OAAS,kBACjC,CC9DO,MAAMuI,GAAgBvK,GAClBA,GAAS,EAAEA,EAASA,EAAQ,GAEjCwK,GAAkB,CAACpJ,EAAGD,EAAGsJ,EAAGC,IAAM,CACpC,MAAMC,EAAK,EAAMvJ,EACXwJ,EAAK,GAAOH,EAAIrJ,GAAKuJ,EACrBE,EAAK,EAAMF,EAAKC,EAChBE,EAAK,EAAM3J,EACX4J,EAAK,GAAOL,EAAIvJ,GAAK2J,EACrBE,EAAK,EAAMF,EAAKC,EACtB,OAAO,SAAUE,EAAM,CACnB,GAAIA,GAAQ,EACR,MAAO,GAEX,GAAIA,GAAQ,EACR,MAAO,GAEX,IAAI/B,EAAI,GAAKgC,EAAKC,EAAMC,EACxB,QAASC,EAAK,EAAGA,EAAK,GAAIA,IAAM,CAG5B,GAFAH,EAAMhC,GAAKA,GAAKA,EAAI2B,EAAKD,GAAMD,GAC/BS,EAAKH,EAAOC,EACRE,EAAK,OAASA,EAAK,KACnB,OAAOlC,GAAKA,GAAKA,EAAI8B,EAAKD,GAAMD,GAIpC,GADAK,EAAOjC,GAAKA,GAAK,EAAI2B,GAAM,EAAID,GAAMD,EACjCQ,EAAO,OAASA,EAAO,MAEvB,MAEJjC,GAAKkC,EAAKD,CACb,CAED,IAAIG,EAAO,EACPC,EAAO,EACX,QAASF,EAAK,EAAGA,EAAK,GAAIA,IAAM,CAI5B,GAHAnC,EAAI,IAAOoC,EAAOC,GAClBL,EAAMhC,GAAKA,GAAKA,EAAI2B,EAAKD,GAAMD,GAC/BS,EAAKH,EAAOC,EACRE,EAAK,OAASA,EAAK,KAEnB,OAAOlC,GAAKA,GAAKA,EAAI8B,EAAKD,GAAMD,GAEhCM,EAAK,EACLG,EAAOrC,EAGPoC,EAAOpC,CAEd,CACT,CACA,EACMsC,EAAgB,CAAA,EAChBC,GAAe,CACjB,KAAM,CAAC,IAAM,GAAK,IAAM,CAAG,EAC3B,UAAW,CAAC,IAAM,EAAG,EAAK,CAAG,EAC7B,WAAY,CAAC,EAAG,EAAG,IAAM,CAAG,EAC5B,cAAe,CAAC,IAAM,EAAG,IAAM,CAAG,EAClC,eAAgB,CAAC,IAAM,EAAG,IAAM,CAAC,EACjC,gBAAiB,CAAC,IAAM,EAAG,IAAM,CAAC,EAClC,mBAAoB,CAAC,IAAM,EAAG,IAAM,CAAC,EACrC,gBAAiB,CAAC,IAAM,EAAG,IAAM,CAAC,EAClC,iBAAkB,CAAC,IAAM,EAAG,IAAM,CAAC,EACnC,oBAAqB,CAAC,IAAM,EAAG,IAAM,CAAC,EACtC,eAAgB,CAAC,IAAM,EAAG,EAAG,GAAI,EACjC,gBAAiB,CAAC,EAAG,IAAM,IAAM,CAAC,EAClC,mBAAoB,CAAC,IAAM,EAAG,IAAM,CAAC,EACrC,eAAgB,CAAC,IAAM,EAAG,IAAM,IAAK,EACrC,gBAAiB,CAAC,IAAM,KAAM,IAAM,CAAC,EACrC,mBAAoB,CAAC,IAAM,IAAM,IAAM,GAAG,CAC9C,EACMC,EAAiBxC,GAAMA,EACvByC,GAAoBC,GAAQ,CAE9B,MAAMC,EAAQ,eACRC,EAAQF,EAAI,MAAMC,CAAK,EAC7B,GAAIC,EAAO,CACP,KAAM,CAACC,EAAMC,EAAMC,EAAMC,CAAI,EAAIJ,EAC3B1K,EAAI,WAAW2K,GAAQ,MAAM,EAC7B5K,EAAI,WAAW6K,GAAQ,GAAG,EAC1BvB,EAAI,WAAWwB,GAAQ,GAAG,EAC1B,EAAI,WAAWC,GAAQ,GAAG,EAC1BC,EAAS3B,GAAgBpJ,EAAGD,EAAGsJ,EAAG,CAAC,EACzC,OAAAe,EAAcI,CAAG,EAAIO,EACdA,CACV,CAED,eAAQ,KAAK,gCAAkCP,CAAG,EAC3CF,CACX,EACaU,GAAqBR,GAAQ,CACtC,GAAIA,IAAQ,SACR,OAAOF,EAEX,GAAIF,EAAcI,CAAG,IAAM,OACvB,OAAOJ,EAAcI,CAAG,GAAKF,EAEjC,GAAIE,IAAQ,aACR,MAAO,IACI,EAGf,GAAIA,IAAQ,WACR,OAAQX,GACGA,IAAS,EAAI,EAAI,EAGhC,GAAIQ,GAAaG,CAAG,IAAM,OAAW,CAGjC,KAAM,CAACxK,EAAGD,EAAGsJ,EAAGC,CAAC,EAAIe,GAAaG,CAAG,EAE/BO,EAAS3B,GAAgBpJ,EAAGD,EAAGsJ,EAAGC,CAAC,EACzC,OAAAc,EAAcI,CAAG,EAAIO,EACdA,CACV,CACD,OAAIP,EAAI,WAAW,cAAc,EACtBD,GAAiBC,CAAG,GAE/B,QAAQ,KAAK,4BAA8BA,CAAG,EACvCF,EACX,EACK,KAAK,QACN,KAAK,MAAQ,IAAIjG,IAAS,CACtB,IAAIsB,EAAI,EAAGsF,EAAI5G,EAAK,OACpB,KAAO4G,KACHtF,GAAKtB,EAAK4G,CAAC,EAAI5G,EAAK4G,CAAC,EAEzB,OAAO,KAAK,KAAKtF,CAAC,CACrB,GCnJL,MAAMuF,EAA2B,IAAI,WAAW,CAAC,EAAG,EAAG,EAAG,CAAC,CAAC,EAYrD,MAAMC,UAA4BpE,EAAmB,CAMxD,YAAYtF,EAAKuF,EAAYC,EAAe,CACxC,MAAMD,EAAYC,CAAa,EANnClG,EAAA,YACAA,EAAA,yBAAoB,MACpBA,EAAA,cAAS,SACTA,EAAA,UAAK,GACLA,EAAA,UAAK,GAGD,KAAK,IAAMU,CACd,CACD,IAAI,YAAa,CACb,OAAI,KAAK,SAAW,SAChB,KAAK,KAAI,EAEb5C,EAAa,KAAK,iBAAiB,EAC5B,KAAK,iBACf,CACD,IAAI,YAAa,CACb,OAAO,KAAK,cAAc,UAC7B,CACD,IAAI,GAAI,CACJ,OAAO,KAAK,EACf,CACD,IAAI,GAAI,CACJ,OAAO,KAAK,EACf,CAUD,MAAO,CAEC,KAAK,SAAW,WAAa,KAAK,SAAW,WAGjD,KAAK,OAAS,UACd,KAAK,cAAc,SAAS,SAAS,EACrC,KAAK,kBAAoB,KAAK,yBAC9B,KAAK,cAAe,EACf,KAAK,CAAC,CAAE,MAAA4E,EAAO,OAAAC,KAAa,CAEzB,KAAK,SAAW,UAGpB,KAAK,OAAS,SACd,KAAK,GAAKD,EACV,KAAK,GAAKC,EAGV,KAAK,cAAc,SAAS,SAAU,CAAE,MAAAD,EAAO,OAAAC,CAAM,CAAE,EACnE,CAAS,EACI,MAAO0H,GAAQ,CAEZ,KAAK,SAAW,UAGpB,KAAK,OAAS,SACd,KAAK,cAAc,SAAS,SAAUA,CAAG,EACzC,QAAQ,MAAMA,CAAG,EAC7B,CAAS,EACJ,CAID,MAAM,eAAgB,OAClB,KAAM,CAAE,IAAA3J,EAAK,WAAAuF,CAAY,EAAG,KAE5BvF,EAAI,WAAW,EAAGA,EAAI,KAAM,EAAG,EAAG,EAAGA,EAAI,KAAMA,EAAI,cAAe,IAAI,EACtEuF,EAAW,iBAAiB,KAAMkE,EAAyB,UAAU,EACrE,MAAMG,EAAc,OAAMC,EAAA,KAAK,gBAAL,YAAAA,EAAoB,kBAE9C,GAAI,CAAC,KAAK,kBACN,OAAAzM,EAAa,KAAK,SAAW,OAAO,EAC7B,CAAE,MAAO,EAAG,OAAQ,CAAC,EAEhC,IAAI4E,EAAQ,EACRC,EAAS,EAKb,GAJA7E,EAAa,KAAK,iBAAiB,EACnC4C,EAAI,cAAc,CAAC,EAGf4J,EAAY,gBAAgB,aAC5BA,EAAY,gBAAgB,WAE5BnC,GAAmBmC,EAAY,IAAI,EAAG,CACtC,MAAMhK,EAAOgK,EAAY,KACzB5H,EAAQpC,EAAK,MACbqC,EAASrC,EAAK,OACdI,EAAI,YAAY,KAAK,iBAAiB,EACtCA,EAAI,YAAYA,EAAI,+BAAgC,CAAC,CAAC4J,EAAY,gBAAgB,EAClF5J,EAAI,WAAW,EAAGA,EAAI,KAAMA,EAAI,KAAMA,EAAI,cAAeJ,CAAI,EAC7D2F,EAAW,iBAAiB,KAAMvD,EAAQC,EAAS,CAAC,GAEhDjC,EAAI,SAAQ,GAAO0H,GAAa1F,CAAK,GAAK0F,GAAazF,CAAM,IAC7DjC,EAAI,eAAc,CAEzB,SACQ4J,EAAY,OAAS,KAC1B5H,EAAQ,EACRC,EAAS,EAETjC,EAAI,YAAY,KAAK,iBAAiB,EACtCA,EAAI,WAAW,EAAGA,EAAI,KAAM,EAAG,EAAG,EAAGA,EAAI,KAAMA,EAAI,cAAeyJ,CAAwB,EAC1FlE,EAAW,iBAAiB,KAAMkE,EAAyB,UAAU,UAEhE,YAAaG,EAAY,MAAQA,EAAY,KAAK,QAAS,CAChE,KAAM,CAAE,QAAAE,EAAS,MAAA9H,EAAQ,EAAG,OAAAC,EAAS,EAAG,KAAAhC,EAAM,iBAAA8J,CAAgB,EAAMH,EAAY,KAC1EI,EAAO/J,IAAS,MAChB,IAAI,SAAS6J,EAAQ,CAAC,GAAK,IAAI,YAAY,CAAC,CAAC,EAC7CA,EAAQ,CAAC,EACf9J,EAAI,YAAY,KAAK,iBAAiB,EACtCA,EAAI,qBAAqB,EAAG+J,EAAkB/H,EAAOC,EAAQ,EAAG+H,CAAI,EACpEhK,EAAI,cAAcA,EAAI,eAAgBA,EAAI,aAAa,EACvDA,EAAI,cAAcA,EAAI,eAAgBA,EAAI,aAAa,EACvDA,EAAI,cAAcA,EAAI,mBAAoBA,EAAI,MAAM,EACpDA,EAAI,cAAcA,EAAI,mBAAoBA,EAAI,MAAM,EACpDuF,EAAW,iBAAiB,KAAMyE,EAAK,UAAU,CACpD,MAEG,QAAQ,MAAM,qEAAsEJ,CAAW,EAEnG,MAAO,CACH,MAAA5H,EACA,OAAAC,CACZ,CACK,CAMD,MAAO,CAQH,GAPI,KAAK,SAAW,UAGpB,KAAK,OAAS,QACd,KAAK,cAAc,SAAS,OAAO,EACnC,KAAK,GAAK,EACV,KAAK,GAAK,EACN,CAAC,KAAK,mBACN,OAEJ,KAAM,CAAE,IAAAjC,EAAK,WAAAuF,CAAY,EAAG,KAC5BvF,EAAI,cAAc,KAAK,iBAAiB,EACxCuF,EAAW,iBAAiB,KAAM,CAAC,EACnC,KAAK,kBAAoB,IAC5B,CAWD,wBAAyB,CACrB,KAAM,CAAE,IAAAvF,CAAK,EAAG,KACViK,EAAgBjK,EAAI,gBAC1B,GAAI,CAACiK,EACD,MAAM,IAAI,MAAM,gCAAgC,EAIpD,OAAAjK,EAAI,cAAc,CAAC,EACnBA,EAAI,YAAYiK,CAAa,EAE7BjK,EAAI,cAAcA,EAAI,mBAAoBA,EAAI,MAAM,EACpDA,EAAI,cAAcA,EAAI,mBAAoBA,EAAI,MAAM,EAEpDA,EAAI,cAAcA,EAAI,eAAgBA,EAAI,aAAa,EACvDA,EAAI,cAAcA,EAAI,eAAgBA,EAAI,aAAa,EAChDiK,CACV,CACL,CCzLO,MAAMC,EAAN,MAAMA,UAAmB3H,CAAQ,CAGpC,YAAYC,EAAW1C,EAAO,CAC1B,MAAM0C,CAAS,EAHnBlD,EAAA,cACAA,EAAA,sBAqBAA,EAAA,wBAAmB,IAAM,CAGrB,KAAK,SAAS,SAAU,CACpB,MAAO,KAAK,MAAM,MAClB,OAAQ,KAAK,MAAM,MAC/B,CAAS,CACT,GACIA,EAAA,wBAAmB,CAACrC,EAAQkN,IAAU,CAClC,KAAK,SAAS,SAAUA,CAAK,CACrC,GA5BQ,KAAK,cAAgB,KAAK,UAAU,YAAYrK,EAAM,QAAQ,OAAQA,EAAM,QAAQ,MAAOA,EAAM,QAAQ,OAAO,EAChH,KAAK,MAAQoK,EAAW,gBAAgBpK,GAAS,CAAE,CAAA,EAKnD,eAAe,IAAM,CACjB,MAAMsK,EAAW,KAAK,cAClBA,EAAS,QAAU,SACnB,KAAK,iBAAiBA,EAAUA,EAAS,UAAU,EAE9CA,EAAS,QAAU,UACxB,KAAK,iBAAiBA,EAAUA,EAAS,KAAK,EAElDA,EAAS,GAAG,SAAU,KAAK,gBAAgB,EAC3CA,EAAS,GAAG,SAAU,KAAK,gBAAgB,CACvD,CAAS,CACJ,CAYD,MAAM,gBAAiB,CACnB,MAAO,CACH,KAAM,KAAK,KACvB,CACK,CAED,OAAO,aAAatK,EAAO,CACvB,MAAO,EACV,CACD,OAAO,gBAAgBA,EAAO,CAC1B,MAAO,CACH,QAASA,EAAM,QACf,EAAGA,EAAM,GAAK,EACd,EAAGA,EAAM,GAAK,EACd,MAAOA,EAAM,OAAS,EACtB,OAAQA,EAAM,QAAU,CACpC,CACK,CAEL,EADIR,EApDS4K,EAoDF,mBApDJ,IAAMG,EAANH,ECVA,MAAMI,WAA+BZ,CAAoB,CAC5D,YAAY1J,EAAKuF,EAAYC,EAAe,CACxC,MAAMxF,EAAKuF,EAAYC,CAAa,CACvC,CACD,MAAM,eAAgB,SAClB,MAAM1F,EAAQ,MAAM,KAAK,cAAc,eAAc,EACrD,MAAO,CACH,QAAO+J,EAAA/J,EAAM,OAAN,YAAA+J,EAAY,QAAS,EAC5B,SAAQU,EAAAzK,EAAM,OAAN,YAAAyK,EAAY,SAAU,CAC1C,CACK,CACL,CCRO,MAAMC,EAAiB,CAE1B,YAAYzN,EAAQ,CADpBuC,EAAA,eAEI,KAAK,OAASvC,CACjB,CAOD,UAAUsE,EAAe,OACrB,OAAOwI,EAAA,KAAK,OAAO,KAAMY,GAASA,EAAK,WAAWpJ,CAAa,CAAC,IAAzD,YAAAwI,EAA4D,MACtE,CAOD,iBAAiBxI,EAAe,OAC5B,OAAOwI,EAAA,KAAK,OAAO,KAAMY,GAASA,EAAK,WAAWpJ,CAAa,CAAC,IAAzD,YAAAwI,EACD,WAAWxI,EACpB,CACL,CCtBO,MAAMqJ,EAAoB,CA0D7B,YAAY1N,EAAI,CAzDhBsC,EAAA,WAEAA,EAAA,yBAAoB,GACpBA,EAAA,uBACAA,EAAA,uBAAkB,IAAI,SACtBA,EAAA,uBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,sBACAA,EAAA,qBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,sBACAA,EAAA,sBACAA,EAAA,yBACAA,EAAA,gCACAA,EAAA,mBACAA,EAAA,uBAAkB,IAAI,SAGtBA,EAAA,eAGAA,EAAA,8BACAA,EAAA,yBACAA,EAAA,0BACAA,EAAA,uCACAA,EAAA,gCACAA,EAAA,yCACAA,EAAA,2BACAA,EAAA,4BACAA,EAAA,mCACAA,EAAA,qCACAA,EAAA,2BACAA,EAAA,2BACAA,EAAA,uBACAA,EAAA,uBACAA,EAAA,eACAA,EAAA,sBACAA,EAAA,aACAA,EAAA,sBACAA,EAAA,uCACAA,EAAA,4BACAA,EAAA,cACAA,EAAA,kBACAA,EAAA,uBACAA,EAAA,YACAA,EAAA,4BACAA,EAAA,sBACAA,EAAA,wBACAA,EAAA,oBACAA,EAAA,uBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,0BAGI,KAAK,GAAKtC,EAOV,KAAK,kBACDA,EAAG,aAAaA,EAAG,cAAc,EAAIA,EAAG,SAC5C,MAAM2N,EAAkB3N,EAAG,aAAaA,EAAG,uBAAuB,EAElE,KAAK,eAAiB,IAAI,MAAM2N,CAAe,EAC1C,KAAK,MAAS,EACd,IAAI,CAACC,EAAG,KACT,KAAK,cAAc,CAAC,EACb5N,EAAG,aAAaA,EAAG,kBAAkB,EAC/C,EAED,KAAK,cAAc,KAAK,iBAAiB,EACzC,KAAK,eAAiBA,EAAG,UAAUA,EAAG,YAAY,EAClD,MAAM6N,EAAa7N,EAAG,aAAaA,EAAG,WAAW,EACjD,KAAK,SAAW6N,EAAW,CAAC,EAC5B,KAAK,SAAWA,EAAW,CAAC,EAC5B,KAAK,aAAeA,EAAW,CAAC,EAChC,KAAK,cAAgBA,EAAW,CAAC,EACjC,KAAK,aAAe7N,EAAG,UAAUA,EAAG,KAAK,EACzC,KAAK,YAAcA,EAAG,aAAaA,EAAG,aAAa,EACnD,KAAK,YAAcA,EAAG,aAAaA,EAAG,aAAa,EACnD,KAAK,cAAgBA,EAAG,aAAaA,EAAG,eAAe,EACvD,KAAK,cAAgBA,EAAG,aAAaA,EAAG,eAAe,EACvD,KAAK,iBAAmBA,EAAG,aAAaA,EAAG,oBAAoB,EAC/D,KAAK,wBAA0BA,EAAG,aAAaA,EAAG,4BAA4B,EAC9E,KAAK,WAAaA,EAAG,aAAaA,EAAG,eAAe,EACpD,KAAK,OAASA,EAAG,OAEjB,KAAK,sBAAwBA,EAAG,sBAChC,KAAK,iBAAmBA,EAAG,iBAC3B,KAAK,kBAAoBA,EAAG,kBAC5B,KAAK,+BAAiCA,EAAG,+BACzC,KAAK,wBAA0BA,EAAG,wBAClC,KAAK,iCAAmCA,EAAG,iCAC3C,KAAK,mBAAqBA,EAAG,mBAC7B,KAAK,oBAAsBA,EAAG,oBAC9B,KAAK,2BAA6BA,EAAG,2BACrC,KAAK,6BAA+BA,EAAG,6BACvC,KAAK,mBAAqBA,EAAG,mBAC7B,KAAK,mBAAqBA,EAAG,mBAC7B,KAAK,eAAiBA,EAAG,eACzB,KAAK,eAAiBA,EAAG,eACzB,KAAK,OAASA,EAAG,OACjB,KAAK,cAAgBA,EAAG,cACxB,KAAK,KAAOA,EAAG,KACf,KAAK,cAAgBA,EAAG,cACxB,KAAK,+BAAiCA,EAAG,+BACzC,KAAK,oBAAsBA,EAAG,oBAC9B,KAAK,MAAQA,EAAG,MAChB,KAAK,UAAYA,EAAG,UACpB,KAAK,eAAiBA,EAAG,eACzB,KAAK,IAAMA,EAAG,IACd,KAAK,oBAAsBA,EAAG,oBAC9B,KAAK,+BAAiCA,EAAG,+BACzC,KAAK,UAAYA,EAAG,UACpB,KAAK,eAAiBA,EAAG,eACzB,KAAK,cAAgBA,EAAG,cACxB,KAAK,gBAAkBA,EAAG,gBAC1B,KAAK,YAAcA,EAAG,YACtB,KAAK,eAAiBA,EAAG,eACzB,KAAK,YAAcA,EAAG,YACtB,KAAK,aAAeA,EAAG,aACvB,KAAK,kBAAoBA,EAAG,iBAC/B,CAMD,UAAW,CACP,OAAOwD,GAAS,KAAK,EAAE,CAC1B,CAWD,cAAcsK,EAAa,CACvB,KAAM,CAAE,GAAA9N,CAAI,EAAG,KACX,KAAK,oBAAsB8N,IAC3B9N,EAAG,cAAc8N,EAAc9N,EAAG,QAAQ,EAC1C,KAAK,kBAAoB8N,EAEhC,CAUD,YAAY5E,EAAS,CACjB,KAAM,CAAE,GAAAlJ,EAAI,kBAAA+N,EAAmB,eAAAC,CAAc,EAAK,KAC9CA,EAAeD,CAAiB,IAAM7E,IAG1C8E,EAAeD,CAAiB,EAAI7E,EACpClJ,EAAG,YAAY,KAAK,GAAG,WAAYkJ,CAAO,EAC7C,CACD,mBAAoB,CAChB,KAAM,CAAE,kBAAA6E,EAAmB,eAAAC,CAAgB,EAAG,KAC9C,OAAOA,EAAeD,CAAiB,CAC1C,CAYD,cAAcE,EAAOC,EAAO,CACxB,KAAM,CAAE,GAAAlO,EAAI,gBAAAmO,CAAiB,EAAG,KAC1BC,EAAgB,KAAK,oBAC3B,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,mBAAmB,EAEvC,IAAIC,EAAgBF,EAAgB,IAAIC,CAAa,EAChDC,IACDA,EAAgB,CAAA,EAChBF,EAAgB,IAAIC,EAAeC,CAAa,GAEhDA,EAAcJ,CAAK,IAAMC,IAG7BG,EAAcJ,CAAK,EAAIC,EACvBlO,EAAG,cAAcA,EAAG,WAAYiO,EAAOC,CAAK,EAC/C,CACD,WAAWI,EAAOC,EAAgBC,EAAeC,EAAcC,EAAgBC,EAAQ1L,EAAM2L,EAAQ,CACjG,KAAM,CAAE,GAAA5O,CAAI,EAAG,KACX2O,EACA3O,EAAG,WAAWA,EAAG,WAAYsO,EAAOC,EAAgBC,EAAeC,EAAcC,EAAgBC,EAAQ1L,EAAM2L,CAAM,EAGrH5O,EAAG,WAAWA,EAAG,WAAYsO,EAAOC,EAAgBC,EAAeC,EAAcC,CAAc,CAEtG,CASD,qBAAqBJ,EAAOO,EAAgB7J,EAAOC,EAAQ6J,EAAQlM,EAAM,CACrE,KAAM,CAAE,GAAA5C,CAAI,EAAG,KACfA,EAAG,qBAAqBA,EAAG,WAAYsO,EAAOO,EAAgB7J,EAAOC,EAAQ6J,EAAQlM,CAAI,CAC5F,CASD,YAAYqL,EAAOC,EAAO,CACtB,KAAM,CAAE,GAAAlO,CAAI,EAAG,KACfA,EAAG,YAAYiO,EAAOC,CAAK,CAC9B,CASD,gBAAiB,CACb,KAAM,CAAE,GAAAlO,CAAI,EAAG,KACfA,EAAG,eAAeA,EAAG,UAAU,CAClC,CAQD,eAAgB,CACZ,KAAM,CAAE,GAAAA,CAAI,EAAG,KACf,OAAOA,EAAG,eACb,CAQD,cAAckJ,EAAS,CACnB,KAAM,CAAE,GAAAlJ,CAAI,EAAG,KACXkJ,GACA,KAAK,gBAAgB,OAAOA,CAAO,EAEvClJ,EAAG,cAAckJ,CAAO,CAC3B,CAMD,SAASjC,EAAGC,EAAGlC,EAAOC,EAAQ,CAC1B,KAAM,CAAE,GAAAjF,CAAI,EAAG,KACfA,EAAG,SAASiH,EAAGC,EAAGlC,EAAOC,CAAM,CAClC,CAWD,WAAW8J,EAAKC,EAAOC,EAAMvN,EAAO,CAChC,KAAM,CAAE,GAAA1B,CAAI,EAAG,KACfA,EAAG,WAAW+O,EAAKC,EAAOC,EAAMvN,CAAK,CACxC,CAOD,eAAewN,EAAQ,CACnB,KAAM,CAAE,GAAAlP,EAAI,eAAAmP,CAAgB,EAAG,KAC3BD,IAAWC,IAGXD,EACAlP,EAAG,OAAOA,EAAG,YAAY,EAGzBA,EAAG,QAAQA,EAAG,YAAY,EAE9B,KAAK,eAAiBkP,EACzB,CAWD,QAAQjI,EAAGC,EAAGlC,EAAOC,EAAQ,CACzB,KAAM,CAAE,GAAAjF,EAAI,SAAAoP,EAAU,SAAAC,EAAU,aAAAC,EAAc,cAAAC,CAAe,EAAG,MAC5DtI,IAAMmI,GACNlI,IAAMmI,GACNrK,IAAUsK,GACVrK,IAAWsK,KACXvP,EAAG,QAAQiH,EAAGC,EAAGlC,EAAOC,CAAM,EAC9B,KAAK,SAAWgC,EAChB,KAAK,SAAWC,EAChB,KAAK,aAAelC,EACpB,KAAK,cAAgBC,EAE5B,CASD,SAASuK,EAAO,CACZ,KAAM,CAAE,GAAAxP,EAAI,aAAAyP,CAAc,EAAG,KACzBD,IAAUC,IAGVD,EACAxP,EAAG,OAAOA,EAAG,KAAK,EAGlBA,EAAG,QAAQA,EAAG,KAAK,EAEvB,KAAK,aAAewP,EACvB,CASD,UAAUE,EAAKC,EAAK,CAChB,KAAM,CAAE,GAAA3P,EAAI,YAAA4P,EAAa,YAAAC,EAAa,cAAAC,EAAe,cAAAC,CAAe,EAAG,MACnEL,IAAQE,GACRD,IAAQE,GACRH,IAAQI,GACRH,IAAQI,KACR/P,EAAG,UAAU0P,EAAKC,CAAG,EACrB,KAAK,YAAcD,EACnB,KAAK,YAAcC,EACnB,KAAK,cAAgBD,EACrB,KAAK,cAAgBC,EAE5B,CAQD,cAAe,CACX,KAAM,CAAE,GAAA3P,CAAI,EAAG,KACf,OAAOA,EAAG,cACb,CAOD,mBAAoB,CAChB,KAAM,CAAE,GAAAA,CAAI,EAAG,KACf,OAAOA,EAAG,mBACb,CAQD,gBAAgBgQ,EAAa,CACzB,KAAM,CAAE,GAAAhQ,CAAI,EAAG,KACfA,EAAG,gBAAgBA,EAAG,YAAagQ,CAAW,CACjD,CAQD,qBAAqBC,EAAY/G,EAASoF,EAAO,CAC7C,KAAM,CAAE,GAAAtO,CAAI,EAAG,KACfA,EAAG,qBAAqBA,EAAG,YAAaiQ,EAAYjQ,EAAG,WAAYkJ,EAASoF,CAAK,CACpF,CASD,OAAQ,CACJ,KAAM,CAAE,GAAAtO,CAAI,EAAG,KACfA,EAAG,MAAMA,EAAG,gBAAgB,CAC/B,CAcD,gBAAgBuE,EAAQ3B,EAAMsN,EAAO,CACjC,KAAM,CAAE,GAAAlQ,EAAI,iBAAAmQ,CAAkB,EAAG,KAC7BA,IAAqB5L,IACrBvE,EAAG,WAAWA,EAAG,aAAcuE,CAAM,EACrC,KAAK,iBAAmBA,GAE5BvE,EAAG,WAAWA,EAAG,aAAc4C,EAAMsN,CAAK,CAC7C,CAaD,uBAAuB3L,EAAQ3B,EAAMsN,EAAO,CACxC,KAAM,CAAE,GAAAlQ,EAAI,wBAAAoQ,CAAyB,EAAG,KACpCA,IAA4B7L,IAC5BvE,EAAG,WAAWA,EAAG,qBAAsBuE,CAAM,EAC7C,KAAK,wBAA0BA,GAEnCvE,EAAG,WAAWA,EAAG,qBAAsB4C,EAAMsN,CAAK,CACrD,CAkBD,oBAAoB3L,EAAQ7B,EAAO2H,EAAMpH,EAAMoN,EAAYC,EAAQC,EAAQ,CACvE,KAAM,CAAE,GAAAvQ,EAAI,iBAAAmQ,CAAkB,EAAG,KAC7BA,IAAqB5L,IACrBvE,EAAG,WAAWA,EAAG,aAAcuE,CAAM,EACrC,KAAK,iBAAmBA,GAE5BvE,EAAG,oBAAoB0C,EAAO2H,EAAMpH,EAAMoN,EAAYC,EAAQC,CAAM,CACvE,CASD,WAAWhN,EAAS,CAChB,KAAM,CAAE,GAAAvD,EAAI,WAAAwQ,CAAY,EAAG,KACvBA,IAAejN,IAGnBvD,EAAG,WAAWuD,CAAO,EACrB,KAAK,WAAaA,EACrB,CACD,WAAWN,EAAMqB,KAAasB,EAAM,CAChC,KAAM,CAAE,GAAA5F,EAAI,gBAAAyQ,CAAiB,EAAG,KAChC,IAAIC,EAAWD,EAAgB,IAAI,KAAK,UAAU,EAC7CC,IACDA,EAAW,IAAI,IACfD,EAAgB,IAAI,KAAK,WAAYC,CAAQ,GAEjD,MAAMC,EAAcD,EAAS,IAAIpM,CAAQ,GACrC,CAACqM,GAAe,CAACC,GAAcD,EAAa/K,CAAI,KAChD8K,EAAS,IAAIpM,EAAUsB,CAAI,EAC3B5F,EAAGiD,CAAI,EAAEqB,EAAU,GAAGsB,CAAI,EAEjC,CASD,aAAaqI,EAAO,CAChB,KAAM,CAAE,GAAAjO,CAAI,EAAG,KACf,OAAOA,EAAG,aAAaiO,CAAK,CAC/B,CAWD,aAAapM,EAAMgP,EAAO5N,EAAMsN,EAAQ,CACpC,KAAM,CAAE,GAAAvQ,CAAI,EAAG,KACfA,EAAG,aAAa6B,EAAMgP,EAAO5N,EAAMsN,CAAM,CAC5C,CASD,aAAapL,EAAM,CACf,KAAM,CAAE,GAAAnF,CAAI,EAAG,KACf,OAAOA,EAAG,aAAamF,CAAI,CAC9B,CAQD,mBAAoB,CAChB,KAAM,CAAE,GAAAnF,CAAI,EAAG,KACf,OAAAI,EAAaJ,aAAc,sBAAsB,EAC1CA,EAAG,mBACb,CAQD,gBAAgB8Q,EAAa,CACzB,KAAM,CAAE,GAAA9Q,CAAI,EAAG,KACfI,EAAaJ,aAAc,sBAAsB,EACjDA,EAAG,gBAAgB8Q,CAAW,CACjC,CAUD,kBAAkBvN,EAAS4B,EAAM,CAC7B,KAAM,CAAE,GAAAnF,CAAI,EAAG,KACf,OAAOA,EAAG,kBAAkBuD,EAAS4B,CAAI,CAC5C,CAUD,mBAAmB5B,EAAS4B,EAAM,CAC9B,KAAM,CAAE,GAAAnF,CAAI,EAAG,KACf,OAAOA,EAAG,mBAAmBuD,EAAS4B,CAAI,CAC7C,CAQD,wBAAwBzC,EAAO,CAC3B,KAAM,CAAE,GAAA1C,CAAI,EAAG,KACfA,EAAG,wBAAwB0C,CAAK,CACnC,CAQD,yBAAyBA,EAAO,CAC5B,KAAM,CAAE,GAAA1C,CAAI,EAAG,KACfA,EAAG,yBAAyB0C,CAAK,CACpC,CASD,aAAaO,EAAM,CACf,KAAM,CAAE,GAAAjD,CAAI,EAAG,KACf,OAAOA,EAAG,aAAaiD,CAAI,CAC9B,CASD,cAAcE,EAAQ,CAClB,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACfA,EAAG,cAAcmD,CAAM,CAC1B,CASD,aAAaI,EAASJ,EAAQ,CAC1B,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACfA,EAAG,aAAauD,EAASJ,CAAM,CAClC,CAQD,YAAYI,EAAS,CACjB,KAAM,CAAE,GAAAvD,CAAI,EAAG,KACfA,EAAG,YAAYuD,CAAO,CACzB,CAQD,cAAcJ,EAAQ,CAClB,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACfA,EAAG,cAAcmD,CAAM,CAC1B,CASD,mBAAmBA,EAAQ8K,EAAO,CAC9B,KAAM,CAAE,GAAAjO,CAAI,EAAG,KACf,OAAOA,EAAG,mBAAmBmD,EAAQ8K,CAAK,CAC7C,CAQD,iBAAiB9K,EAAQ,CACrB,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACf,OAAOA,EAAG,iBAAiBmD,CAAM,CACpC,CAQD,eAAgB,CACZ,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACf,OAAOA,EAAG,eACb,CAUD,oBAAoBuD,EAAS0K,EAAO,CAChC,KAAM,CAAE,GAAAjO,CAAI,EAAG,KACf,OAAOA,EAAG,oBAAoBuD,EAAS0K,CAAK,CAC/C,CASD,kBAAkB1K,EAAS,CACvB,KAAM,CAAE,GAAAvD,CAAI,EAAG,KACf,OAAOA,EAAG,kBAAkBuD,CAAO,CACtC,CASD,aAAaJ,EAAQD,EAAQ,CACzB,KAAM,CAAE,GAAAlD,CAAI,EAAG,KACfA,EAAG,aAAamD,EAAQD,CAAM,CACjC,CAQD,aAAaC,EAAQ,CACjB,KAAM,CAAE,GAAAnD,CAAI,EAAG,KACfA,EAAG,aAAamD,CAAM,CACzB,CACL,CAYO,SAASyN,GAAcrP,EAAGD,EAAG,CAChC,OAAIC,EAAE,SAAWD,EAAE,OACR,GAEJC,EAAE,MAAM,CAACwP,EAAGvE,IAEX,MAAM,QAAQuE,CAAC,GAAKA,aAAa,aAC1B,GAGAA,IAAMzP,EAAEkL,CAAC,CAEvB,CACL,CC3yBO,MAAMwE,EAAN,MAAMA,UAAsBzL,CAAQ,CAEvC,YAAYC,EAAW1C,EAAO,CAC1B,MAAM0C,CAAS,EAFnBlD,EAAA,cAGI,KAAK,MAAQ0O,EAAc,gBAAgBlO,GAAS,CAAE,CAAA,CACzD,CACD,IAAI,OAAQ,CACR,OAAO,KAAK,MAAM,KACrB,CACD,IAAI,MAAM3C,EAAO,CACb,KAAK,MAAM,MAAQA,CACtB,CACD,IAAI,QAAS,CACT,OAAO,KAAK,MAAM,MACrB,CACD,IAAI,OAAOA,EAAO,CACd,KAAK,MAAM,OAASA,CACvB,CACD,MAAM,gBAAiB,CACnB,MAAO,CACH,KAAM,KACN,iBAAkB,IAC9B,CACK,CACD,OAAO,gBAAgB2C,EAAO,CAC1B,MAAO,CACH,MAAOA,EAAM,OAAS,IACtB,OAAQA,EAAM,QAAU,GACpC,CACK,CAEL,EADIR,EA9BS0O,EA8BF,mBA9BJ,IAAMC,EAAND,ECCA,MAAME,WAAkCxE,CAAoB,CAE/D,YAAY1J,EAAKuF,EAAYC,EAAe,CACxC,MAAMxF,EAAKuF,EAAYC,CAAa,EAFxClG,EAAA,oBAII,MAAM0N,EAAchN,EAAI,oBACxB5C,EAAa4P,EAAa,8BAA8B,EACxD,KAAK,YAAcA,CACtB,CACD,MAAM,eAAgB,CAClB,KAAM,CAAE,IAAAhN,EAAK,WAAAuF,CAAY,EAAG,KACtB0E,EAAiB,KAAK,kBACxB,KAAK,uBAAsB,EACzB,CAAE,MAAAjI,EAAO,OAAAC,GAAW,KAAK,cAE/B,OAAAjC,EAAI,WAAW,EAAGA,EAAI,KAAMgC,EAAOC,EAAQ,EAAGjC,EAAI,KAAMA,EAAI,cAAe,IAAI,EAE/EuF,EAAW,iBAAiB,KAAMvD,EAAQC,EAAS,CAAC,EAEpDjC,EAAI,gBAAgB,KAAK,WAAW,EAEpCA,EAAI,qBAAqBA,EAAI,kBAAmBiK,EAAe,CAAC,EAEhEjK,EAAI,gBAAgB,IAAI,EACjB,CACH,MAAAgC,EACA,OAAAC,CACZ,CACK,CACL,CCtBO,SAASkM,GAA6BzJ,EAAK,CAC9C,MAAO,eAAe,KAAKA,CAAG,CAClC,CAMO,MAAM0J,GAAwB,MAAO1J,GAAQ,CAEhD,MAAM2J,EAAc,MADH,MAAM,MAAM3J,CAAG,GACG,cACnC,OAAIA,EAAI,QAAQ,MAAM,IAAM,GACjB4J,GAAYD,CAAW,EAE3BE,GAAYF,CAAW,CAClC,EAMMC,GAAc,MAAO/M,GAAW,CAClC,MAAMyI,EAAO,IAAI,SAASzI,CAAM,EAC1BiN,EAAexE,EAAK,UAAU,EAAE,IAAM,SACtCF,EAAU,CAAA,EACVlK,EAAO,CACT,iBAAkBoK,EAAK,UAAU,GAAIwE,CAAY,EACjD,WAAYxE,EAAK,UAAU,GAAIwE,CAAY,EAC3C,YAAaxE,EAAK,UAAU,GAAIwE,CAAY,EAC5C,qBAAsBxE,EAAK,UAAU,GAAIwE,CAAY,EACrD,oBAAqBxE,EAAK,UAAU,GAAIwE,CAAY,CAC5D,EACI,IAAIjB,EAAS,GAGbA,GAAU3N,EAAK,oBACf,QAAS4J,EAAI,EAAGA,EAAI5J,EAAK,qBAAsB4J,IAAK,CAChD,MAAMiF,EAAYzE,EAAK,UAAUuD,CAAM,EACvCA,GAAU,EACVzD,EAAQ,KAAKE,EAAK,OAAO,MAAMuD,EAAQkB,CAAS,CAAC,EACjDlB,GAAUkB,CACb,CACD,MAAO,CACH,KAAM,CACF,iBAAkB7O,EAAK,iBACvB,QAAAkK,EACA,MAAOlK,EAAK,YAAc,EAC1B,OAAQA,EAAK,aAAe,EAC5B,KAAM,KACT,EACD,iBAAkB,EAC1B,CACA,EAMM2O,GAAc,MAAOhN,GAAW,CASlC,MAAM8M,EAAc9M,EACdmN,EAAS,IAAI,WAAWL,EAAa,EAAG,EAAe,EAGvDM,EAAaD,EAAO,EAAW,EAAI,GACnCE,EAAY,IAAI,WAAWP,EAAaM,CAAU,EAClD7E,EAAU,CAAA,EACVlK,EAAO,CACT,WAAY8O,EAAO,CAAQ,EAC3B,YAAaA,EAAO,CAAS,EAC7B,qBAAsBA,EAAO,EAAc,GAAK,CACxD,EACI,IAAInB,EAAS,EACTvL,EAAQpC,EAAK,YAAc,EAC3BqC,EAASrC,EAAK,aAAe,EACjC,QAAS4J,EAAI,EAAGA,EAAI5J,EAAK,qBAAsB4J,IAAK,CAChD,MAAM8B,GAAUtJ,EAAQ,GAAM,IAAOC,EAAS,GAAM,GAAK,EACnD+H,EAAO,IAAI,WAAWqE,EAAaO,EAAU,WAAarB,EAAQjC,CAAK,EAC7ExB,EAAQ,KAAKE,CAAI,EACjBuD,GAAUjC,EACVtJ,EAAQA,GAAS,EACjBC,EAASA,GAAU,CACtB,CACD,MAAO,CACH,KAAM,CACF,iBAAkB,MAClB,QAAS6H,EACT,MAAOlK,EAAK,YAAc,EAC1B,OAAQA,EAAK,aAAe,EAC5B,KAAM,KACT,EACD,iBAAkB,EAC1B,CACA,EC5FaiP,EAAN,MAAMA,UAAqBtM,CAAQ,CAEtC,YAAYC,EAAW1C,EAAO,CAC1B,MAAM0C,CAAS,EAFnBlD,EAAA,cAGI,KAAK,MAAQuP,EAAa,gBAAgB/O,CAAK,CAClD,CACD,gBAAgBgP,EAAU,CACtB,OAAOA,EAAS,QAAQ,WAAW,IAAM,EAC5C,CACD,MAAM,gBAAiB,CACnB,KAAM,CAAE,IAAApC,EAAK,iBAAAqC,GAAqB,KAAK,MACvC,GAAI,CAACrC,EACD,MAAO,CACH,KAAM,IACtB,EAEQ,GAAI,OAAOA,GAAQ,SACf,OAAIA,aAAe,UACR,CACH,KAAMA,EACN,iBAAAqC,CACpB,EAEmB,CACH,KAAMrC,EAAK,EACX,iBAAAqC,CAChB,EAGQ,GAAIZ,GAA6BzB,CAAG,EAChC,OAAO0B,GAAsB1B,CAAG,EAGpC,MAAMsC,EAAcvK,GAAqBiI,CAAG,EAC5C,GAAI,KAAK,UAAU,mBACf,OAAO,MAAM,KAAK,UAAU,mBAAmB,SAASsC,EAAaD,CAAgB,EAEpF,GAAI,KAAK,UAAU,qBAAsB,CAE1C,MAAME,EAAO,MADI,MAAM,MAAMD,CAAW,GACZ,OACtBE,EAAkBH,GAAoB,KAAK,gBAAgBE,EAAK,IAAI,EAC1E,MAAO,CACH,KAAM,MAAM,kBAAkBA,EAAM,CAChC,iBAAkBC,EAAkB,cAAgB,OACpD,qBAAsB,OACtB,iBAAkB,MACtC,CAAiB,EACD,iBAAkBA,CAClC,CACS,KACI,CACD,MAAMC,EAAM,IAAI,MAChB,OAAMzC,EAAI,OAAO,EAAG,CAAC,IAAM,UACvByC,EAAI,YAAc,aAEtBA,EAAI,IAAMH,EACV,MAAM,IAAI,QAAQ,CAACI,EAASC,IAAW,CACnCF,EAAI,OAAS,IAAMC,IACnBD,EAAI,QAAU,IAAME,EAAO,IAAI,MAAM,sBAAsB,CAAC,CAC5E,CAAa,EAAE,MAAOC,GAAM,CACZ,QAAQ,MAAMA,CAAC,CAC/B,CAAa,EACM,CACH,KAAMH,EACN,iBAAkBJ,GAAoB,EACtD,CACS,CACJ,CACD,OAAO,aAAajP,EAAO,CACvB,MAAMyP,EAAgBV,EAAa,gBAAgB/O,CAAK,EAElDmH,EAAMsI,EAAc,KAAOA,EAAc,IAC/C,OAAI,OAAOtI,GAAQ,SACR,GAEJ,gBAAgBA,CAAG,IAAIsI,EAAc,kBAAoB,MAAM,EACzE,CACD,OAAO,gBAAgBzP,EAAO,CAC1B,MAAO,CACH,IAAKA,EAAM,KAAO,GAClB,iBAAkBA,EAAM,kBAAoB,GAC5C,IAAKA,EAAM,KAAO,IAC9B,CACK,CAEL,EADIR,EApFSuP,EAoFF,mBApFJ,IAAMW,EAANX,ECAP,MAAMY,GAAiB,GAChB,MAAMC,WAA0BjK,EAAa,CAyBhD,YAAY/E,EAAS,CACjB,MAAMA,CAAO,EAxBjBpB,EAAA,YACAA,EAAA,eAEAA,EAAA,kBAAa,IAAI,YAAY,KAAO,KAAO,CAAC,GAC5CA,EAAA,mBAAc,IAAI,aAAa,KAAK,UAAU,GAC9CA,EAAA,oBAAe,IAAI,YAAY,KAAK,UAAU,GAC9CA,EAAA,iBAAY,CAAA,GAEZA,EAAA,oBAAe,GACfA,EAAA,mBAAc,MACdA,EAAA,gBAAW,CAAA,GACXA,EAAA,qBAAgB,MAEhBA,EAAA,sBACAA,EAAA,6BAIAA,EAAA,uBAIAA,EAAA,6BAAwB,IAGpB,KAAK,KAAO,QACZ,KAAM,CAAE,OAAAzC,EAAQ,WAAA8S,EAAY,aAAAC,CAAY,EAAKlP,EAC7C,KAAK,eAAiB,IAAI2E,EAAa,KAAK,SAAS,EAIrD,KAAK,eAAe,mBAAmB,KAAM,EAAI,EAGjD,KAAK,eAAe,KAAK,SAAU,IAAM,CACrC,KAAK,MAAM,eACvB,CAAS,EACD,MAAMrI,EAAKJ,GAAmBC,EAAQ6D,EAAQ,UAAU,EAClDV,EAAO,KAAK,IAAM,IAAI0K,GAAoB1N,CAAE,EAC5CoG,EAAQJ,GAA4B2M,CAAU,EACpD3P,EAAI,SAAS,EAAG,EAAGnD,EAAO,MAAOA,EAAO,MAAM,EAC9CmD,EAAI,WAAWoD,EAAM,CAAC,EAAGA,EAAM,CAAC,EAAGA,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,EACrDpD,EAAI,SAAS,EAAI,EACjBA,EAAI,UAAUA,EAAI,IAAKA,EAAI,mBAAmB,EAC9CoH,GAAkBpH,EAAK4P,CAAY,EACnC,KAAK,OAAS,CACV,WAAY7I,GAAmB,KAAK,GAAG,EACvC,WAAYG,GAAmB,KAAK,GAAG,CACnD,EACQ,KAAK,UAAU,SAAW,KAC1B,KAAK,cAAgB,KAAK,UAAU,WAAW,eAAe,EAAE,OAChE,MAAM2I,EAAa7P,EAAI,eACvB5C,EAAayS,CAAU,EACvB,MAAMvC,EAAS,EAAI,aAAa,kBAChC,KAAK,qBAAuB,IAAI9C,GAAiB,CAC7C,CACI,OAAQqF,EACR,WAAY,CACR,WAAY,CACR,KAAM,aACN,KAAM,EACN,KAAM7P,EAAI,MACV,WAAY,GACZ,OAAAsN,EACA,OAAQ,CACX,EACD,oBAAqB,CACjB,KAAM,sBACN,KAAM,EACN,KAAMtN,EAAI,MACV,WAAY,GACZ,OAAAsN,EACA,OAAQ,EAAI,aAAa,iBAC5B,EACD,QAAS,CACL,KAAM,UACN,KAAM,EACN,KAAMtN,EAAI,cACV,WAAY,GACZ,OAAAsN,EACA,OAAQ,EAAI,aAAa,iBAC5B,EACD,eAAgB,CACZ,KAAM,iBACN,KAAM,EACN,KAAMtN,EAAI,MACV,WAAY,GACZ,OAAAsN,EACA,OAAQ,EAAI,aAAa,iBAC5B,CACJ,CACJ,CACb,CAAS,CACJ,CACD,OAAQ,CACJ,KAAM,CAAE,IAAAtN,CAAK,EAAG,KAChB,KAAK,aAAe,EACpB,KAAK,YAAc,KACnB,KAAK,UAAU,OAAS,EACxBA,EAAI,eAAe,EAAK,EACxBA,EAAI,MAAK,CACZ,CACD,kBAAmB,CACf,OAAO,KAAK,SACf,CACD,iBAAiBwF,EAAe,CAC5B,OAAIA,aAAyB6E,EAClB,IAAIC,GAAuB,KAAK,IAAK,KAAK,aAAc9E,CAAa,EAEvEA,aAAyByI,EACvB,IAAIC,GAA0B,KAAK,IAAK,KAAK,aAAc1I,CAAa,EAE5E,IAAIkE,EAAoB,KAAK,IAAK,KAAK,aAAclE,CAAa,CAC5E,CAaD,QAAQwB,EAAQ,CACZ,KAAM,CAAE,YAAA8I,EAAa,aAAAC,CAAc,EAAG,KAChC,CAAE,MAAA/N,EAAO,OAAAC,EAAQ,QAAA+N,EAAS,QAAAC,EAAS,QAAAC,EAAS,QAAAC,EAAS,eAAAC,EAAgB,OAAAjQ,EAAQ,YAAA0F,EAAa,MAAAnH,EAAO,aAAAoH,EAAc,GAAAuK,EAAI,GAAAC,EAAI,GAAAC,EAAI,GAAAC,EAAI,GAAAC,EAAI,GAAAC,EAAI,IAAK3O,GAAiB,uBAAAD,GAAwB,sBAAAmE,EAAqB,EAAMe,EACtN,GAAI,CAAE,QAAAd,CAAS,EAAGc,EAKlB,GAAInB,GAAe3G,EAAO2G,EAAa,aAAa,EAAG,CACnD,MAAM3D,EAAa2D,EAAY,YAE/B3D,EAAW,MAAQF,EACnBE,EAAW,OAASD,CACvB,CACDiE,EAAUA,GAAW,KAAK,eAC1B9I,EAAa8I,aAAmB3D,EAAS,sBAAsB,EAC/D,GAAI,CAAE,aAAcwD,EAAW,YAAA4K,CAAW,EAAK,KAC/C,MAAMC,GAAa,CACf,MAAA5O,EACA,OAAAC,CACZ,EACc4O,GAAe1Q,GAAU,KAAK,cACpC/C,EAAayT,cAAwBpQ,EAAe,EAC/C,KAAK,cAAcuG,CAAM,IAE1B,KAAK,YAAY6J,GAAchL,EAAanH,EAAOkS,GAAY9K,EAAcC,EAAWhE,GAAiBD,GAAwBmE,EAAqB,EACtJ0K,EAAc,KAAK,YACnBvT,EAAauT,CAAW,GAE5B,MAAMG,IAAQV,GAAA,YAAAA,EAAgB,QAAS,GACjCW,IAAQX,GAAA,YAAAA,EAAgB,QAAS,GACvC,IAAIY,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACjB,GAAIjL,aAAmBmE,EAAY,CAC/B,KAAM,CAAE,EAAGgG,EAAI,EAAGC,EAAI,MAAOc,EAAI,OAAQC,GAAOnL,EAAQ,MAClD,CAAE,MAAOoL,EAAU,EAAG,OAAQC,EAAU,GAAMrL,EAAQ,cACvD,YAAc,CAAE,MAAO,EAAG,OAAQ,CAAC,EACxC8K,EAAaX,EAAKiB,EAClBJ,EAAaF,EAAaI,EAAKE,EAC/BL,EAAaX,EAAKiB,EAClBJ,EAAaF,EAAaI,EAAKE,EAC/BrL,EAAUA,EAAQ,aACrB,CACD,MAAMsL,GAAapB,GAAA,YAAAA,EAAgB,aAAc,GACjD,GAAIlK,aAAmBsJ,GACfgC,GAActL,EAAQ,WAAY,CAClC,KAAM,CAAE,MAAOkL,EAAI,OAAQC,CAAI,EAAGnL,EAAQ,WAC1C,GAAIsL,EAAW,OAAS,QAAS,CAC7B,MAAMC,EAASzP,EAAQoP,EACjBM,EAASzP,EAASoP,EAClBM,EAAQ,KAAK,IAAIF,EAAQC,CAAM,EAC/BE,EAAY,EAAID,EAEtB,GAAIA,GAASF,GAAUA,EAASE,EAAO,CACnC,MAAME,EAAcD,EAAY5P,EAChCgP,GAAc,EAAIa,EAAcT,IAAOI,EAAW,OAAS,IAC3DN,EAAaF,EAAaa,EAAcT,CAC3C,CAED,GAAIO,GAASD,GAAUA,EAASC,EAAO,CACnC,MAAME,EAAcD,EAAY3P,EAChCgP,GAAc,EAAIY,EAAcR,IAAOG,EAAW,OAAS,IAC3DL,EAAaF,EAAaY,EAAcR,CAC3C,CACJ,CACJ,CAGDP,KACA,CAACE,EAAYE,CAAU,EAAI,CAACA,EAAYF,CAAU,GAElDD,KACA,CAACE,EAAYE,CAAU,EAAI,CAACA,EAAYF,CAAU,GAEtD,KAAM,CAAE,UAAAzO,EAAS,EAAK,KAAK,MACrBsP,GAAatP,GAAU,cAAc0D,CAAO,EAClD9I,EAAa0U,cAAsBpI,CAAmB,EACtD,MAAMqI,EAAa,KAAK,WAAWD,GAAY/L,CAAS,EAIxD,GAHA4K,EAAc,KAAK,YACnBvT,EAAauT,CAAW,EAEpBH,IAAO,GAAKC,IAAO,EAEnBX,EAAY/J,GAAW,EAAIsK,EAC3BP,EAAY/J,GAAW,EAAIuK,EAC3BR,EAAY/J,GAAW,EAAIiL,EAC3BlB,EAAY/J,GAAW,EAAIkL,EAC3BlB,EAAahK,GAAW,EAAIiK,EAC5BF,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIsK,EAAKrO,EAAQuO,EACxCT,EAAY/J,GAAW,EAAIuK,EAAKtO,EAAQyO,EACxCX,EAAY/J,GAAW,EAAImL,EAC3BpB,EAAY/J,GAAW,EAAIkL,EAC3BlB,EAAahK,GAAW,EAAIkK,EAC5BH,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIsK,EAAKpO,EAASuO,EACzCV,EAAY/J,GAAW,EAAIuK,EAAKrO,EAASyO,EACzCZ,EAAY/J,GAAW,EAAIiL,EAC3BlB,EAAY/J,GAAW,EAAIoL,EAC3BpB,EAAahK,GAAW,EAAImK,EAC5BJ,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIsK,EAAKrO,EAAQuO,EAAKtO,EAASuO,EACtDV,EAAY/J,GAAW,EAAIuK,EAAKtO,EAAQyO,EAAKxO,EAASyO,EACtDZ,EAAY/J,GAAW,EAAImL,EAC3BpB,EAAY/J,GAAW,EAAIoL,EAC3BpB,EAAahK,GAAW,EAAIoK,EAC5BL,EAAY/J,GAAW,EAAIgM,MAE1B,CAGD,MAAMC,EAAe3B,EAAKrO,EAAQuO,EAC5B0B,EAAe3B,EAAKrO,EAASyO,EAEnCZ,EAAY/J,GAAW,EAAIsK,EAC3BP,EAAY/J,GAAW,EAAIuK,EAC3BR,EAAY/J,GAAW,EAAIiL,EAC3BlB,EAAY/J,GAAW,EAAIkL,EAC3BlB,EAAahK,GAAW,EAAIiK,EAC5BF,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIiM,EAC3BlC,EAAY/J,GAAW,EAAIuK,EAC3BR,EAAY/J,GAAW,EAAImL,EAC3BpB,EAAY/J,GAAW,EAAIkL,EAC3BlB,EAAahK,GAAW,EAAIkK,EAC5BH,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIsK,EAC3BP,EAAY/J,GAAW,EAAIkM,EAC3BnC,EAAY/J,GAAW,EAAIiL,EAC3BlB,EAAY/J,GAAW,EAAIoL,EAC3BpB,EAAahK,GAAW,EAAImK,EAC5BJ,EAAY/J,GAAW,EAAIgM,EAE3BjC,EAAY/J,GAAW,EAAIiM,EAC3BlC,EAAY/J,GAAW,EAAIkM,EAC3BnC,EAAY/J,GAAW,EAAImL,EAC3BpB,EAAY/J,GAAW,EAAIoL,EAC3BpB,EAAahK,GAAW,EAAIoK,EAC5BL,EAAY/J,GAAW,EAAIgM,CAC9B,CAEDpB,EAAY,QAAUlB,GACtBkB,EAAY,WACZ,KAAK,aAAe5K,CACvB,CAQD,YAAY5F,EAAQ0F,EAAanH,EAAOwD,EAAY4D,EAAcC,EAAWhE,EAAiBD,EAAwBmE,EAAuB,CACzI,MAAM0K,EAAc,IAAIhL,GAAkB,KAAK,IAAK,KAAK,QAAS,KAAK,qBAAsBxF,EAAQ0F,EAAanH,EAAOoH,EAAc5D,EAAY6D,EAAW,EAC9JhE,EAAiBD,EAAwBmE,CAAqB,EAC9D,KAAK,YAAc0K,EACnB,KAAK,UAAU,KAAKA,CAAW,CAClC,CAaD,WAAWzK,EAASH,EAAWmM,EAAW,CACtC,KAAM,CAAE,YAAAvB,CAAa,EAAG,KACxBvT,EAAauT,CAAW,EACxB,MAAMoB,EAAapB,EAAY,WAAWzK,CAAO,EAEjD,GAAI6L,IAAe,WAAY,CAC3B,GAAIG,EACA,MAAM,IAAI,MAAM,oCAAoC,EAExD,KAAM,CAAE,OAAA/R,EAAQ,YAAA0F,EAAa,WAAA3D,EAAY,aAAA4D,EAAc,MAAApH,CAAO,EAAGiS,EACjE,YAAK,YAAYxQ,EAAQ0F,EAAanH,EAAOwD,EAAY4D,EAAcC,CAAS,EACzE,KAAK,WAAWG,EAASH,EAAW,EAAI,CAClD,CACD,OAAOgM,CACV,CAMD,cAAc/K,EAAQ,OAClB,KAAM,CAAE,OAAA7G,EAAQ,YAAA0F,EAAa,uBAAA/D,EAAwB,IAAAqQ,EAAK,aAAArM,CAAc,EAAGkB,EACrE6J,EAAe1Q,GAAU,KAAK,cAgBpC,MAdI,IAAA0J,EAAA,KAAK,cAAL,YAAAA,EAAkB,UAAWgH,GAI7B,CAACzM,GAAY,KAAK,YAAY,aAAc0B,CAAY,GAMxDhE,GAA0BqQ,GAI1B,KAAK,YAAY,SAAW,KAAK,gBAChC,CAACtM,GACE,CAAC,KAAK,YAAY,OAAO,oBAAoB,KAAK,YAAY,YAAaA,CAAW,GAKjG,CAID,YAAYnD,EAAY,CACpB,KAAK,UAAU,KAAKA,CAAU,EAC9B,KAAK,YAAc,IACtB,CAQD,OAAO0P,EAAU,SAAU,CACvB,KAAM,CAAE,IAAApS,EAAK,WAAA6P,CAAY,EAAG,KACtBwC,EAAM,IAAI,aAAaxC,EAAY,EAAG,KAAK,YAAY,EACvDtO,EAAS,KAAK,qBAAqB,UAAU,YAAY,GAAK,KACpEvB,EAAI,gBAAgBuB,EAAQ8Q,EAAKrS,EAAI,WAAW,EAKhD,KAAK,UAAU,QAAQ,CAAC6B,EAAU2H,IAAM,CAIpC3H,EAAS,KAAI,CACzB,CAAS,CACJ,CACD,gBAAgByQ,EAAM,CAClB,QAAS9I,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQA,IACtC,GAAI,KAAK,SAASA,CAAC,IAAM8I,EACrB,OAIR,KAAK,SAAS,QAAQA,CAAI,CAC7B,CACD,gBAAiB,CACb,KAAM,CAAE,IAAAtS,CAAK,EAAG,KACV,CAAE,UAAAwC,CAAS,EAAK,KAAK,MAE3B,QAASgH,EAAI,EAAGA,EAAI,KAAK,SAAS,OAAQA,IAAK,CAC3C,MAAM8I,EAAO,KAAK,SAAS9I,CAAC,EAE5B,GAAI,CAAC8I,GAAQ,CAACA,EAAK,cACf,SAIJ,KAAK,cAAgBA,EACrBlV,EAAakV,EAAK,QAAS,0BAA0B,EACrD,MAAMR,EAAatP,EAAU,cAAc8P,EAAK,OAAO,EACvDlV,EAAa0U,aAAsB5D,EAAyB,EAC5D,KAAK,sBAAwB,GAE7BlO,EAAI,gBAAgB8R,EAAW,WAAW,EAC1C9R,EAAI,SAAS,EAAG,EAAG8R,EAAW,EAAGA,EAAW,CAAC,EAC7C9R,EAAI,MAAK,EAET,QAASwJ,EAAI,EAAGA,EAAI8I,EAAK,SAAS,OAAQ9I,IAAK,CAC3C,MAAM+I,EAAQD,EAAK,SAAS9I,CAAC,EACxB+I,IAGLA,EAAM,OAAO,KAAK,MAAM,UAAW,CAC/B,EAAG,EACH,EAAG,EACH,MAAO,EACP,OAAQ,EACR,MAAO,EAC3B,CAAiB,EACD,KAAK,MAAM,SAASA,CAAK,EACzBA,EAAM,cAAgB,GACzB,CAED,KAAK,OAAM,EAEX,KAAK,UAAU,OAAS,EACxBD,EAAK,cAAgB,EACxB,CAEDtS,EAAI,gBAAgB,IAAI,EACxBA,EAAI,SAAS,EAAG,EAAG,KAAK,IAAI,OAAO,MAAO,KAAK,IAAI,OAAO,MAAM,EAChE,KAAK,sBAAwB,EAChC,CACD,cAAcsS,EAAM,CAChB,MAAM5S,EAAQ,KAAK,SAAS,QAAQ4S,CAAI,EACpC5S,IAAU,IAGd,KAAK,SAAS,OAAOA,EAAO,CAAC,CAChC,CACL,CC/cO,MAAM8S,GAAoB,CAC7B,UAAW,GACX,gBAAiB,GACjB,MAAO,GACP,IAAK,EACL,iBAAkB,KAClB,sBAAuB,KACvB,kBAAmB,KACnB,mBAAoB,KACpB,mBAAoB,KACpB,wBAAyB,KACzB,wBAAyB,KACzB,2BAA4B,KAC5B,uBAAwB,KACxB,uBAAwB,KACxB,eAAgB,KAChB,oBAAqB,KACrB,6BAA8B,MAC9B,sBAAuB,MACvB,0BAA2B,MAC3B,sBAAuB,KACvB,sBAAuB,KACvB,qBAAsB,KACtB,wBAAyB,KACzB,2BAA4B,KAC5B,4BAA6B,KAC7B,4BAA6B,KAC7B,6BAA8B,KAC9B,sBAAuB,KACvB,qBAAsB,KACtB,uBAAwB,KACxB,uBAAwB,IAC5B,EChCO,MAAMC,EAAW,CACxB,CCCO,MAAMC,WAAsBD,EAAW,CAI1C,YAAY7S,EAAM+S,EAAU,CACxB,QAJJrT,EAAA,aACAA,EAAA,iBACAA,EAAA,iBAGI,KAAK,KAAOM,EACZ,KAAK,SAAW+S,EAChB,MAAMC,EAAY,KAAK,SAAW,CAAE,EACpChT,EAAK,SAAS,QAASiT,GAAY,CAC/B,MAAMC,EAASD,EAAQ,OACjBE,EAAUH,EAASE,CAAM,EAAIF,EAASE,CAAM,GAAK,CAAA,EACvDC,EAAOF,EAAQ,KAAK,EAAIA,EAAQ,MAC5C,CAAS,EACD,KAAK,SAAWD,CACnB,CACD,CAAC,UAAU9S,EAAOkT,EAAY,OAC1B,IAAIC,EACAC,EACJ,MAAQD,EAAkBD,EAAW,KAAI,IAAO,CAACC,EAAgB,MAAM,CACnE,MAAME,EAAYF,EAAgB,MAC5BG,EAAQ,KAAK,SAAS,IAAID,CAAS,EAEzC,GADAH,EAAW,KAAI,EACXI,IAAU,OAAW,CAMrB,MAAMP,EAAUK,IAAgB,UACzBrJ,EAAA,KAAK,SAASuJ,EAAM,EAAE,IAAtB,YAAAvJ,EAA0BqJ,KAAgB,GACzCpT,EAAM,cACR,EACNoT,EAAcE,EAAM,GACpB,KAAM,CACF,OAAQ,GACR,QAASA,EAAM,GACf,UAAAD,EACA,QAASH,EAAW,UACpB,SAAUI,EAAM,SAAWP,EAC3B,SAAU,EACV,QAASO,EAAM,QAAUP,EACzB,QAASO,EAAM,QACf,SAAU,EACV,SAAU,EACV,MAAOA,EAAM,MACb,OAAQA,EAAM,MAClC,CACa,MAOOD,IAAcX,GAAkB,YAChCU,EAAc,QAElB,KAAM,CACF,OAAQ,GACR,UAAAC,EACA,QAASH,EAAW,SACxC,CAES,CACJ,CACL,CC9DO,MAAMK,WAAsBvO,EAAW,CAW1C,YAAY7E,EAAMS,EAAS,CACvB,MAAMA,CAAO,EAXjBpB,EAAA,aACAA,EAAA,gBAKAA,EAAA,qBAAgB,GAChBA,EAAA,aACAA,EAAA,eACAA,EAAA,gBAAW,IAAI,KAGX,KAAM,CAAE,SAAAgU,EAAU,aAAAC,EAAc,MAAAC,CAAK,EAAK9S,EAC1C,KAAK,KAAOT,EACZ,MAAMU,EAAW6S,EAAM,SACvBpW,EAAauD,aAAoB+O,GAAmB,yDAAyD,EAC7G,KAAK,QAAU8D,EAAM,UAAU,YAAY,eAAgB,CACvD,IAAKF,EAKL,iBAAkB,EAC9B,EAAW,CACC,QAAS,EACrB,CAAS,EACD,KAAK,QAAQ,GAAG,SAAU,IAAM,CAC5B,KAAK,YAAW,CAC5B,CAAS,EAED,MAAMC,CAAY,EACb,KAAK,MAAOE,GAAa,OAE1B,KAAK,KAAO,MAAMA,EAAS,KAAI,EAC/BrW,EAAa,KAAK,IAAI,EAGtB,IAAIsW,EAAgB,EAgBpB,GAfA,KAAK,KAAK,MAAM,QAASN,GAAU,CAC/B,KAAK,SAAS,IAAIA,EAAM,GAAIA,CAAK,EACjC,MAAMO,EAAaP,EAAM,QAAUA,EAAM,OACrCO,EAAaD,IACbA,EAAgBC,EAEpC,CAAa,EAED,KAAK,cAAgBD,EAGrB,KAAK,OAAS,IAAIhB,GAAc,KAAK,KAAM,KAAK,QAAQ,EAIpD,CAAC,KAAK,QACN,IAAI7I,EAAA,KAAK,OAAL,MAAAA,EAAW,iBAAkB,CAC7B,KAAM,CAAE,SAAA+J,EAAU,UAAAC,EAAW,QAAAC,EAAS,WAAAC,CAAU,EAAK,KAAK,KAAK,iBAC/D,KAAK,QAAU,CACX,SAAUH,EAAWG,EACrB,UAAWF,EAAYE,EACvB,QAASD,EAAUC,CAC3C,CACiB,KAEG,OAAM,IAAI,MAAM,6BAA6B,KAAK,IAAI,SAAS,KAAK,UAAU,qHAErB,EAGjE,KAAK,YAAW,CAC5B,CAAS,EACI,MAAM,QAAQ,KAAK,CAC3B,CACD,cAAcC,EAAS,CACnB,MAAMZ,EAAQ,KAAK,SAAS,IAAIY,CAAO,EACvC,GAAIZ,IAAU,OACV,MAAM,IAAI,MAAM,SAASY,CAAO,sBAAsB,KAAK,UAAU,EAAE,EAE3E,MAAO,CACH,EAAGZ,EAAM,EACT,EAAGA,EAAM,EACT,MAAOA,EAAM,MACb,OAAQA,EAAM,MAC1B,CACK,CACD,aAAc,CACN,KAAK,QAEL,KAAK,QAAQ,QAAU,UAAY,KAAK,OACxC,KAAK,OAAS,GACd,KAAK,KAAK,QAAQ,EAEzB,CACL,CC3FO,MAAMa,EAAc,CAC3B","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]}